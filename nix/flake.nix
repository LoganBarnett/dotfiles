# This was generated by home-manager running with a flake installation.
{
  description = "Home Manager configuration of logan";

  inputs = {
    darwin = {
      url = "github:LnL7/nix-darwin/master";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs-comfyui";
    };
		emacs-overlay = {
			url = "github:nix-community/emacs-overlay/master";
			inputs.nixpkgs.follows = "nixpkgs";
		};
    fenix = {
      url = "github:nix-community/fenix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-anywhere = {
      url = "github:numtide/nixos-anywhere";
      inputs = {
        nixpkgs.follows = "nixpkgs-comfyui";
        disko.follows = "disko";
      };
    };
    nixos-hardware = {
      url = "github:NixOS/nixos-hardware/master";
      # nixos-hardware doesn't actually use nixpkgs.
      # inputs.nixpkgs.follows = "nixpkgs-comfyui";
    };
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/master";
    nixpkgs-comfyui.url = "github:LoganBarnett/nixpkgs/comfyui";
    # nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
    home-manager-comfyui = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs-comfyui";
    };
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    darwin,
    disko,
    emacs-overlay,
    fenix,
    nixpkgs,
    nixpkgs-comfyui,
    nixos-anywhere,
    # nixos-generators,
    home-manager,
    home-manager-comfyui,
    ...
  }:
    let
      aarch64-darwin-system = "aarch64-darwin";
      aarch64-darwin-pkgs = import nixpkgs {
        system = aarch64-darwin-system;
        # Based on observations from running `home-manager switch` I believe
        # that this has no effect. At one point it did. This is probably a
        # breaking change.
        overlays = (import ./overlays/default.nix);
        # Some packages are not "free". We need to specifically bless those.
        # I had trouble using a real function because the depended functions are
        # hard/impossible to reach from this place. It cannot exist later
        # because setting nixpkgs.config is ignored if pkgs is set. I found some
        # of those functions declared here:
        # https://github.com/NixOS/nixpkgs/blob/d84cc41f8babd418c295fcbfbd41a1fd4e2adaec/lib/strings.nix#L699
        # This ticket https://github.com/nix-community/home-manager/issues/2954
        # talks about the issue directly, but never comes to a workable
        # resolution for the allowUnfreePredicate value, which  needs "lib" to
        # work. I'm not familiar enough with nix's structure to really move
        # forward here. What we have now is the equivalent of what's commented
        # below:
        # config.allowUnfree = true;
        config.allowUnfreePredicate = (pkg: true);
        # This has been needed to individually bless some older packages, such
        # as packages depending upon an older OpenSSL.
        config.permittedInsecurePackages = [];
        # nixpkgs.legacyPackages.${system};
      };
    in {

      darwinConfigurations."M-CL64PK702X" = darwin.lib.darwinSystem {
        system = aarch64-darwin-system;
        modules = [
          home-manager.darwinModules.home-manager
          {
            nixpkgs.overlays = [ fenix.overlays.default ];
          }
          # the _module.args idiom is how I can ensure these values get passed
          # via the internal callPackage mechanism for darwinSystem on these
          # modules.  We want callPackage because it does automatic "splicing"
          # of nixpkgs to achieve cross-system compiling.  I don't know that we
          # need to use this at this point, but making it all consistent has
          # value.
          {
						_module.args.emacs-overlay = emacs-overlay;
            _module.args.nixpkgs = nixpkgs;
          }
          ./darwin.nix
          ./users/logan-new-e-ah.nix
          ./headed-host.nix
          (let
          in {
            security.pki.certificateFiles = [
              "${aarch64-darwin-pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
              ./new-e-ah-certs.pem
            ];
            environment.systemPackages = [
            ];
          })
        ];
      };

      darwinConfigurations."scandium" = darwin.lib.darwinSystem {
        system = aarch64-darwin-system;
        modules = [
          home-manager.darwinModules.home-manager
          {
            nixpkgs.overlays = [ fenix.overlays.default ];
          }
          # Before I was using a curried function to pass these things in, but
          # the _module.args idiom is how I can ensure these values get passed
          # via the internal callPackage mechanism for darwinSystem on these
          # modules.  We want callPackage because it does automatic "splicing"
          # of nixpkgs to achieve cross-system compiling.  I don't know that we
          # need to use this at this point, but making it all consistent has
          # value.
          {
						_module.args.emacs-overlay = emacs-overlay;
            _module.args.nixpkgs = nixpkgs;
          }
          ./darwin.nix
          ./users/logan-personal.nix
          ./headed-host.nix
          ./darwin-linux-builder-module.nix
        ];
      };

      packages.x86_64-linux.nixosConfigurations.lithium = let
        system = "x86_64-linux";
        pkgs = import nixpkgs-comfyui {
          inherit system;
        };
      in
        (pkgs.callPackage ./hosts/lithium.nix {
          nixpkgs = nixpkgs-comfyui;
        });

    };
}
