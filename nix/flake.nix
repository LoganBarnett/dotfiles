# This was generated by home-manager running with a flake installation.
{
  description = "Nix configuration of logan";

  inputs = {
    agenix = {
      url = "github:ryantm/agenix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # https://github.com/oddlama/agenix-rekey
    # Allows re-keying and bootstrapping of secrets used by agenix.
    agenix-rekey = {
      url = "github:LoganBarnett/agenix-rekey/parameterize-generators";
      # url = "git+file:///Users/logan/dev/agenix-rekey?ref=parameterize-generators";
      # There is a documented gotcha in the readme if this must change.  Review
      # agenix-rekey's README for details.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Give us a tool for getting the current system.  See
    # https://discourse.nixos.org/t/getting-the-current-system-from-the-command-line/19781/10
    # for discussion on the matter.
    current-system = {
      url = "github:nix-systems/current-system";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-darwin = {
      url = "github:LnL7/nix-darwin/master";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-generators = {
      url = "github:LoganBarnett/nixos-generators?ref=add-sd-image-raspberrypi";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    disko-comfyui = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs-comfyui";
    };
    # emacs-overlay = {
    #   url = "github:nix-community/emacs-overlay/master";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };
    nixos-anywhere = {
      url = "github:numtide/nixos-anywhere";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        disko.follows = "disko";
      };
    };
    nixos-hardware = {
      url = "github:NixOS/nixos-hardware/master";
      # nixos-hardware doesn't actually use nixpkgs.
      # inputs.nixpkgs.follows = "nixpkgs";
    };
    # Specify the source of Home Manager and Nixpkgs.
    # nixpkgs.url = "github:nixos/nixpkgs/master";
    nixpkgs.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase";
    # nixpkgs.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    nixpkgs-comfyui.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase";
    # nixpkgs-comfyui.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    # See if we can nix this (get it?!) because
    # https://github.com/NixOS/nixpkgs/pull/296249 is now merged with a hopeful
    # fix.
    # nixpkgs-comfyui.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase";
    # nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs-nickel.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase";
    # nixpkgs-nickel.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    raspberry-pi-nix = {
      url = "github:tstat/raspberry-pi-nix";
      # url = "github:tstat/raspberry-pi-nix?ref=8fc9cbd3e4a53d365596c9cc4fc3cc07cd447af4";
      # url = "github:LoganBarnett/raspberry-pi-nix?ref=revert-kernel-to-6-1";
      inputs.nixpkgs.follows = "nixpkgs-nickel";
    };
  };

  outputs = {
    agenix,
    agenix-rekey,
    current-system,
    disko,
    disko-comfyui,
    # emacs-overlay,
    nix-darwin,
    nixpkgs,
    nixpkgs-comfyui,
    nixpkgs-nickel,
    nixos-anywhere,
    nixos-hardware,
    nixos-generators,
    home-manager,
    raspberry-pi-nix,
    self,
    ...
  }@flake-inputs:
    let
      aarch64-darwin-system = "aarch64-darwin";
      aarch64-darwin-pkgs = import nixpkgs {
        system = aarch64-darwin-system;
        # Based on observations from running `home-manager switch` I believe
        # that this has no effect. At one point it did. This is probably a
        # breaking change.
        overlays = (import ./overlays/default.nix);
        # Some packages are not "free". We need to specifically bless those.
        # I had trouble using a real function because the depended functions are
        # hard/impossible to reach from this place. It cannot exist later
        # because setting nixpkgs.config is ignored if pkgs is set. I found some
        # of those functions declared here:
        # https://github.com/NixOS/nixpkgs/blob/d84cc41f8babd418c295fcbfbd41a1fd4e2adaec/lib/strings.nix#L699
        # This ticket https://github.com/nix-community/home-manager/issues/2954
        # talks about the issue directly, but never comes to a workable
        # resolution for the allowUnfreePredicate value, which  needs "lib" to
        # work. I'm not familiar enough with nix's structure to really move
        # forward here. What we have now is the equivalent of what's commented
        # below:
        # config.allowUnfree = true;
        config.allowUnfreePredicate = (pkg: true);
        # This has been needed to individually bless some older packages, such
        # as packages depending upon an older OpenSSL.
        config.permittedInsecurePackages = [];
        # nixpkgs.legacyPackages.${system};
      };
    in {

      nixosConfigurations.cobalt = nixpkgs.lib.nixosSystem
        (import ./hosts/cobalt.nix {
          build-system = "nixpkgs";
          disko-proper = disko-comfyui;
          inherit flake-inputs nixpkgs;
        })
      ;
      packages.aarch64-linux.cobalt-nixpkgs =
        self
          .nixosConfigurations
          .cobalt
          .config
          .system
          .build
          .sdImage
      ;

      nixosConfigurations.cobalt-pi = nixpkgs.lib.nixosSystem
        (import ./hosts/cobalt.nix {
          build-system = "raspberry-pi-nix";
          disko-proper = disko-comfyui;
          inherit flake-inputs nixpkgs;
        })
      ;

      packages.aarch64-linux.cobalt-nixos-generate =
        nixos-generators.nixosGenerate  (import ./hosts/cobalt.nix {
          disko-proper = disko-comfyui;
          build-system = "nixos-generators";
          inherit flake-inputs nixpkgs;
        });

      packages.aarch64-linux.cobalt-image = self
        .nixosConfigurations
        .cobalt
        .config
        .system
        .build
        .sdImage
      ;

      packages.armv7l-linux.cobalt-image = self
        .nixosConfigurations
        .cobalt
        .config
        .system
        .build
        .sdImage
      ;

      nixosModules.cobalt = { ... }: {
        imports = [
          (import ./hosts/nickel.nix {
            disko-proper = disko-comfyui;
            inherit flake-inputs nixpkgs;
          })
        ];
        format = "sdImage";
      };

      darwinConfigurations."M-CL64PK702X" =
        nix-darwin.lib.darwinSystem (import ./hosts/M-CL64PK702X.nix {
          inherit flake-inputs;
        });

      darwinConfigurations."scandium" =
        nix-darwin.lib.darwinSystem (import ./hosts/scandium.nix {
          inherit flake-inputs;
        });

      nixosConfigurations.lithium =
        nixpkgs.lib.nixosSystem (import ./hosts/lithium.nix {
          disko-proper = disko-comfyui;
          inherit flake-inputs;
        });
      # Unsure if we need this, but if we do, it serves as a shortcut
      # essentially.
      packages.x86_64-linux.lithium = self.nixosConfigurations.lithium;

      nixosConfigurations.nickel = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/nickel.nix {
            disko-proper = disko-comfyui;
            inherit flake-inputs nixpkgs;
          })
        ];
      };

      # nixosConfigurations.nickel = nixpkgs-nickel.lib.nixosSystem {
      #   modules = [
      #     raspberry-pi-nix.nixosModules.raspberry-pi (import ./hosts/nickel.nix {
      #       disko-proper = disko-comfyui;
      #       nixpkgs = nixpkgs-nickel;
      #       inherit flake-inputs ;
      #     })
      #     # (import ./hosts/nickel.nix {
      #     #   disko-proper = disko-comfyui;
      #     #   inherit flake-inputs nixpkgs;
      #     # })
      #   ];
      # };

      # nixosModules.nickel = { ... }: {
      #   imports = [
      #     (import ./hosts/nickel.nix {
      #       disko-proper = disko-comfyui;
      #       inherit flake-inputs nixpkgs;
      #     })
      #   ];
      #   format = "sd-image-raspberrypi";
      # };
      # packages.aarch64-linux.nickel-image = self
      #   .nixosConfigurations
      #   .nickel
      #   .config
      #   .formats
      #   .sdImage
      # ;

      # packages.aarch64-linux.nickel-image = self
      #   .nixosConfigurations
      #   .nickel
      #   .config
      #   .system
      #   .build
      #   .sdImage
      # ;

      # Thie nixos-generators approach.
      # I've switched to raspberry-pi-nix but may return here once that is
      # proved out.
      # packages.aarch64-linux.nickel = nixos-generators.nixosGenerate {
      # packages.armv6l-linux.nickel = nixos-generators.nixosGenerate {
      packages.armv7l-linux.nickel = nixos-generators.nixosGenerate {
      # nixosConfigurations.nickel = nixos-generators.nixosGenerate {
        # system = "aarch64-linux";
        # system = "armv6l-linux";
        system = "armv7l-linux";
        # system = "aarch64-unknown-linux-gnu";
        modules = [
          # ./nixos-modules/sd-image-rasbperrypi.nix
          (import ./hosts/nickel.nix {
            disko-proper = disko-comfyui;
            nixpkgs = nixpkgs;
            inherit flake-inputs;
          })
        ];
        # format = "sd-image-raspberrypi";
        # format = "sdImageRaspberryPi";
        # customFormats = {
        #   sd-image-raspberrypi = { modulesPath, ... }: {
        #     imports = [
        #       "${toString modulesPath}/installer/sd-card/sd-image-raspberrypi.nix"
        #     ];
        #     formatAttr = "sd-image-raspberrypi";
        #   };
        # };
        # Is there a point in setting this?  The command line doesn't seem to
        # see it.
      };

      nixosConfigurations.nucleus-installer = (let
        pkgs = import nixpkgs {
          system = "x86_64-linux";
          # _module.args is an idiom for populating the arguments available to
          # callPackge, but I don't understand its nuances so it's repeated
          # below.
          _module.args = {
            buildPlatform = "aarch64-linux";
            destinationPlatform = "x86_64-linux";
          };
        };
      in
        nixpkgs.lib.nixosSystem (import ./hosts/nucleus.nix {
          buildPlatform = "aarch64-linux";
          destinationHostname = "lithium";
          destinationPlatform = "x86_64-linux";
          disko-proper = disko;
          inherit flake-inputs nixpkgs pkgs;
        }));

      packages.aarch64-darwin.nucleus-installer = self
        .nixosConfigurations
        .nucleus-installer
        .config
        .system
        .build
        .isoImage
      ;

      agenix-rekey = agenix-rekey.configure {
        userFlake = self;
        nodes = self.nixosConfigurations // self.darwinConfigurations;
      };

      packages.aarch64-linux.distributed-test = let
        pkgs = import nixpkgs {
          system = "aarch64-linux";
        };
      in
        pkgs.hello;

    };

}
