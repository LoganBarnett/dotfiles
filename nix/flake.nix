# This was generated by home-manager running with a flake installation.
{
  description = "Home Manager configuration of logan";

  inputs = {
    darwin = {
      url = "github:LoganBarnett/nix-darwin/linux-builder-big-config";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      # I've had mixed advice to use this or not use this.
      # This is said to tie into issues with pkgs and nixpkgs mixings due to
      # Home-manager and the nixpkgs.config.
      # inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { darwin, nixpkgs, home-manager, ... }:
    let
      system = "aarch64-darwin";
      pkgs = import nixpkgs {
        inherit system;
        # Based on observations from running `home-manager switch` I believe
        # that this has no effect. At one point it did. This is probably a
        # breaking change.
        overlays = (import ./overlays/default.nix);
        # Some packages are not "free". We need to specifically bless those.
        # I had trouble using a real function because the depended functions are
        # hard/impossible to reach from this place. It cannot exist later
        # because setting nixpkgs.config is ignored if pkgs is set. I found some
        # of those functions declared here:
        # https://github.com/NixOS/nixpkgs/blob/d84cc41f8babd418c295fcbfbd41a1fd4e2adaec/lib/strings.nix#L699
        # This ticket https://github.com/nix-community/home-manager/issues/2954
        # talks about the issue directly, but never comes to a workable
        # resolution for the allowUnfreePredicate value, which  needs "lib" to
        # work. I'm not familiar enough with nix's structure to really move
        # forward here. What we have now is the equivalent of what's commented
        # below:
        # config.allowUnfree = true;
        config.allowUnfreePredicate = (pkg: true);
        # This has been needed to individually bless some older packages, such
        # as packages depending upon an older OpenSSL.
        config.permittedInsecurePackages = [];
        # nixpkgs.legacyPackages.${system};

      };
    in {
      homeConfigurations."logan" = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        modules = [
          ./home.nix
          {
            home = {
              username = "logan" ;
              homeDirectory = "/Users/logan" ;
              packages = []
                ++ (import ./general-packages.nix) {pkgs = pkgs; inherit system; }
                ++ (import ./personal-packages.nix) { pkgs = pkgs; }
              ;
            };
          }
        ];
      };
      darwinConfigurations."M-CL64PK702X" = darwin.lib.darwinSystem {
        inherit system;
        modules = [
          home-manager.darwinModules.home-manager
          (import ./darwin.nix {
            inherit nixpkgs;
            linux-builder-enabled = false;
          })
        ];
      };
      darwinConfigurations."scandium" = darwin.lib.darwinSystem {
        inherit system;
        modules = [
          home-manager.darwinModules.home-manager
          (import ./darwin.nix {
            inherit nixpkgs;
            linux-builder-enabled = true;
          })
        ];
      };
      homeConfigurations."logan.barnett" = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        modules = [
          ./home.nix
          {
            home = {
              username = "logan.barnett" ;
              homeDirectory = "/Users/logan.barnett" ;
              packages = []
                ++ (import ./general-packages.nix) {pkgs = pkgs; inherit system; }
                # TODO: Need a means of using private nix files. Perhaps via a
                # git submodule.
      #          ++ (import ../../dotfiles-private/work-new-e-ah-packages.nix) {
                #   pkgs = pkgs;
                # }
              ;
            };
          }
        ];
      };
    };
}
# The docs recommends this, using nix-darwin as an assumption (I don't think
# that is safe).
# {
#   description = "Darwin configuration";

#   inputs = {
#     nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
#     darwin.url = "github:lnl7/nix-darwin";
#     darwin.inputs.nixpkgs.follows = "nixpkgs";
#     home-manager.url = "github:nix-community/home-manager";
#     home-manager.inputs.nixpkgs.follows = "nixpkgs";
#   };

#   outputs = inputs@{ nixpkgs, home-manager, darwin, ... }: {
#     darwinConfigurations = {
#       hostname = darwin.lib.darwinSystem {
#         # system = "x86_64-darwin";
#         modules = [
#           # ./configuration.nix
#           home-manager.darwinModules.home-manager
#           {
#             home-manager.useGlobalPkgs = true;
#             home-manager.useUserPackages = true;
#             home-manager.users.logan = import ./home.nix;
#             home-manager.users."logan.barnett" = import ./home.nix;

#             # Optionally, use home-manager.extraSpecialArgs to pass
#             # arguments to home.nix
#           }
#         ];
#       };
#     };
#   };
# }
