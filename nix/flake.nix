# This was generated by home-manager running with a flake installation.
{
  description = "Nix configuration of logan";

  nixConfig = {
    extra-substituters = [
      "https://nix-community.cachix.org"
    ];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  inputs = {
    agenix = {
      url = "github:ryantm/agenix";
      inputs.darwin.follows = "nix-darwin";
      inputs.home-manager.follows = "home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # https://github.com/oddlama/agenix-rekey
    # Allows re-keying and bootstrapping of secrets used by agenix.
    agenix-rekey = {
      # Pin to my last contribution for now because I cannot generate new
      # secrets, nor can I rekey.  See ./README.org in the troubleshooting ->
      # agenix section for more details.
      url = "github:LoganBarnett/agenix-rekey?rev=3137e9b1df0724d0af8dbeb8c36f8eee4a26869a";
      # url = "github:LoganBarnett/agenix-rekey/parameterize-generators";
      # url = "github:LoganBarnett/agenix-rekey/parameterize-generators-master-identities-fix";
      # url = "git+file:///Users/logan/dev/agenix-rekey?ref=parameterize-generators";
      # There is a documented gotcha in the readme if this must change.  Review
      # agenix-rekey's README for details.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Attic is a Nix cache server.
    attic = {
      url = "github:zhaofengli/attic";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Give us a tool for getting the current system.  See
    # https://discourse.nixos.org/t/getting-the-current-system-from-the-command-line/19781/10
    # for discussion on the matter.
    current-system = {
      url = "github:nix-systems/current-system";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-darwin = {
      url = "github:LnL7/nix-darwin/master";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-generators = {
      # url = "github:LoganBarnett/nixos-generators?ref=add-sd-image-raspberrypi";
      url = "github:nix-community/nixos-generators/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    emacs-overlay = {
      url = "github:nix-community/emacs-overlay/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-anywhere = {
      url = "github:numtide/nixos-anywhere";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        disko.follows = "disko";
      };
    };
    nixos-hardware = {
      url = "github:NixOS/nixos-hardware/master";
      # nixos-hardware doesn't actually use nixpkgs.
      # inputs.nixpkgs.follows = "nixpkgs";
    };
    # Specify the source of Home Manager and Nixpkgs.
    # This is forced at the moment, because we have some heavy deltas coming
    # into flake.lock and I want that to stabilize before I pin it here.
    nixpkgs.url = "github:nixos/nixpkgs?ref=f9f59197478b3ec9c954b67ae0d1d5429de23124";
    # nixpkgs.url = "github:nixos/nixpkgs/master";
    nixpkgs-comfyui.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase2";
    # nixpkgs.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    # This is the Nix runtime itself, so be real careful about bumping this.
    # But at least now I can bump it without having to reinstall everything.
    nix = {
      url = "github:nixos/nix";
      # I don't use parts, but maybe I could?
      # inputs.flake-parts.follows = "parts";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # nixpkgs-nickel.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    raspberry-pi-nix = {
      # url = "github:tstat/raspberry-pi-nix";
      url = "github:nix-community/raspberry-pi-nix";
      # url = "github:tstat/raspberry-pi-nix?ref=8fc9cbd3e4a53d365596c9cc4fc3cc07cd447af4";
      # url = "github:LoganBarnett/raspberry-pi-nix?ref=revert-kernel-to-6-1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    programsdb = {
      url = "github:wamserma/flake-programs-sqlite";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # I need to keep a separate accounting of various flake inputs so I can be
    # more careful about triggering rebuilds on machines owned by $WORK, as I
    # suspect it triggers some foul security response.  To accomplish this, all
    # I need to do is forcefully pin the inputs for that specific host.
    ache-em-ache-agenix = {
      url = "github:ryantm/agenix?rev=f6291c5935fdc4e0bef208cfc0dcab7e3f7a1c41";
      inputs.darwin.follows = "ache-em-ache-nix-darwin";
      inputs.home-manager.follows = "ache-em-ache-home-manager";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # https://github.com/oddlama/agenix-rekey
    # Allows re-keying and bootstrapping of secrets used by agenix.
    ache-em-ache-agenix-rekey = {
      url = "github:LoganBarnett/agenix-rekey?rev=0ffdb77871eaf2946b14af032ab3a33aaef6ba5a";
      # url = "git+file:///Users/logan/dev/agenix-rekey?ref=parameterize-generators";
      # There is a documented gotcha in the readme if this must change.  Review
      # agenix-rekey's README for details.
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # Give us a tool for getting the current system.  See
    # https://discourse.nixos.org/t/getting-the-current-system-from-the-command-line/19781/10
    # for discussion on the matter.
    ache-em-ache-current-system = {
      url = "github:nix-systems/current-system?rev=9bdeb2040b68c287d7de1fc2ffda4568f811b677";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-nix-darwin = {
      url = "github:LnL7/nix-darwin?rev=f61d5f2051a387a15817007220e9fb3bbead57b3";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-emacs-overlay = {
      url = "github:nix-community/emacs-overlay?rev=302264062ca73851e9306b70daeed6d9f1ae3ff9";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # This is the Nix runtime itself, so be real careful about bumping this.
    # But at least now I can bump it without having to reinstall everything.
    ache-em-ache-nixpkgs.url = "github:LoganBarnett/nixpkgs?rev=e8d47df8762491bc4e9710d7ef2e53f3a6500622";
    ache-em-ache-nix-ache-em-ache = {
      url = "github:nixos/nix";
      # I don't use parts, but maybe I could?
      # inputs.flake-parts.follows = "parts";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-home-manager = {
      url = "github:nix-community/home-manager?rev=90010df15878762ff359e4fe391355a9dcad0bcf";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
  };

  outputs = {
    agenix,
    agenix-rekey,
    current-system,
    disko,
    emacs-overlay,
    nix-darwin,
    nixpkgs,
    nixpkgs-comfyui,
    nixos-anywhere,
    nixos-hardware,
    nixos-generators,
    home-manager,
    raspberry-pi-nix,
    # Stuff for ache-em-ache.
    ache-em-ache-agenix,
    ache-em-ache-agenix-rekey,
    ache-em-ache-current-system,
    ache-em-ache-emacs-overlay,
    ache-em-ache-nix-darwin,
    ache-em-ache-nixpkgs,
    ache-em-ache-home-manager,
    self,
    ...
  }@flake-inputs: let
    ache-em-ache-flake-inputs = {
      agenix = ache-em-ache-agenix;
      agenix-rekey = ache-em-ache-agenix-rekey;
      current-system = ache-em-ache-current-system;
      emacs-overlay = ache-em-ache-emacs-overlay;
      nix-darwin = ache-em-ache-nix-darwin;
      nixpkgs = ache-em-ache-nixpkgs;
      home-manager = ache-em-ache-home-manager;
    };
    btf-disable = {
      # This is a deviation from the exact README version, following directions
      # here to customize the kernel: https://nixos.wiki/wiki/Linux_kernel This
      # is done to address the vmlinux/BPF build issues as stated here:
      # https://discourse.nixos.org/t/cannot-build-arm-linux-kernel-on-an-actual-arm-device/54218/3
      boot.kernelPatches = [
        {
          name = "disable-bpf";
          patch = null;
          # https://discourse.nixos.org/t/cannot-build-arm-linux-kernel-on-an-actual-arm-device/54218/3
          # Says to disable CONFIG_DEBUG_INFO_BTF (with no hints as to how), and
          # https://github.com/NixOS/nixpkgs/blob/ae725bafb39b7e96c39e9769f32600d0081e1361/pkgs/os-specific/linux/kernel/common-config.nix#L56
          # has DEBUG_INFO_BTF.  Just set both to "n" which should be false.
          extraConfig = ''
            DEBUG_INFO_BTF n
            CONFIG_DEBUG_INFO_BTF n
          '';
        }
      ];
    };
  in  {

      nixosConfigurations.cobalt = nixpkgs.lib.nixosSystem
        (import ./hosts/cobalt.nix {
          build-system = "nixpkgs";
          disko-proper = disko;
          inherit flake-inputs nixpkgs;
        })
      ;
      packages.aarch64-linux.cobalt-nixpkgs =
        self
          .nixosConfigurations
          .cobalt
          .config
          .system
          .build
          .sdImage
      ;

      nixosConfigurations.cobalt-pi = nixpkgs.lib.nixosSystem
        (import ./hosts/cobalt.nix {
          build-system = "raspberry-pi-nix";
          disko-proper = disko;
          inherit flake-inputs nixpkgs;
        })
      ;

      packages.aarch64-linux.cobalt-nixos-generate =
        nixos-generators.nixosGenerate  (import ./hosts/cobalt.nix {
          disko-proper = disko;
          build-system = "nixos-generators";
          inherit flake-inputs nixpkgs;
        });

      packages.aarch64-linux.cobalt-image = self
        .nixosConfigurations
        .cobalt
        .config
        .system
        .build
        .sdImage
      ;

      packages.armv7l-linux.cobalt-image = self
        .nixosConfigurations
        .cobalt
        .config
        .system
        .build
        .sdImage
      ;

      nixosModules.cobalt = { ... }: {
        imports = [
          (import ./hosts/cobalt.nix {
            disko-proper = disko;
            inherit flake-inputs nixpkgs;
          })
        ];
        format = "sd-aarch64";
      };

      nixosModules.copper = { ... }: {
        imports = [
          (import ./hosts/copper.nix {
            disko-proper = disko;
            inherit flake-inputs nixpkgs;
          })
        ];
        format = "sd-aarch64";
      };

      nixosConfigurations.copper = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/copper.nix {
            disko-proper = disko;
            inherit flake-inputs nixpkgs;
          })
        ];
      };

      nixosConfigurations.gallium = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/gallium.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
          btf-disable
        ];
      };

      nixosConfigurations.test-pi = nixpkgs.lib.nixosSystem (let
        host-id = "test-pi";
      in {
        modules = [
          {
            imports = [
              (import ./nixos-modules/raspberry-pi-exact-readme-module.nix {
                inherit flake-inputs;
              })
              # To keep agenix-rekey happy.  It requires all nodes include
              # agenix and agenix-rekey.
              flake-inputs.agenix.nixosModules.default
              flake-inputs.agenix-rekey.nixosModules.default
              {
                age.rekey.storageMode = "local";
                age.rekey.localStorageDir = ./secrets/rekeyed/${host-id};
              }
            ];
          }
          btf-disable
        ];
      });

      # Build this with:
      # nix build '.#nixosConfigurations.germanium.config.system.build.image'
      nixosConfigurations.germanium = nixpkgs.lib.nixosSystem {
        specialArgs = {
          inherit flake-inputs;
        };
        modules = [
          (import ./hosts/germanium.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
        ];
      };

      nixosConfigurations.arsenic = nixpkgs.lib.nixosSystem {
        specialArgs = {
          inherit flake-inputs;
        };
        modules = [
          (import ./hosts/arsenic.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
        ];
      };

      darwinConfigurations."M-CL64PK702X" =
        nix-darwin.lib.darwinSystem (import ./hosts/M-CL64PK702X.nix {
          flake-inputs = ache-em-ache-flake-inputs;
        });

      darwinConfigurations."scandium" =
        nix-darwin.lib.darwinSystem (import ./hosts/scandium.nix {
          inherit flake-inputs;
        });

      nixosConfigurations.lithium =
        nixpkgs-comfyui.lib.nixosSystem (import ./hosts/lithium.nix {
          disko-proper = disko;
          flake-inputs = flake-inputs // {
            nixpkgs = nixpkgs-comfyui;
          };
        });
      # Unsure if we need this, but if we do, it serves as a shortcut
      # essentially.
      packages.x86_64-linux.lithium = self.nixosConfigurations.lithium;

      nixosConfigurations.nickel = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/nickel.nix {
            disko-proper = disko;
            inherit flake-inputs nixpkgs;
          })
        ];
      };

      nixosConfigurations.selenium = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/selenium.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
          btf-disable
        ];
      };

      # Build this with:
      # nix build '.#nixosConfigurations.titanium.config.system.build.image'
      nixosConfigurations.titanium = nixpkgs.lib.nixosSystem {
        modules = [
          (import ./hosts/titanium.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
        ];
      };

      packages.x86_64-linux.titanium = self
        .nixosConfigurations
        .titanium
        .config
        .system
        .build
        .isoImage;

      packages.x86_64-linux.titanium-ng = nixos-generators.nixosGenerate {
        system = "x86_64-linux";
        modules = [
          (import ./hosts/titanium.nix {
            disko-proper = disko;
            inherit flake-inputs;
          })
        ];
        format = "iso";
      };

      # nixosConfigurations.nickel = nixpkgs-nickel.lib.nixosSystem {
      #   modules = [
      #     raspberry-pi-nix.nixosModules.raspberry-pi (import ./hosts/nickel.nix {
      #       disko-proper = disko;
      #       nixpkgs = nixpkgs-nickel;
      #       inherit flake-inputs ;
      #     })
      #     # (import ./hosts/nickel.nix {
      #     #   disko-proper = disko;
      #     #   inherit flake-inputs nixpkgs;
      #     # })
      #   ];
      # };

      # nixosModules.nickel = { ... }: {
      #   imports = [
      #     (import ./hosts/nickel.nix {
      #       disko-proper = disko;
      #       inherit flake-inputs nixpkgs;
      #     })
      #   ];
      #   format = "sd-image-raspberrypi";
      # };
      # packages.aarch64-linux.nickel-image = self
      #   .nixosConfigurations
      #   .nickel
      #   .config
      #   .formats
      #   .sdImage
      # ;

      # packages.aarch64-linux.nickel-image = self
      #   .nixosConfigurations
      #   .nickel
      #   .config
      #   .system
      #   .build
      #   .sdImage
      # ;

      # Thie nixos-generators approach.
      # I've switched to raspberry-pi-nix but may return here once that is
      # proved out.
      # packages.aarch64-linux.nickel = nixos-generators.nixosGenerate {
      # packages.armv6l-linux.nickel = nixos-generators.nixosGenerate {
      packages.armv7l-linux.nickel = nixos-generators.nixosGenerate {
      # nixosConfigurations.nickel = nixos-generators.nixosGenerate {
        # system = "aarch64-linux";
        # system = "armv6l-linux";
        system = "armv7l-linux";
        # system = "aarch64-unknown-linux-gnu";
        modules = [
          # ./nixos-modules/sd-image-rasbperrypi.nix
          (import ./hosts/nickel.nix {
            disko-proper = disko;
            nixpkgs = nixpkgs;
            inherit flake-inputs;
          })
        ];
        # format = "sd-image-raspberrypi";
        # format = "sdImageRaspberryPi";
        # customFormats = {
        #   sd-image-raspberrypi = { modulesPath, ... }: {
        #     imports = [
        #       "${toString modulesPath}/installer/sd-card/sd-image-raspberrypi.nix"
        #     ];
        #     formatAttr = "sd-image-raspberrypi";
        #   };
        # };
        # Is there a point in setting this?  The command line doesn't seem to
        # see it.
      };

      nixosConfigurations.nucleus-installer = (let
        pkgs = import nixpkgs {
          system = "x86_64-linux";
          # _module.args is an idiom for populating the arguments available to
          # callPackge, but I don't understand its nuances so it's repeated
          # below.
          _module.args = {
            buildPlatform = "aarch64-linux";
            destinationPlatform = "x86_64-linux";
          };
        };
      in
        nixpkgs.lib.nixosSystem (import ./hosts/nucleus.nix {
          buildPlatform = "x86_64-linux";
          destinationPlatform = "x86_64-linux";
          disko-proper = disko;
          inherit flake-inputs nixpkgs pkgs;
        }));

      packages.aarch64-darwin.nucleus-installer = self
        .nixosConfigurations
        .nucleus-installer
        .config
        .system
        .build
        .isoImage
      ;

      agenix-rekey = agenix-rekey.configure {
        userFlake = self;
        nodes = self.nixosConfigurations
          // self.darwinConfigurations;
        # nixosConfigurations = self.nixosConfigurations
        #   // self.darwinConfigurations;
        # pkgs = import flake-inputs.nixpkgs {
        #   system = "aarch64-darwin";
        # };
      };

      packages.aarch64-linux.distributed-test = let
        pkgs = import nixpkgs {
          system = "aarch64-linux";
          overlays = ./overlays/default.nix;
        };
      in
        pkgs.hello;

    };

}
