# This was generated by home-manager running with a flake installation.
{
  description = "Nix configuration of logan";

  nixConfig = {
    extra-substituters = [
      "https://nix-community.cachix.org"
    ];
    extra-trusted-public-keys = [
      # For torch, I think.
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  inputs = {
    agenix = {
      url = "github:ryantm/agenix";
      inputs.darwin.follows = "nix-darwin";
      inputs.home-manager.follows = "home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # https://github.com/oddlama/agenix-rekey
    # Allows re-keying and bootstrapping of secrets used by agenix.
    agenix-rekey = {
      # Pin to my last contribution for now because I cannot generate new
      # secrets, nor can I rekey.  See ./README.org in the troubleshooting ->
      # agenix section for more details.
      url = "github:LoganBarnett/agenix-rekey/generators-new-line-optional";
      # url = "github:LoganBarnett/agenix-rekey/parameterize-generators";
      # url = "github:LoganBarnett/agenix-rekey/parameterize-generators-master-identities-fix";
      # url = "git+file:///Users/logan/dev/agenix-rekey?ref=parameterize-generators";
      # There is a documented gotcha in the readme if this must change.  Review
      # agenix-rekey's README for details.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Attic is a Nix cache server.
    attic = {
      url = "github:zhaofengli/attic";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Give us a tool for getting the current system.  See
    # https://discourse.nixos.org/t/getting-the-current-system-from-the-command-line/19781/10
    # for discussion on the matter.
    current-system = {
      url = "github:nix-systems/current-system";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    emacs-overlay = {
      url = "github:nix-community/emacs-overlay/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-darwin = {
      url = "github:LnL7/nix-darwin/master";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-generators = {
      # url = "github:LoganBarnett/nixos-generators?ref=add-sd-image-raspberrypi";
      url = "github:nix-community/nixos-generators/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-anywhere = {
      url = "github:numtide/nixos-anywhere";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        disko.follows = "disko";
      };
    };
    nixos-hardware = {
      url = "github:NixOS/nixos-hardware/master";
      # nixos-hardware doesn't actually use nixpkgs.
      # inputs.nixpkgs.follows = "nixpkgs";
    };
    # Specify the source of Home Manager and Nixpkgs.
    # This is forced at the moment, because we have some heavy deltas coming
    # into flake.lock and I want that to stabilize before I pin it here.
    nixpkgs.url = "github:nixos/nixpkgs?ref=f9f59197478b3ec9c954b67ae0d1d5429de23124";
    nixpkgs-working-rocm.url = "github:nixos/nixpkgs/master";
    nixpkgs-comfyui.url = "github:LoganBarnett/nixpkgs/comfyui-fetch-model-hide-rebase";
    # I've run into a host of issues with Raspberry Pi 5s after a successful
    # build is made.  I'd like to move nixpkgs around to see if we can skip over
    # some issues somehow.
    nixpkgs-rpi.url = "github:nixos/nixpkgs/master";
    # nixpkgs.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    # This is the Nix runtime itself, so be real careful about bumping this.
    # But at least now I can bump it without having to reinstall everything.
    nix = {
      url = "github:nixos/nix?ref=2.24.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # nix-doom-emacs.url = "github:nix-community/nix-doom-emacs";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # nixpkgs-nickel.url = "github:nixos/nixpkgs?ref=9a9960b98418f8c385f52de3b09a63f9c561427a";
    raspberry-pi-nix = {
      # url = "github:tstat/raspberry-pi-nix";
      url = "github:nix-community/raspberry-pi-nix";
      # url = "github:tstat/raspberry-pi-nix?ref=8fc9cbd3e4a53d365596c9cc4fc3cc07cd447af4";
      # url = "github:LoganBarnett/raspberry-pi-nix?ref=revert-kernel-to-6-1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    programsdb = {
      url = "github:wamserma/flake-programs-sqlite";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # sytter = {
    #   url = "file:///Users/logan/dev/sytter";
    #   inputs.nixpkgs.follows = "nixpkgs";
    #   inputs.nix-darwin.follows = "nix-darwin";
    # };

    # I need to keep a separate accounting of various flake inputs so I can be
    # more careful about triggering rebuilds on machines owned by $WORK, as I
    # suspect it triggers some foul security response.  To accomplish this, all
    # I need to do is forcefully pin the inputs for that specific host.
    ache-em-ache-agenix = {
      url = "github:ryantm/agenix?rev=f6291c5935fdc4e0bef208cfc0dcab7e3f7a1c41";
      inputs.darwin.follows = "ache-em-ache-nix-darwin";
      inputs.home-manager.follows = "ache-em-ache-home-manager";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # https://github.com/oddlama/agenix-rekey
    # Allows re-keying and bootstrapping of secrets used by agenix.
    ache-em-ache-agenix-rekey = {
      url = "github:LoganBarnett/agenix-rekey?rev=0ffdb77871eaf2946b14af032ab3a33aaef6ba5a";
      # url = "git+file:///Users/logan/dev/agenix-rekey?ref=parameterize-generators";
      # There is a documented gotcha in the readme if this must change.  Review
      # agenix-rekey's README for details.
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # Give us a tool for getting the current system.  See
    # https://discourse.nixos.org/t/getting-the-current-system-from-the-command-line/19781/10
    # for discussion on the matter.
    ache-em-ache-current-system = {
      url = "github:nix-systems/current-system";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-nix-darwin = {
      url = "github:LnL7/nix-darwin";
      # rev = "72dd60bfc98c128149d84213b17d1b8a68863055";
      # Leaving this present breaks things and nix-darwin will not load or
      # otherwise will not be present.  It is not understood why, even though
      # documentation typically recommends this step.
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-emacs-overlay = {
      url = "github:nix-community/emacs-overlay?rev=302264062ca73851e9306b70daeed6d9f1ae3ff9";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    # This is the Nix runtime itself, so be real careful about bumping this.
    # But at least now I can bump it without having to reinstall everything.
    ache-em-ache-nixpkgs.url = "github:LoganBarnett/nixpkgs?rev=e8d47df8762491bc4e9710d7ef2e53f3a6500622";
    ache-em-ache-nix-ache-em-ache = {
      url = "github:nixos/nix";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
    ache-em-ache-home-manager = {
      url = "github:nix-community/home-manager?rev=c1fee8d4a60b89cae12b288ba9dbc608ff298163";
      inputs.nixpkgs.follows = "ache-em-ache-nixpkgs";
    };
  };

  outputs = flake-inputs@{
    agenix,
    agenix-rekey,
    current-system,
    disko,
    emacs-overlay,
    nix,
    nix-darwin,
    nixpkgs,
    nixpkgs-comfyui,
    nixpkgs-working-rocm,
    nixpkgs-rpi,
    nixos-anywhere,
    nixos-hardware,
    nixos-generators,
    home-manager,
    raspberry-pi-nix,
    # Stuff for ache-em-ache.
    ache-em-ache-agenix,
    ache-em-ache-agenix-rekey,
    ache-em-ache-current-system,
    ache-em-ache-emacs-overlay,
    ache-em-ache-nix-ache-em-ache,
    ache-em-ache-nix-darwin,
    ache-em-ache-nixpkgs,
    ache-em-ache-home-manager,
    # sytter,
    self,
    ...
  }: let
    ache-em-ache-flake-inputs = {
      agenix = ache-em-ache-agenix;
      agenix-rekey = ache-em-ache-agenix-rekey;
      current-system = ache-em-ache-current-system;
      emacs-overlay = ache-em-ache-emacs-overlay;
      nix = ache-em-ache-nix-ache-em-ache;
      nix-darwin = ache-em-ache-nix-darwin;
      nixpkgs = ache-em-ache-nixpkgs;
      home-manager = ache-em-ache-home-manager;
    };
    facts = import ./nixos-modules/facts.nix;
    nix-host = args@{ host-id, flake-inputs, system }:
      flake-inputs.nixpkgs.lib.nixosSystem {
        specialArgs = {
          inherit facts flake-inputs host-id system;
          disko-proper = flake-inputs.disko;
        };
        modules = [
          ./hosts/${host-id}.nix
        ];
      }
    ;
    darwin-host = args@{ host-id, flake-inputs, system }:
      nix-darwin.lib.darwinSystem {
        specialArgs = {
          inherit facts flake-inputs host-id system;
          disko-proper = flake-inputs.disko;
        };
        modules = [
          ./hosts/${host-id}.nix
        ];
      }
    ;
  in  {

    nixosConfigurations.argon = nix-host {
      inherit flake-inputs;
      host-id = "argon";
      system = "aarch64-linux";
    };

    nixosConfigurations.cobalt = nix-host {
      inherit flake-inputs;
      host-id = "cobalt";
      system = "aarch64-linux";
    };

    nixosConfigurations.copper = nix-host {
      inherit flake-inputs;
      host-id = "copper";
      system = "aarch64-linux";
    };

    nixosConfigurations.gallium = nix-host {
      inherit flake-inputs;
      host-id = "gallium";
      system = "aarch64-linux";
    };

    nixosConfigurations.germanium = nix-host {
      inherit flake-inputs;
      host-id = "germanium";
      system = "x86_64-linux";
    };

    nixosConfigurations.arsenic = nix-host {
      inherit flake-inputs;
      host-id = "arsenic";
      system = "aarch64-linux";
    };

    darwinConfigurations."M-CL64PK702X" = darwin-host {
      inherit flake-inputs;
      host-id = "M-CL64PK702X";
      system = "aarch64-darwin";
    };

    darwinConfigurations."scandium" = darwin-host {
      inherit flake-inputs;
      host-id = "scandium";
      system = "aarch64-darwin";
    };

    nixosConfigurations.lithium = nix-host {
      flake-inputs = flake-inputs // {
        nixpkgs = nixpkgs-comfyui;
      };
      host-id = "lithium";
      system = "x86_64-linux";
    };

    nixosConfigurations.nickel = nix-host {
      inherit flake-inputs;
      host-id = "nickel";
      system = "aarch64-linux";
    };

    nixosConfigurations.selenium = nix-host {
      flake-inputs = flake-inputs // {
        nixpkgs = nixpkgs-rpi;
      };
      host-id = "selenium";
      system = "aarch64-linux";
    };

    nixosConfigurations.titanium = nix-host {
      flake-inputs = flake-inputs // {
        nixpkgs = flake-inputs.nixpkgs-working-rocm;
      };
      host-id = "titanium";
      system = "x86_64-linux";
    };

    nixosConfigurations.nucleus = nix-host {
      inherit flake-inputs;
      host-id = "nucleus";
      system = "x86_64-linux";
    };

    packages.aarch64-darwin.nucleus = self
      .nixosConfigurations
      .nucleus
      .config
      .system
      .build
      .isoImage
    ;

    agenix-rekey = agenix-rekey.configure {
      userFlake = self;
      # nodes = self.nixosConfigurations
      #         // self.darwinConfigurations;
      nixosConfigurations = self.nixosConfigurations
        // self.darwinConfigurations;
      # pkgs = import flake-inputs.nixpkgs {
      #   system = "aarch64-darwin";
      # };
    };

    packages.aarch64-linux.distributed-test = let
      pkgs = import nixpkgs {
        system = "aarch64-linux";
        overlays = ./overlays/default.nix;
      };
    in
      pkgs.hello;

    nixosConfigurations.test-pi = flake-inputs.nixpkgs.lib.nixosSystem (let
      host-id = "test-pi";
    in {
      modules = [
        {
          imports = [
            (import ./nixos-modules/raspberry-pi-exact-readme-module.nix {
              inherit flake-inputs;
            })
            # To keep agenix-rekey happy.  It requires all nodes include
            # agenix and agenix-rekey.
            flake-inputs.agenix.nixosModules.default
            flake-inputs.agenix-rekey.nixosModules.default
            {
              age.rekey.storageMode = "local";
              age.rekey.localStorageDir = ./secrets/rekeyed/${host-id};
            }
            ./nixos-modules/btf-disable.nix
          ];
        }
      ];
    });

  };

}
