#+title:     LDAP
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2024-12-01 Sun>
#+language:  en
#+file_tags:
#+tags:

* Introduction

[[https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol][Lightweight Directory Access Protocol]] - This gets used for both authentication
and permission management.  Essentially, there are records whose schema is
configurable.  These records can include lots of information (examples: user
name, name, email address, and group membership).  Membership can be nested,
which makes it pretty easy to build a kind of [[https://en.wikipedia.org/wiki/Role-based_access_control][RBAC]] system here.

I found this to be a helpful document to come up to speed about LDAP:
https://ldap.com/basic-ldap-concepts/

* Employment

This configuration uses LDAP for both authentication and permission management.
Generally, heaps of scripts or an advanced UI tool like FreeIPA is used to
manage permissions, users, and authentication.  We won't be doing either of
those here.  In this case, we'll be abusing ~declarativeContents~, a field in
the ~openldap~ NixOS configuration.

** Declaring Groups

** Declaring Users

** Transitive Membership

** Read Only Configuration

To keep systems from making edits to these records, we need to lock it down such
that only the user that executes what's in ~declarativeContents~ can actually
make edits to these records, _except_ for password changes.

* Testing

Nix allows for testing as part of building its derivations.  There are several
key behaviors I wish to ensure.  These test cases can be bound up into a
~checkPhase~ of the module's derivation.  Modules don't have ~checkPhase~ as
near as I can tell.  There is a means of testing in NixOS modules which is
[[https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests][documented here]].

** How to test?

We add the ~testScript~ attribute to the module.  This might only work for
the ~nixpkgs~ repository itself.  This gives us an arbitrary scripting string to
set.  Otherwise we could use ~runNixOSTest~ inside of ~pkgs.testers~, which is
documented to work outside of ~nixpkgs~.

#+begin_src nix :results none :exports code
pkgs.testers.runNixOSTest {
  imports = [ ./test.nix ];
  defaults.services.foo.package = mypkg;
}
#+end_src

This creates a derivation which runs the tests, I guess.  There is talk in the
documentation of using virtual machines and such.  I don't really need/want that
so maybe we'll be spared.

** Test Case: Authentication

In this test case, we ~bind~ to test authentication.

** Test Case: Membership

** Test Case: Transitive Membership

** Test Case: Read-only Records

** Test Case: Password Reset
