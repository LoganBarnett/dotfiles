diff --git a/README.md b/README.md
index 75cbd61..8acd7b5 100644
--- a/README.md
+++ b/README.md
@@ -81,6 +81,19 @@ plugins:
     auth_password: s00p3rS3KRE7
 ```
 
+Alternatively you can use `auth_password_file` to avoid keeping the password in
+your configuration file.  Be mindful of line breaks in your password file.  An
+end-of-line at the end of the file will place a line break in the password
+submitted to LDAP.  Also ensure the Octoprint user has permission to read the
+file.
+
+```YAML
+plugins:
+  auth_ldap:
+    auth_user: example\authuser
+    auth_password_file: /path/to/password/file
+```
+
 If no authentication username is provided, an anonymous search will be performed (which may not generate useful results on most servers). The `auth_user` can be provided as a distinguished name (`uid=authuser,dc=example,dc=com`), principal name (`authuser@example.com`) or UID (`example\authuser`), depending on the needs of the system.
 
 #### Default Roles/Activity
diff --git a/octoprint_auth_ldap/constants.py b/octoprint_auth_ldap/constants.py
index ad1db54..c130f5b 100644
--- a/octoprint_auth_ldap/constants.py
+++ b/octoprint_auth_ldap/constants.py
@@ -3,6 +3,7 @@
 # settings keys
 # DO NOT CHANGE without updating AuthLDAPPlugin.on_settings_migrate()
 AUTH_PASSWORD = "auth_password"
+AUTH_PASSWORD_FILE = "auth_password_file"
 AUTH_USER = "auth_user"
 DEFAULT_ADMIN_GROUP = "default_admin_group"
 DEFAULT_USER_GROUP = "default_user_group"
diff --git a/octoprint_auth_ldap/ldap.py b/octoprint_auth_ldap/ldap.py
index 067cae7..211802d 100644
--- a/octoprint_auth_ldap/ldap.py
+++ b/octoprint_auth_ldap/ldap.py
@@ -4,9 +4,10 @@ from __future__ import absolute_import
 import json
 
 import ldap
-from octoprint_auth_ldap.constants import AUTH_PASSWORD, AUTH_USER, DISTINGUISHED_NAME, OU, OU_FILTER, OU_MEMBER_FILTER, \
+from octoprint_auth_ldap.constants import AUTH_PASSWORD, AUTH_PASSWORD_FILE, AUTH_USER, DISTINGUISHED_NAME, OU, OU_FILTER, OU_MEMBER_FILTER, \
     REQUEST_TLS_CERT, SEARCH_BASE, URI
 from octoprint_auth_ldap.tweaks import DependentOnSettingsPlugin
+from pathlib import Path
 
 
 class LDAPConnection(DependentOnSettingsPlugin):
@@ -21,7 +22,8 @@ class LDAPConnection(DependentOnSettingsPlugin):
 
         if not user:
             user = self.settings.get([AUTH_USER])
-            password = self.settings.get([AUTH_PASSWORD])
+            password = self.settings.get([AUTH_PASSWORD]) or \
+                Path(self.settings.get([AUTH_PASSWORD_FILE])).read_text()
 
         try:
             self.logger.debug("Initializing LDAP connection to %s" % uri)
@@ -49,17 +51,15 @@ class LDAPConnection(DependentOnSettingsPlugin):
         try:
             client = self.get_client()
             if client is not None:
-                # self.logger.debug("Searching LDAP, base: %s and filter: %s" % (base, ldap_filter))
+                self.logger.debug("Searching LDAP, base: %s and filter: %s" % (base, ldap_filter))
                 result = client.search_s(base, scope, ldap_filter)
                 client.unbind_s()
                 if result:
                     dn, data = result[0]
-                    """
                     # Dump LDAP search query results to logger
                     self.logger.debug("dn: %s" % dn)
                     for key, value in data.items():
                         self.logger.debug("%s: %s" % (key, value))
-                    """
                     return dict(dn=dn, data=data)
         except ldap.LDAPError as e:
             self.logger.error(json.dumps(e))
