#+title:     Nix
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2024-06-05 Wed>
#+language:  en
#+file_tags:
#+tags:

Here I store my notes regarding Nix as it pertains to this repository.  This
will include some findings and also projects I'm working on.  I do have separate
notes for Nix in my private notes repository, and I haven't yet come up with a
method of consolidating them.

This helps me close the many tabs I have open.  This is very incomplete and I
have many more tabs to go.  I think I like this as a general "wut I do in Nix"
scratch pad though.

* projects

This is all the Nix related projects I have.

** comfyui

*** setting up lithium

This is largely done.

*** TODO finishing the =comfyui= NixOS module [0/7]

I am working on helping finish a pull request started by @fazo96 here:
https://github.com/NixOS/nixpkgs/pull/268378/

I was able to get things running locally and have been enjoying the
functionality there for some time, as well as putting it through its paces.  My
most notable improvement was getting the model stuff more or less sorted out,
and declarative in a clean way.  There remains some feedback items to address,
but everything works.

In addition to the work left, there is a lingering question about some similar
work done by @lboklin on [[https://github.com/nixified-ai/flake/pull/94][nixified-ai#94]].  I've brought in some of the work, but
many commits have been added to it since then and I haven't taken a look yet.

In addition to feedback items, but as part of a separate pull request, I feel
the need to also add a wiki or documentation entry showing how one could run
=comfyui= using Nix.

My tasks that remain for the pull request:

+ [ ] Document the justification for =fetchModel=.
+ [ ] Fix issue where the URL changing for =fetchModel= causes a re-fetch.
+ [ ] Do we still need =fetchModel=?
+ [ ] See if we can use =buildPythonApplication= to build a Python application
      out of =comfyui=.
+ [ ] Check for other feedback items.
+ [ ] Link the feedback items in the pull requests to these tasks.
+ [ ] There's a suggestion to bring in a =pyproject.toml= but I don't know if
  comfyui has it, but this reviewer has gotten it working regardless:
  https://github.com/SomeoneSerge/pkgs/blob/f28af3c0d60500697a987794b2b1e64f70cfd3b7/python-packages/by-name/co/comfy-ui/pyproject.toml

** ldap

https://nixos.wiki/wiki/OpenLDAP

*** [2024-06-08 Sat]

I have =nickel= building.  I was dumbly copying over the =.zst= file which can
never boot because it's a compressed archive.  After decompressing it, I was
able to boot =nickel= just fine.  Questions remain on how I got it to that
state, and what purpose exists for all the other fancy stuff I have found
regarding Raspberry Pi and Nix.

My knowledge about LDAP is weak.  I've had trouble setting it up, and I've been
copying examples from the NixOS Wiki in hopes of making things work.  So far the
snippets are not working because the =options= validation is failing - it's not
even getting to LDAP yet.  This is while declaring the password policy for LDAP.
The current error is:

#+begin_example
       error: A definition for option `services.openldap.settings.children."olcDatabase={1}mdb".attrs."olcOverlay={2}ppolicy"' is not of type `(LDAP value - either a string, or an attrset containing
       `path` or `base64` for included
       values or base-64 encoded values respectively.
       ) or list of (LDAP value - either a string, or an attrset containing
       `path` or `base64` for included
       values or base-64 encoded values respectively.
       )'. Definition values:
       - In `/nix/store/v24qicc8f4h1xafv4qzbn49crg6h2nvb-source/flake.nix':
           {
             attrs = {
               objectClass = [
                 "olcOverlayConfig"
                 "olcPPolicyConfig"
           ...
#+end_example

And the code for that is:

#+begin_src nix :results none
          "olcOverlay={2}ppolicy".attrs = {
            objectClass = [ "olcOverlayConfig" "olcPPolicyConfig" "top" ];
            olcOverlay = "{2}ppolicy";
            olcPPolicyHashCleartext = "TRUE";
          };
#+end_src

Put in greater context:

#+begin_src nix :results none
  services.openldap = {
    enable = true;
    urlList = [
      "ldaps:///"
    ];
    declarativeContents = {
      "dc=proton,dc=org" = ''
      ...
          '';
    };
    settings = {
      attrs = {
        # ...
      };
      children = {
        "cn=schema".includes = [
          "${pkgs.openldap}/etc/schema/core.ldif"
          "${pkgs.openldap}/etc/schema/cosine.ldif"
          "${pkgs.openldap}/etc/schema/inetorgperson.ldif"
        ];
        "olcDatabase={1}mdb".attrs = {
          objectClass = [ "olcDatabaseConfig" "olcMdbConfig" ];
          olcDatabase = "{1}mdb";
          olcDbDirectory = "/var/lib/openldap/data";
          olcSuffix = "dc=proton,dc=org";
          /* your admin account, do not use writeText on a production system */
          olcRootDN = "cn=admin,dc=proton,dc=org";
          # Untested.  Should work but no run done yet.
          olcRootPW.path = config.age.secrets.ldap-root-pass.path;
          olcAccess = [
            /* custom access rules for userPassword attributes */
            ''{0}to attrs=userPassword
                by self write
                by anonymous auth
                by * none''
            /* allow read on anything else */
            ''{1}to *
                by * read''
          ];

          # TODO: This doesn't validate in Nix for some reason.  Need to
          # investigate.
          "olcOverlay={2}ppolicy".attrs = {
            objectClass = [ "olcOverlayConfig" "olcPPolicyConfig" "top" ];
            olcOverlay = "{2}ppolicy";
            olcPPolicyHashCleartext = "TRUE";
          };

          "olcOverlay={3}memberof".attrs = {
            objectClass = [ "olcOverlayConfig" "olcMemberOf" "top" ];
            olcOverlay = "{3}memberof";
            olcMemberOfRefInt = "TRUE";
            olcMemberOfDangling = "ignore";
            olcMemberOfGroupOC = "groupOfNames";
            olcMemberOfMemberAD = "member";
            olcMemberOfMemberOfAD = "memberOf";
          };

          "olcOverlay={4}refint".attrs = {
            objectClass = [ "olcOverlayConfig" "olcRefintConfig" "top" ];
            olcOverlay = "{4}refint";
            olcRefintAttribute = "memberof member manager owner";
          };
        };
      };
    };
  };
#+end_src

This makes me wonder if this stuff is actually recursively nested even though
the =settings= declaration in =nixpkgs=' =openldap.nix= suggests otherwise.

I have found no tickets in =nixpkgs= yet.

Upon further reading for the OpenLDAP Nix Wiki page, I can see this is not
placed correctly.  The =ppolicy= and other sections must be under
=olcDatabase={1}mdb=.  I have applied the edits but cannot test it yet.

*** [2024-06-05 Wed]

I want to run LDAP on =nickel=, which is a Raspberry Pi version 4 model B.  I
have built for the 3 or 4 before with great success (see my Nix Adventures blog
post).  However it hasn't been building lately due to things moving around.  So
I have some work via [[raspberry pi builds]] that I need to complete first.

There is a big deprecated section I copied unwittingly.

** raspberry pi
*** TODO raspberry pi builds via =raspberry-pi-nix=

[[https://github.com/NixOS/nixpkgs/issues/260754][nixpkgs#260754]] led me to using =rasbperry-pi-nix= for building Raspberry Pi
images.  I would like to tie that in with =nixos-generators= if at all
reasonable.

Example of =raspberry-pi-nix=:
https://github.com/tstat/raspberry-pi-nix-example/blob/master/flake.nix

The documentation on the [[https://wiki.nixos.org/wiki/NixOS_on_ARM/Raspberry_Pi][official Wiki for Raspberry Pi]] is outdated, as is
typical.  I might want to update it when I get everything working.

Out of the box, =raspberry-pi-nix= didn't work for me.  I filed
[[https://github.com/tstat/raspberry-pi-nix/issues/17][raspberry-pi-nix#17]] for the issue I was having with patches to the kernel not
applying properly.  I have since then done a lot of pinning on my flake inputs,
and now it's building.  I don't have success yet, but it's still going after
5-ish hours - I am well past the patching phase.  I've closed out the ticket
with those notes.

From that ticket, @tstat did show me how to do this to look at a derivation's
output metadata:

#+begin_src shell :results none
nix derivation show '.#nixosConfigurations.nickel.config.boot.kernelPackages.kernel'
#+end_src


I tried using the Cachix builds, but couldn't get them to work.  It's not
obvious how to debug it.  The [[https://docs.cachix.org/faq#why-is-nix-not-picking-up-on-any-of-the-pre-built-artifacts][Cachix FAQ]] has some things to try there but
nothing seemed to work for me.  I couldn't get the [[https://nix.dev/guides/troubleshooting.html#how-to-force-nix-to-re-check-if-something-exists-in-the-binary-cache][negative caching]] to work (as
in it just seemed to do nothing).  The [[https://discourse.nixos.org/t/nix-rebuilds-instead-of-downloading-from-substituters/11928/8][Cachix folks seem eager to help]] with
this, but I just haven't pursued that yet.

When building an older version, I ran into a "NAR mismatch".  =raspberry-pi-nix=
is pinned to [[https://github.com/raspberrypi/linux/tree/stable_20231123][raspberrypi/linux#stable_20231123]].  I don't know why this is.  I
did find @lilyball ran into that same issue with [[https://github.com/tstat/raspberry-pi-nix/issues/2][raspberry-pi-nix#2]] building on
=aarch64-darwin=.  I'd run into it there too.  She moved her =/nix= partition to
case-sensitive APFS.  I asked and she said she moved everything to a new
partition, and replaced the old partition with the new.  Some folks have done
this via a [[https://github.com/cr/MacCaseSensitiveConversion][Time Machine backup and restore]].  Rightly, @lilyball [[https://github.com/NixOS/nix/issues/2415#issuecomment-1574731526][asked in
nix#2415]] if we can't just make that the default since APFS is the default
filesystem for Nix nowadays.  There is no reply yet.  Other possible reasons for
a NAR mismatch is Flake inputs using =follows= improperly/inconsistently, or the
lock file being borked per [[https://github.com/NixOS/nix/issues/6061][nix#6061]].  There is some [[https://github.com/NixOS/nix/issues/10649][prior work]] on preventing
mismatches, but I don't think this is what's affecting me.

I'd tried less extreme options.  Building via =linux-builder= directly didn't
work, because =linux-builder= is a slimmed down NixOS, and isn't a fully
operational NixOS VM.  I can't run =nix build= or =nixos-rebuild switch=.

+ The original =tstat= repository: https://github.com/tstat/raspberry-pi-nix
+ My fork: https://github.com/LoganBarnett/raspberry-pi-nix
+ Someone's notes on building for the Raspberry Pi with Nix:
  https://github.com/lucernae/nixos-pi
+ [[https://app.cachix.org/cache/raspberry-pi-nix#pins][Pins of the kernel on cachix]] - note that it's just one, and it's older than
  what's on =master=.
+ [[https://nixos.wiki/wiki/Linux_kernel][NixOS wiki on the Linux kernel]] - This shows how to set the kernel.  Notably:
  #+begin_src nix :results none
  boot.kernelPackages = pkgs.linuxPackages_latest;
  #+end_src

My build of the kernel on =lithium= has been running for over 24 hours...

*** TODO raspberry pi builds via =nixos-generators=

I'm paused on this in favor of [[raspberry pi builds via =raspberry-pi-nix=]].

https://github.com/nix-community/nixos-generators

This is mostly a light wrapper about images in =nixpkgs= that allow directly
building images.  I don't quite understand why this is needed and one cannot
build directly via =nixpkgs=.

This is a GitHub [[https://github.com/search?q=path%3A*.nix+formatConfigs&type=code][search of other people using =formatConfigs=]].

[[https://github.com/nix-community/nixos-generators/pull/203][nixos-generators#203]] simplifies the building of Raspberry Pi images by removing
all of the local configuration and instead leaning on what's in =nixpkgs=, since
it's being handled there now.  Unfortunately =sd-aarch64= has recently been
migrated to just be an SD card for =aarch64= in a general sense, and now there's
=sd-aarch64-raspberrypi= file/image for Raspberry Pi but =nixos-generators= has
not followed it.  I have been trying to make this work via =formatConfigs= but I
had some trouble with it.  Eventually I found out that the identifiers like
=sdImage= are hard coded somewhere.  I don't know why or where, but I feel this
should be documented in =nixos-generators= and I would like contribute to this.

I think =customFormats= is the old way of doing this.  There is an [[https://discourse.nixos.org/t/using-nixos-generators-in-a-flake-with-customformats/35115/7][example of it
in Discourse]].

[[https://github.com/nix-community/nixos-generators/issues/168][nixos-generators#168]] remains as an issue - I noticed both the
=sd-aarch64-installer= and =sd-aarch64= both refer to the same =nixpkgs= entity
(file/module?).  Because of this, it seems like there's no difference between
the two.  Some of the work I was thinking about contributing might relate to
this.  The findings of the last comment are now outdated because of the move to
=sd-aarch-raspberrypi= et. al,.

One thing I haven't tried in this journey is looking at image compression.  I've
seen mention (link?) that the image needs to be decompressed - I don't want to
just =dd= a =zst= file over to the SD card.  There's something that can be done
to emit a raw image, but I don't know what it is - I think there is a mechanism
for it.  I believe most of my tests were done against =zst=, which would render
virtually all of my testing here invalid.

*** TODO raspberry pi builds to =zstd=

I don't know how these builds were working.  One of the above perhaps?  This
emits an image in =zstd= format.  I've been using =dd= on that file directly,
like an idiot.  If I decompress that file and then copy it, well, it just works!
So how did I do that?  And can I use that method and document it down the road?

Some issues I've had:

1. When trying out =nixos-generators=, I now run into an issue where
   =linux-builder= won't build the image due to =uboot= not building for
   =armv7l-linux= (the target I should use for the Pi, I guess) - it wants
   =armv6l-linux=.  But I'm supposed to use =armv7l-linux= I think?
2. the issue something up with supported build platforms / =qemu= emulation.  I
   think I've moved past that mostly, onto the specific =uboot= issue above.

I don't know how this image got emitted, what its hardware support looks like,
and if there's anything additional I will want to do with it.  I suppose if I
can do a pure =nixpkgs= setup then all the work going into =nixos-generators=
and =raspberry-pi-nix= must do something _extra_, right?  Or is it just a bunch
of people working on the same problems but not coordinating with each other?  My
experience with my own open source work indicates it _might_ be the latter, but
also me doing things incorrectly is a constant factor in every problem I run
into.

** TODO =percol= doesn't consistently build

Something about the dependencies coming from pypi.

** secrets
*** TODO =agenix-rekey= automatic self-signed TLS CA and leaf certificates

I have some promising progress here for contributing back into =agenix-rekey=.
See [[./nixos-modules/secrets.nix]] for details.

*** TODO help error message for =agenix-rekey= if =agenix= is incorrectly included

I said I would work on this per my two tickets I filed.

*** TODO look into a =security.pki.extraTrustedCertificates= in =nix-darwin= [0/2]
**** TODO fix my work machine always prompts for a password

Using the command line invocation to add the trust (see [[./darwin.nix]]), a
password prompt always comes up.  This doesn't happen on my personal.  What's
the difference?  More importantly: Can we avoid it?
**** TODO NixOS module for =nix-darwin=

I need to check if this exists already, but I don't think it does.
*** external CA

Get a domain for public hosting.  Get a wildcard certificate probably, because I
just don't want to mess with it.

** mail server

A long way away, but I want this done too.  I was going to use some pre-built
mail server image (I forgot the name), but now that I'm on the Nix boat, I want
it in Nix.
** octoprint
*** Ender 3 Pro

Convert this to Nix.  Currently uses OctoPrint.

=argon.proton= is the current host.

*** laser engraver

Convert this to Nix.  Currently uses OctoPrint with a plugin.

** wireguard

*** replace old host

It's been down for some time.  I want to spin up a new copy entirely.

*** Japan bridge

This is a Pi I send home to the Japan family to setup a regional bridge between
this network and theirs.
** nextcloud

Migrate my existing nextcloud to a Nix based one.  =silicon.proton= is the
current host.

** gitea

Yes please.  This is =cobalt= I think.

** incremental backups

Oh boy this is going to be its own project probably.
