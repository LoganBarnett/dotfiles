#+title:     LDAP
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2024-12-18 Wed>
#+language:  en
#+file_tags:
#+tags:

* LDAP

** Introduction

[[https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol][Lightweight Directory Access Protocol]] - This gets used for both authentication
and permission management.  Essentially, there are records whose schema is
configurable.  These records can include lots of information (examples: user
name, name, email address, and group membership).  Membership can be nested,
which makes it pretty easy to build a kind of [[https://en.wikipedia.org/wiki/Role-based_access_control][RBAC]] system here.

I found this to be a helpful document to come up to speed about LDAP:
https://ldap.com/basic-ldap-concepts/

** Employment

This configuration uses LDAP for both authentication and permission management.
Generally, heaps of scripts or an advanced UI tool like FreeIPA is used to
manage permissions, users, and authentication.  We won't be doing either of
those here.  In this case, we'll be abusing ~declarativeContents~, a field in
the ~openldap~ NixOS configuration.

*** Declarative contents and passwords

A password can be declared via ~userPassword~ in the user entity, but that does
require some bootstrapping from ~agenix-rekey~.  This can be done but like my
~comfyui~ setup, requires a "double run" where the first run lays down the files
needed, and the second actually uses the values of the files.  This is kind of
hacky, but right now I'm not sure of a better way.

Even if we did it this way, any password changes would be wiped anytime the
configuration got rebuilt or the server restarted _for any reason_.  This means
we need to not use ~declarativeContents~ at all.  It's too bad there's no
~additiveContents~.  Even better would be some kind of ~initial-value~ that
could be given for ~userPassword~ but I don't know how we could express that
short of hardcoding the field.  That's fine I guess.

~additiveContents~ could be a new option whose structure is exactly the same as
~declarativeContents~.  It would check to see if all fields were set to all
values expected for all entities involved (by distinguished name), and ignore
any fields in the ~additiveContentsIgnoredFields~ list.

Some work would need to be done to build this tooling.

*** Declaring Groups

*** Declaring Users

*** Transitive Membership

*** Read Only Configuration

To keep systems from making edits to these records, we need to lock it down such
that only the user that executes what's in ~declarativeContents~ can actually
make edits to these records, _except_ for password changes.

** Testing

Nix allows for testing as part of building its derivations.  There are several
key behaviors I wish to ensure.  These test cases can be bound up into a
~checkPhase~ of the module's derivation.  Modules don't have ~checkPhase~ as
near as I can tell.  There is a means of testing in NixOS modules which is
[[https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests][documented here]].

*** How to test?

We add the ~testScript~ attribute to the module.  This might only work for
the ~nixpkgs~ repository itself.  This gives us an arbitrary scripting string to
set.  Otherwise we could use ~runNixOSTest~ inside of ~pkgs.testers~, which is
documented to work outside of ~nixpkgs~.

#+begin_src nix :results none :exports code
pkgs.testers.runNixOSTest {
  imports = [ ./test.nix ];
  defaults.services.foo.package = mypkg;
}
#+end_src

This creates a derivation which runs the tests, I guess.  There is talk in the
documentation of using virtual machines and such.  I don't really need/want that
so maybe we'll be spared.

*** Test Case: Authentication

In this test case, we ~bind~ to test authentication.

*** Test Case: Membership

*** Test Case: Transitive Membership

*** Test Case: Read-only Records

*** Test Case: Password Reset
** TODO SSH Authentication

This is a good article on how to add a field containing the SSH pub key and
delegating ~sshd~ to use that upon authentication:

https://afilini.com/blog/ldap-user-authentication-on-nixos-with-a-twist/

I have not implemented it yet.

** Actual ~declarativeContents~ behavior

The best I can tell is that this is a modify operation, not a clear and add.  I
came across this because I was having trouble with ~memberof~ queries.  I found
some mention that ~memberof~ only works if the ~memberof~ overlay is installed
before the groups are created.  I tried reconstructing everything by removing
~declarativeContents~ (although I didn't set it to ~{}~ in fairness).  I also
restarted the server after changing my password on the account.

That said, I did strip the quotes from the temporary service password I'm using,
and observed that working.  So maybe it does work, but not setting the value
isn't the same as removing everything...

** Troubleshooting

*** Authentication

**** Server debugging

Make sure the ~acl~

**** Safe warning "cannot assess the validity of the ACL scope within backend naming context"

olcAccess: value #1: warning: cannot assess the validity of the ACL scope within backend naming context.

https://www.openldap.org/lists/openldap-software/200608/msg00177.html

#+begin_quote
Gavin Henry wrote:
> Hi all,
>
> Just playing in openldap-devel, with the next step being mirrormode, and
> get this warning when running slapd with debug on:
>
>     config_back_db_open: line 0: warning: cannot assess the validity of
> the ACL scope within backend naming context
>
> So is this a seperate assessment outwith the normal syntax one?
>
> I don't quite understand the warning.

That's quite informative, and issued at a very verbose log level. Basically, the
ACL parsing code checks whether a rule will actually be used with the scope it
can potentially apply to. For example, if you place a rule

access to dn.subtree="" by * read

within a database with suffix "dc=example,dc=com", the rule might potentially
apply to any DN, but since it's placed within a database with a non-empty
suffix, it will only apply to dn.subtree="dc=example,dc=com". So the ACL
designer might be fooled into believing that it will apply to any entry while it
won't. This doesn't mean that the ACL is wrong: it will do what's intended for;
that's why the warning is informative. In some cases, the ACL parsing code
cannot determine the scope of a rule (for example, when regular expressions are
involved); this causes the specific warning you see. If you understood the ACL
syntax and you believe your ACLs are correct, you can safely ignore that
warning.
#+end_quote

**** memberOf not working

My main symptom I noticed is that ~memberof~ queries don't work.  I looked into
a bit, and found out that there's some kind of referential integrity going on
(and even there's a module/plugin called ~refint~ that handles this).

When I add a ~member~ to a group, ~memberOf~ should be populated in the
corresponding user.  However that doesn't seem to be the case.  Furthermore,
looking up the group's members yields zero results, and looking up the user's
memberships of anything also yields zero results.

I am told there are two possible reasons for this:
1. The plugin is misconfigured.  While this might still be the case, I've
   confirmed that the fields to map are good:
   #+begin_src nix :results none :exports code
   "olcOverlay={3}memberof".attrs = {
     objectClass = [ "olcOverlayConfig" "olcMemberOf" "top" ];
     olcOverlay = "{3}memberof";
     olcMemberOfRefInt = "TRUE";
     olcMemberOfDangling = "ignore";
     olcMemberOfGroupOC = "groupOfNames";
     olcMemberOfMemberAD = "member";
     olcMemberOfMemberOfAD = "memberOf";
   };
   #+end_src
   The plugin may be misconfigured in other ways.  I haven't been able to find
   anything via ~olcOverlayConfig~ nor ~olcModuleList~.  I'm not sure what else
   can be used.  It's possible the Nix configuration isn't doing what I'm
   expecting.  I'm unsure how to go about debugging this on the Nix side.
   I think files are emitted somewhere, and I might be able to get paths to
   them.  I should check the ~openldap~ ~systemd~ unit file for paths.
2. The groups are added _before_ the overlays are added.  The overlays don't
   retroactively add things.  Since I don't have any view into how Nix adds
   these things, I'm not in a position to rule this out.

I have found many others' configurations that seem to be materially the same as
mine, but that's probably because they aren't materially the same and I haven't
identified the difference yet.

I have created [[file:./alerts/ldap-group-test.sh]] to help me exercise various
functionalities that might prove or disprove certain things.

-----

After doing some runs, inspecting logs, and examining the configuration, I can
safely say that the ~memberof~ and ~refint~ modules are "loaded" before any
actual groups are added.  Though I cannot query the configuration.  I suspect
that's because I have some of this declared under ~dc=proton,dc=org~ and it
should not be there.  Some additional troubleshooting is required.

Also, I have learned that this query _crashes_ the LDAP server.  I'm not sure
why.

#+begin_src shell :results none :exports code
ldapsearch \
  -H "ldaps://$host:$port" \
  -b "cn=module,cn=config" \
  -D "$bind_dn" \
  -w "$bind_password" \
  -s base \
  -x \
  -v \
  '*'
#+end_src

Where ~host~, ~port~, and the ~bind~ variables are all correct (used on other
queries).  I've found no information as to why this happens yet.
