#+title:     Dotfiles
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2021-03-20 Sat>
#+language:  en
#+file_tags:
#+tags:
#+auto_id:   t

This is my system configuration. It's a continual work in progress. It also
relies upon less public configuration in another repository. My end goal is to
transform this into a fully [[https://www.alexeyshmalko.com/2020/literate-config/][literate configuration]]. At least as much as is
reasonable. At some point I need to [[https://en.wikipedia.org/wiki/Bootstrapping#Software_development][bootstrap]] the configuration, of course.

* Privacy
:PROPERTIES:
:CUSTOM_ID: privacy
:END:

Some configuration here is private and cannot reasonably shared with the
community at large. These exist as separate repositories whose permissions are
locked down to my personal access only. Some paths in here will refer to private
repositories or files. _All_ of them will have a =private= identifier somewhere in
the name. It is recommended that you stub these out if you're not me, but if
you're in a rush you can just comment/remove these references to get you going.

* If Installing From an Existing Configuration
:PROPERTIES:
:CUSTOM_ID: if-installing-from-an-existing-configuration
:END:

You will want to backup your =~/.zshrc= and perhaps other shell configuration
files.

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

Run =./install.sh=.

Other installers are named =install-<thing>.sh= or =<thing>-install.sh=, with
the latter being preferred but refactoring is not done yet.  In addition,
installers are slowly being removed in favor of Nix.  See the [[Nix]] section for
details on its preferred layout.

* Nix
:PROPERTIES:
:CUSTOM_ID: nix
:END:

This repository uses [[https://nixos.org][Nix]] extensively. Nix is used in conjunction with
[[https://github.com/nix-community/home-manager][home-manager]] to manage a user's configuration. [[https://github.com/LnL7/nix-darwin][nix-darwin]] is used for macOS
configurations.  Everything locked via Nix Flakes.  The entry point is
[[file:./nix/flake.nix][./nix/flake.nix]].

Nix installation can be run by itself via =./nix-install.sh=.

I have in-progress work and notes in [[./nix/README.org]].

** With Direnv and shell.nix Files
:PROPERTIES:
:CUSTOM_ID: nix--with-direnv-and-shell.nix-files
:END:

Old - needs updating since we now use =flake.nix= instead of =shell.nix= but
much of this still applies.

This installation includes =direnv=, which can automatically load a =shell.nix=
file when entering its directory if the path has been blessed via =direnv
allow=. The =shell.nix= file declares a series of packages which will be
available in the shell, and possibly even additional setup (like adding shell
aliases or running some initial setup like database schemas). This is like tools
like =pyenv=, =rbenv=, and =nodenv= or the =*vm= equivalents (=rvm=, =nvm=,
etc), but it works for any software that Nix can handle, not just that one
ecosystem.

Use =nix-direnv-add-envrc= to lay down the necessary =direnv= files and also
=allow= the setup immediately.

** Global Packages from VMs
:PROPERTIES:
:CUSTOM_ID: nix--global-packages-from-vms
:END:

Some languages that require runtimes (Ruby, Python, Node.js) all have packages
that can be installed globally and communities tend to author tools which
leverage this. Installing these kinds of packages by hand is not really the Nix
way and generally you will run into permissions errors trying to do this with
this configuration. Instead you want to install these packages via your =.nix=
files.
