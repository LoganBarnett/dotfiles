#!/usr/bin/env bash

################################################################################
# Looks for a jira-like branch name prefix (proj-1234-foo or PROJ-1234-foo) and
# adds the ticket identifier to commits if not already present.
################################################################################

set -eo pipefail

# When uppercase branch names were supported, it turned out the branch name also
# included the ticket number (case match included). This caused the ticket
# detection to see the ticket number and not write it in there. To get uppercase
# branch names to work with this system, we must filter out the comments.
function filterComments() {
  sed -E 's/^([^#]*)#?(.*)$/\1/' "$1"
}

original=$1
# Assume "HEAD" if the command fails. This can happen when we are making the
# initial commit.
branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null || echo "HEAD")
# In other places, _ can be last (as shown in this very regex), but for some
# reason the end matcher must have _ before - or it simply fails to match things
# properly. I have seen positive matches but don't fully understand the
# circumstances.
regex="^([[:alnum:]]+)[-_]([0-9]+)[-_][[:alnum:]_-]+$"

if [[ $branch == "HEAD" ]]; then
  # We run into HEAD as a branch when we are in a detached HEAD state, which
  # can come from situations such as an interactive rebase. In these cases we
  # have nothing to do and should end successfully.
  exit 0
elif [[ $branch =~ $regex ]]; then
  # In bash 4.x we can use ${var^^} to uppercase, but stock macOS ships with
  # 3.2.
  upper_ticket_id=\
"$(tr '[:lower:]' '[:upper:]' <<< "${BASH_REMATCH[1]}")-${BASH_REMATCH[2]}"
  if ! filterComments "$1" | grep -q "$upper_ticket_id"; then
    printf "\n\n$upper_ticket_id" >> "$1"
  fi
  exit 0
else
  # If the format doesn't match, then procede as normal.
  exit 0
fi
