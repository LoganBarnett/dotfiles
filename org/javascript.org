#+TITLE:  JavaScript configuration
#+AUTHOR: Logan Barnett
#+EMAIL:  logustus@gmail.com
#+DATE:   <2017-11-12 Sun>
#+TAGS:   javascript org-mode config

* javascript
Javascript is "the bytecode of the web". It runs on more things that Java does
at this point. It's quite a statement, considering that Java has had immense
committees governing what kinds of object structures they use, and Javascript
was thrown together in a very small amount time. Many (all?) of its oddities are
still present to this day. A powerful strength of it is it runs on both the
server and the browser. Much code can be shared.

Much of the work I do is using [[https://flow.org][Flow]]. Javascript's functions are first class
citizens. This combination allows me to work with a highly functional style.
Everything is still imperative, but Flow's strength is when you're not
constantly mutating things and structures are inert. I don't have Flow globally
installed. I let the project I'm on dictate the Flow version - but that means
the tooling needs to follow that too. As such, there's a utility that gets us
the =flow= executable from the project's =node_modules=.
=my/getnode-modules-bin= is very generically applicable, but Flow is the
ultimate motivator for me.

* emacs settings
** indentation

There's a lot of JavaScript modes in Emacs. Wowza. Each will need its
indentation fixed. Who uses 4 nowadays?

*** spacing

#+name: config/javascript-indentation-spacing
#+begin_src emacs-lisp :results none :tangle no
(setq-default js-indent-level 2)
#+end_src

*** alignment

See [[file:./prog-mode.org::*indent align fix]] for a description of alignment in
Emacs in a general sense.

A typical aligned indentation looks like this:
#+begin_example js :results none
function reallyReallyLongName(
                              foo,
                              bar,
                              baz,
                             ) {
                               expr1()
                             }
#+end_example

But I want it to look like this:
#+begin_example js :results none
function reallyReallyLongName(
  foo,
  bar,
  baz,
) {
  expr1()
}
#+end_example

#+name: config/javascript-identation-align-fix
#+begin_src emacs-lisp :results none :tangle no
(setq-default js-indent-align-list-continuation nil)
#+end_src

*** chaining
Let's take a moment to observe this code:

#+begin_example javascript
let x = svg.mumble()
           .chained;
#+end_example

In the Emacs world this kind of indentation is intentional and it drives me
crazy about this ecosystem.

This is what I want:

#+begin_example javascript
let x = svg.mumble()
  .chained;
#+end_example

Here is the fix:

#+name: config/javascript-indentation-chaining
#+begin_src emacs-lisp :results none :tangle yes
(setq js-chain-indent nil)
#+end_src

** project specific paths
*** local package executables
    The Node.JS Way(TM) is to make projects as self contained as possible. This
    means importing packages used for build time. Global installs lead to
    problems with compatibility across projects, so a local installation is
    highly preferred. In =npm= vernacular, this is a "dev dependency" (see in
    =devDependencies= in =package.json=).

    When using =yarn= or =npm script=, =./node_modules/.bin= is placed upon the
    =PATH= so the executables that locally installed packages provide can be
    executed.

    Emacs tooling doesn't really seem to favor this, and most of it expects the
    executable to be in some global context. We can detect the project's path and
    the =./node_modules/.bin= directory from that in a given JavaScript file and
    set that path by hand.

   #+BEGIN_SRC emacs-lisp
(defun my/get-node-modules-bin (bin-name)
  "Find BIN-NAME inside of =./node_modules/.bin/= ."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules")
               ))
    (expand-file-name (concat "node_modules/.bin/" bin-name) root)
    )
  )
#+END_SRC

*** flycheck
This function works specifically with =flycheck=, which is a general checker
employed to integrate linters, type checkers, compilers, and coverage utilities.


#+BEGIN_SRC emacs-lisp
  (defun my/use-checker-from-node-modules (checker-name bin-name)
    "For a given CHECKER-NAME, find the BIN-NAME inside of node_modules."
    (let* ((path (my/get-node-modules-bin bin-name)))
      (if path
          (let ((checker-exec-sym (intern (concat "flycheck-javascript-" checker-name "-executable"))))
               (make-local-variable checker-exec-sym)
               (set checker-exec-sym path)
               (add-to-list 'tramp-remote-path (file-name-directory path))
               (message "using flycheck checker %s" path)
               )
        (message "flycheck -- checker %s not available for mode %s with file %s"
                 checker-name major-mode buffer-file-name)
        )
      )
    )
#+END_SRC

The flow checkers in the past needed a specific order of setup, but I haven't
observed that lately. Type check errors coexist with linter errors as far as I
can see. I have =jshint= as a means of supporting some of the older applications
during my time at NWEA.

#+BEGIN_SRC emacs-lisp
  (defun my/find-javascript-flycheck-backends (hook)
    "HOOK should be a quoted string."
    (message "Setting up find hooks for Javascript Flycheck backends")
    (add-hook hook
              (apply-partially #'my/use-checker-from-node-modules "eslint"
                               "eslint"))
    (add-hook hook
              (apply-partially #'my/use-checker-from-node-modules "jshint"
                               "jshint"))
    (add-hook hook
              (apply-partially #'my/use-checker-from-node-modules
                               "flow-coverage"
                               "flow"))
  )
#+END_SRC
**** flycheck checker order
     Tying together Flow, Flow's coverage, and ESLint is documented to run the
     checker after the present one finishes. That said, linter errors and Flow
     errors have been clearly seen side-by-side. I think these functions
     actually tie linting together and make them all show up at once.

     #+BEGIN_SRC emacs-lisp
       (defun config/connect-javascript-flycheck-backends ()
         (message "Connecting Javascript Flycheck backends...")
         ;; (flycheck-add-next-checker 'lsp-ui 'javascript-eslint)
         (flycheck-add-next-checker 'javascript-eslint 'javascript-flow-coverage)
         ;; lsp-ui unsets this, but we still want it to run for other checkers.
         ;; However setting it causes the lsp-ui checks to not refresh properly, nor
         ;; do the other checkers function for that matter.
         ;;
         ;; (setq-default flycheck-check-syntax-automatically
         ;;               '(save idle-change new-line mode-enabled)
         ;;               )
         )
     #+END_SRC

*** company
    :PROPERTIES:
    :CUSTOM_ID: emacs-settings--project-specific-paths--company
    :END:
#+BEGIN_SRC emacs-lisp
(defun my/use-company-backend-from-node-modules (bin-name)
  "For a given CHECKER-NAME, find the BIN-NAME inside of node_modules."
  (let* ((path (my/get-node-modules-bin bin-name)))
    (if path
        (let ((backend-exec-sym (intern
          (concat "company-" bin-name "-executable"))))
             (make-local-variable backend-exec-sym)
             (set backend-exec-sym path)
             )
      (message
        "company-mode -- backend %s not available for mode %s with file %s"
        bin-name major-mode buffer-file-name)
      )
    )
  )
#+END_SRC

https://github.com/aaronjensen/company-flow

#+BEGIN_SRC emacs-lisp
(defun my/find-javascript-company-backends ()
  (message "Setting up find hooks for Javascript Company backends")
  (add-hook 'company-mode-hook
    (apply-partially #'my/use-company-backend-from-node-modules "flow"))
)
#+END_SRC

Stitch together all of the company backends. Remove Tern's backend as it has a
lot of trouble when looking at Flow's libdef files. Many processes are created
when this happens, and Emacs eats a lot of processing power for no good reason.

#+BEGIN_SRC emacs-lisp
  (defun my/config-javascript-company-backends ()
    (require 'company-flow)
    (my/find-javascript-company-backends)
    ;; (setq-default company-backends
    ;;   ;; tern works its way in here multiple times.
    ;;   (remove 'company-tern (remove-duplicates company-backends))
    ;; )
    ;; (setq-default company-backends-rjsx-mode
    ;;   ;; tern works its way in here multiple times.
    ;;   (remove 'company-tern (remove-duplicates company-backends-rjsx-mode))
    ;; )
    ;; (setq-default company-backends-rjsx-mode-raw
    ;;   ;; tern works its way in here multiple times.
    ;;   (remove 'company-tern (remove-duplicates company-backends-rjsx-mode-raw))
    ;; )
    (add-to-list 'company-backends 'company-flow)
    ;; (add-to-list 'company-backends-rjsx-mode 'company-flow)

    (message "company backends for JS %s" company-backends)
    ;; (message "company backends for JSX %s" company-backends-rjsx-mode)

    ;; NOTE: We also need to configure flow's backend on a per major-mode basis.
    ;; (setq-default company-backends-js2-mode
    ;;   ;; tern works its way in here multiple times.
    ;;   (remove 'company-tern (remove-duplicates company-backends-js2-mode))
    ;; )
    ;; (add-to-list 'company-backends-js2-mode 'company-flow)
    ;; (message "company backends (js2mode) (after JS config): %s" company-backends-js2-mode)
  )
#+END_SRC

** flow
*** type-at-pos
    Flow uses a _lot_ of type inferencing. There's also type refinement. This
    can lead to a lot of confusion over what a given type is for a variable.
    Flow gives us the capability via =type-at-pos= to determine a type where our
    cursor is located. This is handy for hunting down issues with Flow errors.

#+BEGIN_SRC emacs-lisp :results none

    ;; (defun config/show-in-frame (buffer alist)
    ;;   ;; Get the frame named 'Help' or create one if such a frame does not exist
    ;;   (message "showing dedicated frame...")
    ;;   (let (
    ;;     (dedicated-frame (select-frame
    ;;       (or (cdr (assoc-string "flow-type" (make-frame-names-alist)))
    ;;         (make-frame '(
    ;;           (name . "flow-type")
    ;;           ;; (buffer-list . nil)
    ;;           ))
    ;;         )
    ;;       )
    ;;     ))
    ;;     ;; This assumes you want to display just one window in the dedicated frame
    ;;     (set-window-buffer (car (window-list dedicated-frame)) buffer nil)
    ;;     (display-buffer-pop-up-frame buffer alist)
    ;;     )
    ;;   )

    ;; (add-to-list 'display-buffer-alist
    ;;   '("^\\*flow-type\\*$" config/show-in-frame)
    ;; )

    (defun my/display-in-frame (display-buffer-name)
      (let (
            (buffer (get-buffer display-buffer-name))
            (frame (make-frame '(
                                 (name . "dedicated-frame")
                                 )
                               ))
            )
        (set-window-buffer (frame-first-window frame) buffer nil)
        (delete-other-windows (get-buffer-window buffer frame))
        (set-window-dedicated-p (get-buffer-window buffer frame) t)
        (set-buffer buffer)
        ;; `help-mode' allows q to be pressed to quit, and separates the stdout
        ;; and stderr visually.
        (help-mode)
        (local-set-key (kbd "q") 'delete-frame)
        )
      )

    (defun run-flow-type-at-pos ()
      (let (
            ;; (command (format "%s type-at-pos --from emacs %s %d %d"
            ;;                  flow-bin
            ;;                  file
            ;;                  line
            ;;                  (1+ col)))
            (command (format "cd %s && echo %s | %s type-at-pos --from emacs --path %s %d %d"
                           (file-name-directory (buffer-file-name))
                           (shell-quote-argument (buffer-string))
                             flow-bin
                           (buffer-file-name)
                             line
                             (1+ col)
  ))
            )
        (message "Running Flow from %s" flow-bin)
        (message (shell-command-to-string (format "%s --version" flow-bin)))
        (message (shell-command-to-string "echo \"$SHELL\""))
        (message "Running type-at-pos with %s" command)

        ;; (shell-command-to-string command "*flow-type*" "*flow-type*")
        (with-output-to-string
          (with-current-buffer
              standard-output
            (shell-command-on-region
             (point-min)
             (point-max)
             command
             "*flow-type*"
             nil
             nil
             t)
            )))
      )

    ;; (defun shell-command-to-string (command)
    ;;   "Execute shell command COMMAND and return its output as a string."
    ;;   (with-output-to-string
    ;;     (with-current-buffer
    ;;         standard-output
    ;;       (process-file shell-file-name nil t nil shell-command-switch command))))

    (defun flow-type-at-pos ()
      "Show flow type at the cursor."
      (interactive)
      (let ((file (buffer-file-name))
            (line (line-number-at-pos))
            (col (current-column))
            (flow-bin (my/get-node-modules-bin "flow"))
            )
        (get-buffer-create "*flow-type*")
        (run-flow-type-at-pos)
        (my/display-in-frame "*flow-type*")
        )
      )

#+END_SRC

*** flow-typed
The =flow-typed= repo provided third party type definitions for when a project
has none or doesn't bundle any in the consumed package.

Doom ignores it by default for =projectile= searches. We need to fix that.
Unfortunately requiring =projectile= from within the =js2-mode= config is the
only thing I can do to make it load in the correct order. Even after loading
=projectile= itself, =projectile-globally-ignored-directories= isn't present.

#+name: config/javascript-unignore-flow-typed
#+begin_src emacs-lisp :results none :tangle yes
(require 'projectile)
(setq projectile-globally-ignored-directories
      (remove "flow-typed" projectile-globally-ignored-directories))
#+end_src

Then we need to tie it together with projectile itself, and not specifically a
JavaScript mode. We need it to run if we are in a project with =dired=, not just
a JavaScript file. We may want to condense this into a single
[[file:./projectile.org]], but not today.
** multi-line

Modern JavaScript allows for tailing commas everywhere. See the default strategy
in [[file:./prog-mode.org]].

#+name: config/javascript-multi-line-commas
#+begin_src emacs-lisp :results none :tangle no
(multi-line-defhook js2 multi-line-add-trailing-comma-strategy t)
#+end_src
** prettier

For some projects I just want Prettier.js to format my code upon saving. This is
typically because standing up a pre-commit hook wouldn't be something my
organization used. For example, one place I've worked likes to place the editor
itself in charge of a lot of these kinds of linting and formatting things. So me
adding a pre-commit hook would be an uphill battle. Instead I can take advantage
of =.dir-locals.el= to start =pretty-js-mode=. To do that, we must bless the
minor mode in =safe-local-variable-values=.

#+name: config/javascript-allow-prettier-on-save
#+begin_src emacs-lisp :results none :tangle yes
;; (add-to-list 'safe-local-variable-values '(prettier-js-mode . nil))
;; I don't think I need this anymore.  I think minor modes are just accepted
;; now...?
;; (add-to-list 'safe-local-eval-forms '(prettier-js-mode 1))
#+end_src


** big config
Finally, tie it all together on demand.

#+begin_src emacs-lisp :noweb yes :results none :tangle yes
  (defun my/js2-disable-global-variable-highlight ()
    "Disable js2 global variable highlight.  Wait.  Am I using this?"
    (font-lock-remove-keywords 'js2-mode 'js2-external-variable)
    )

  (defun my/fix-js2-rainbow-identifiers ()
    "Plea to the gods to fix rainbow-identifiers with js2-mode."
    (message "HACK: turning off rainbow-identifiers-mode")
    (rainbow-identifiers-mode 0)
    (message "HACK: turning back on rainbow-identifiers-mode")
    (rainbow-identifiers-mode 1)
    )

  ;; This is in its own function so it can be shared across javascript modes.
  ;; Sometimes we want to be in rjsx mode but other, lighter configurations
  ;; such as the inner-mode that org-babel uses can just get away with
  ;; js2-mode or something similar.
  (defun config/configure-javascript-mode (hook)
    "HOOK should be a quoted variable."
    ;; (require 'flycheck-flow)
    ;; (require 'rainbow-identifiers)
    (message "Configuring Javascript")
    ;; (add-hook 'js2-mode-hook 'flow-minor-enable-automatically)
    (setq-default flycheck-javascript-flow-args '("--respect-pragma"))
    ;; This was found in my .spacemacs file. I don't know how it got there, and
    ;; the variable is undocumented. It is also set above. Commented until I learn
    ;; more.
    ;; (custom-set-variables '(flycheck-javascript-flow-args nil t))
    (add-to-list 'grep-find-ignored-directories "node_modules")
    <<config/javascript-indentation-chaining>>
    <<config/javascript-indentation-spacing>>
    <<config/javascript-identation-align-fix>>
    <<config/javascript-unignore-flow-typed>>
    (setq-default js2-strict-missing-semi-warning nil)
    (setq-default js2-strict-trailing-comma-warning nil)
    (setq-default js2-mode-show-parse-errors nil)
    (setq-default js2-highlight-external-variables nil)
    ;; (setq-default js2-mode-toggle-warnings-and-errors 0)
    (setq-default js2-mode-show-strict-warnings nil)
    ;; (add-hook 'js2-mode 'js2-mode-toggle-warnings-and-errors)
    ;; (add-hook 'js2-mode 'my/disable-js2-global-var-highlight)

    ;; TODO: See what this setting does. It relates to this issue, which I'm not
    ;; necessarily having trouble with, but am curious about.
    ;; https://www.reddit.com/r/spacemacs/comments/9owc4b/javascript_typescript_indentation/
    ;; (setq js-indent-align-list-continuation nil)

    ;; prevent indentation from lining up with a prior line's glyph
    ;; this will make it so fighting is less necessary to appease linters
    (setq-default js2-pretty-multiline-declarations nil)
    (my/find-javascript-flycheck-backends hook)
;; TODO: Fix this. Doesn't work in a post-Doom era.
    ;; (config/connect-javascript-flycheck-backends)

    ;; (my/config-javascript-company-backends)
    ;; Setting this locally should work because it's only for this individual
    ;; buffer, and not the project. This should survive buffer renames/moves.
    ;; (setq-local lsp-clients-flow-server
    ;;             (concat (projectile-project-root) "node_modules/.bin/flow")
    ;;             )

    ;; ugh debugging company
    ;; (defun company-flow-prefix ()
    ;;   (interactive)
    ;;   (message "result: %s" (company-flow--prefix))
    ;; )
  )

  (require 'use-package)
  (use-package "js2-mode"
    :defer t
    :init
    (message "initializing Javascript via js2-mode")
    (add-hook 'js2-mode #'my/config-javascript-company-backends)
    (add-hook 'js2-mode #'lsp)

    :config
    (config/configure-javascript-mode 'js2-mode-hook)
    (require 'grep)
    (require 'flycheck)
    (require 'multi-line)
    <<config/javascript-multi-line-commas>>
    <<config/javascript-allow-prettier-on-save>>
  )

  (use-package "rjsx-mode"
    :defer t
    :init
    (message "initializing Javascript via rjsx-mode")
    ;; (add-to-list 'auto-mode-alist '("\\.js" . rjsx-mode))
    (add-hook 'rjsx-mode #'my/config-javascript-company-backends)
    (add-hook 'rjsx-mode #'lsp)

    :config
    (config/configure-javascript-mode 'rjsx-mode-hook)
    (require 'grep)
    (require 'flycheck)
    (require 'multi-line)
    <<config/javascript-multi-line-commas>>
    ;; Turn off auto closing of tags (it's usually wrong anyways).
    (define-key rjsx-mode-map "<" nil)
    (define-key rjsx-mode-map (kbd "C-d") nil)
    (define-key rjsx-mode-map ">" nil)
    <<config/javascript-allow-prettier-on-save>>
  )

;; Utterly shameless lift from
;; https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-873485004
;; @josemiguelo even uses 2 spaces! *Swoon*
(use-package typescript-mode
  :ensure t
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
  :config
  (setq typescript-indent-level 2)
  (add-hook 'typescript-mode #'subword-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-tsx-mode))
  <<config/javascript-allow-prettier-on-save>>
  )

(use-package tree-sitter
  :ensure t
  :hook ((typescript-mode . tree-sitter-hl-mode)
         (typescript-tsx-mode . tree-sitter-hl-mode))
  )

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter
  :config
  (tree-sitter-require 'tsx)
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
  )

#+end_src

*** js-mode
#+begin_src emacs-lisp :results none :noweb yes
;; (use-package "js-mode"
;;   :init
;;   (message "Initializing JavaScript via js-mode.")
;;   :config
;;   <<config/javascript-indentation>>
;;   )
#+end_src
