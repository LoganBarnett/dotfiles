#+title:     git
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2019-06-18 Tue>
#+language:  en
#+file_tags: git config

* git-gutter-fringe

** setup on any potential buffer

We don't have a ~fundamental-mode-hook~ so we have to go after the two we know
about: ~text-mode-hook~ and ~prog-mode-hook~.

In addition we don't have a hook that is for a buffer bound to a file.  We'll
have to add that ourselves.

#+name: config/git-gutter-fringe-hook
#+begin_src emacs-lisp :results none :exports code :tangle no
;; (defun config/git-gutter-fringe-add-for-files ()
;;   (if (buffer-file-name) (git-gutter-fringe) nil)
;;   )
;; (add-hook 'prog-mode-hook #'config/git-gutter-fringe-add-for-files)
;; (add-hook 'text-mode-hook #'config/git-gutter-fringe-add-for-files)
(global-git-gutter-mode 1)
#+end_src



* gitignore template

The built-in file template for =.gitignore= files is flat out wrong.
=.gitignore= should never have OS, editor, or any other non-project specific
files listed in it. This is the responsibility of the global git ignore, which
by default is =~/.config/git/ignore=. We could unset the template, but I'd
rather use another template. This template will espouse the above policy to
hopefully head off having to explain this over and over.

#+name: config/gitignore-file-template-disable
#+begin_src emacs-lisp :results none :tangle no
;; (set-file-template! 'gitignore-mode :trigger "gitignore" :mode 'gitignore-mode)
#+end_src

* magit
** blame output
  =magit= uses the committer date of a commit, which is misleading on branches that
  have undergone a rebase. The committer date will show as the rebase date, rather
  than the date of the commit. The standard blame output uses the author date,
  and I strongly feel like we should do the same here without

  The formatting below is what is used by default, plus modification of the
  author date shown rather than committer date.

#+begin_src emacs-lisp :results none
  (defun config/git-blame-output ()
    (interactive)
    (setq-default magit-blame-styles
                  '((headings
                    (heading-format . "%-20a %A %s
  "))
                   (margin
                    (margin-format " %s%f" " %A %a" " %H")
                    (margin-width . 42)
                    (margin-face . magit-blame-margin)
                    (margin-body-face magit-blame-dimmed))
                   (highlight
                    (highlight-face . magit-blame-highlight))
                   (lines
                    (show-lines . t)
                    (show-message . t)))
                  )
  )
#+end_src
** insert mode when committing

#+name: config/git-commit-message-evil-insert-state
#+begin_src emacs-lisp :results none :exports code :tangle no
(add-hook 'git-commit-setup-hook #'evil-insert-state)
#+end_src


** syncing git-gutter and magit
  =git-gutter= shows "fringe" indicators for adds, edits, and removals of lines
  for a given buffer. This is different than =magit= which serves as a general
  interface to =git= itself. Both are incredibly useful, but they don't talk to
  each other. When staging changes in =magit= (and possibly committing), the
  buffer's fringes are not automatically updated. However a simple hook
  configuration should bind these together quite well:

  I think this is backwards.

  #+begin_src emacs-lisp :results none
    (defun config/connect-git-gutter-and-magit ()
      (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
      (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
     )
  #+end_src

** magit log display

Typically Magit has this bound to =$= but this is an =evil-mode= binding.
=evil-mode= is winning, and I prefer it this way.  Instead let's make our own
binding.

For now it seems to be bound to =`= and is the =magit-process-buffer=
interactive function..

** magit extended help

This is undocumented but you can use =C-h= in Magit's popup window to drill into
help for a particular binding (much like =describe-key=).  This should be listed
somewhere but isn't.  I'd prefer to see it under =essential commands=, which
will require some work with =transient= to make happen.  This could serve as a
good contribution to Magit.

** signing commits

I have turned on commit signing in my =.gitconfig=.  However this means that
commits fail when making them from Magit.  This is because (I think) that Magit
doesn't expect GPG signing to occur, and thus doesn't anticipate a prompt from
the GPG agent.  Thus the process is identified as non-interactive and it fails.
Magit does have an option, but it doesn't follow the =.gitconfig= value, and
isn't enabled by default.

Per [[https://github.com/magit/magit/issues/2610][magit#2610]], Magit doesn't consistently read from the =.gitconfig=.  It does
in some cases, and also does so for determining _which_ key to use, but it
doesn't determine _if_ the commit should be signed.

See [[https://github.com/magit/magit/issues/2993][magit#2993]] for a more cohesive solution, still in the works circa
[2024-01-19 Fri].

[[https://github.com/magit/magit/pull/4929][magit#4929]] has an example of setting the =:init-value= which I needed to get
this complete.

This snippet should cause the variable to be read from the =.gitconfig=.

#+name: config/magit-read-gpgsign-from-gitconfig
#+begin_src emacs-lisp :results none :tangle no
(use-package "transient"
  :config
  (transient-define-argument magit:--gpg-sign ()
    :description "Sign using gpg"
    :class 'transient-option
    :shortarg "-S"
    :argument "--gpg-sign="
    :allow-empty t
    :reader #'magit-read-gpg-signing-key
    :init-value (lambda (obj)
                  (oset obj value (magit-read-gpg-signing-key "Secret: ")))
    )
  )
#+end_src

*** troubleshooting commit signing
**** "timed out"

This should point to =emacsclient=:

#+begin_src emacs-lisp :results value
(getenv "EDITOR")
#+end_src

#+RESULTS:
: emacsclient

This should fix it:

#+name: config/editor-env-emacsclient-ensure
#+begin_src emacs-lisp :results value :tangle no
(setf (getenv "EDITOR") "emacsclient")
#+end_src

#+RESULTS:
: emacsclient

Without this, it might be trying to open this as =vim=. I do want =vim= to be my
=EDITOR= in most cases.

* linking to web mirrors
I'm not sure if "web mirror" is the proper term, but it kind of makes sense: A
web version of the git repository. Generally we see this when browsing source in
GitHub, BitBucket, GitLab, etc.

=magit= has =SPC g Y= bound to =+vc/browse-at-remote-kill-homepage=, which gets
the home page value but that's not as useful as linking to the file itself.

#+name: config/git-mirror-commands
#+begin_src emacs-lisp :results none :tangle no
;; This should live elsewhere.  The SPC g prefix is for general git stuff.  I
;; could keep the convention that the capital letter is the "remote web"
;; version, or I could put it under something like SPC G.
(defun config/git-branch-kill ()
  (interactive)
  ;; This answer (https://emacs.stackexchange.com/a/72568) suggests using
  ;; `(vc-git--symbolic-ref (buffer-file-name))' but it is a private function.
  ;; vc-git-branches is slower because it gets all branches, but I don't think
  ;; that will prove to be an issue.
  (kill-new (car (vc-git-branches)))
  )

(defun config/git-rev-kill ()
  (interactive)
  (kill-new (vc-git-working-revision (buffer-file-name)))
  )

;; These only exists in Doom:

(defun +vc--remote-homepage ()
  (require 'browse-at-remote)
  (or (let ((url (browse-at-remote--remote-ref)))
        (plist-get (browse-at-remote--get-url-from-remote (car url)) :url))
      (user-error "Can't find homepage for current project")))

;;;###autoload
(defun +vc/browse-at-remote-kill-homepage ()
  "Copy homepage URL of current project to clipboard."
  (interactive)
  (let ((url (+vc--remote-homepage)))
    (kill-new url)
    (message "Copied to clipboard: %S" url)))

(use-package "browse-at-remote"
  :demand t
  :init
  ;; Unbind browse-at-remote* (not sure what the tail of this is). This allows
  ;; us to set more specific keybindings.
  ;;
  (map! :leader :prefix "g" "y" nil)
  (map!
   ;; :after magit
   :leader
   :prefix ("g y" . "git url")
   :nv
   :desc "kill git branch" "b" #'config/git-branch-kill
   :desc "open git mirror homepage" "H" #'browse-at-remote
   :desc "kill git mirror homepage" "h" #'+vc/browse-at-remote-kill-homepage
   :desc "kill git rev" "r" #'config/git-rev-kill
   :desc "kill git mirror lines" "y" #'browse-at-remote-kill
   )
  :config
  (config/init-org-file-private "git-private.org")
  )
#+end_src

* tramp optimization

This is yanked from here:
https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/vc/config.el

#+name: config/git-tramp-vc-backend-optimize
#+begin_src emacs-lisp :results none :exports code
;; Remove RCS, CVS, SCCS, SRC, and Bzr, because it's a lot less work for vc to
;; check them all (especially in TRAMP buffers), and who uses any of these in
;; 2021, amirite?
(setq-default vc-handled-backends '(SVN Git Hg))
#+end_src

* all together

#+begin_src emacs-lisp :results none :noweb yes :tangle yes
(require 'use-package)
<<config/magit-read-gpgsign-from-gitconfig>>
<<config/git-mirror-commands>>
<<config/git-tramp-vc-backend-optimize>>

(use-package "git-gutter-fringe"
  :demand t
  :init
  :config
  <<config/git-gutter-fringe-hook>>
  )

(use-package "magit"
  :defer t
  :init
  ;; This is supposed to be set before magit loads, according to the docs.
  (setq forge-add-default-bindings t)
  (config/git-blame-output)
  <<config/gitignore-file-template-disable>>
  <<config/editor-env-emacsclient-ensure>>
  (map!
   :leader
   :prefix ("g" . "git")
   :desc "magit" :n "g" #'magit-status
   :desc "buffer log" :nv "l" #'magit-log-buffer-file
   :desc "git-add file" :nv "a" #'magit-file-stage
   :desc "initialize repo" :n "i" #'magit-init
   )
  :config
  <<config/git-commit-message-evil-insert-state>>
  (config/connect-git-gutter-and-magit)
  )

(use-package forge
  :after magit
  :ensure t
  :config
  )
#+end_src
