#+title:    prog-mode
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-08-16 Thu>
#+language: en
#+tags:     emacs config

=prog-mode= is a general mode for any programming mode. Settings applied in
=prog-mode= will be reflected in practically any mode with code or configuration
files. It generally doesn't effect text files.

* parens, braces, oh my
** multi-line

I have a strategy I like which makes it create new lines rather than the
paragraph form.

#+name: config/prog-multi-line-default-strategy
#+begin_src emacs-lisp :tangle no :results none
(defvar multi-line-always-newline)
(defvar multi-line-current-strategy)
(setq-default multi-line-current-strategy
              (multi-line-strategy
               :respace (multi-line-default-respacers
                         (make-instance multi-line-always-newline))))
;; Old code kept for reference.
  ;; (multi-line-defhook js2
  ;;   (make-instance multi-line-strategy
  ;;                  :find (make-instance 'multi-line-forward-sexp-find-strategy
  ;;                                       :split-regex "[[:space:]\n]+"
  ;;                                       :done-regex "[[:space:]]*)]}"
  ;;                                       :split-advance-fn 'js2-mode-forward-sexp)
  ;;                  :respace multi-line-always-newline-respacer))
  ;; (use-package "color-identifiers-mode"
  ;;   :ensure t
  ;;   :init
  ;;   (global-color-identifiers-mode)
  ;;   :config
  ;;   )

#+end_src

** smartparens
=smartparens= is rather cumbersome with =evil-mode= around. Staying in the
insert state can be great on occasion, but it makes commands harder to compose,
and oftentimes =smartparens= will incorrectly attempt to help me close a brace
when I'm inserting something on the inside that might be temporarily incorrect.
After all, I'm still typing. Keeping it disabled is vital, but it can also
provide some additional functionality, such as highlighting unmatched pairs.

I've tried excluding =smartparens= from the =spacemacs= packages, but some other
layer or package pulls it in anyways. Instead, let's toss it some config to
disable it per this [[https://github.com/syl20bnr/spacemacs/issues/6144][ticket]].

Perhaps one day I could look into =evil-smartparens=, which combines the power
of the =smartparens= strict mode (which prevents removal of unbalanced
delimiters), and ensures that normal motions do not create unbalanced
delimiters. This means the motions still mostly work though.

https://github.com/expez/evil-smartparens

#+name: config/prog-mode-disable-smart-parens
#+begin_src emacs-lisp :results none
  (on-doom
    ;; This is the recommended way to disable it per
    ;; https://github.com/hlissner/doom-emacs/issues/1094
    (after! smartparens (smartparens-global-mode -1))
    ;; However the recommended way isn't enough. So let's really disable it.
    ;; Without this, it will also leak into the minibuffer.
    (sp-pair "(" nil :actions :rem)
    (sp-pair "[" nil :actions :rem)
    (sp-pair "'" nil :actions :rem)
    (sp-pair "`" nil :actions :rem)
    (sp-pair "<" nil :actions :rem)
    (sp-pair "{" nil :actions :rem)
    (sp-pair "=" nil :actions :rem)
    (sp-pair "\"" nil :actions :rem)
    ;; The documentation regarding strict mode makes me think it's the real
    ;; culprit. Disable it everywhere. I'm not sure why the call above seems to
    ;; have no effect.
    (smartparens-global-strict-mode -1)
  )
  (on-spacemacs
   ;; Spacemacs has no means of disabling smartparens as well. So we just yank out
   ;; every possible pairing.
   (eval-after-load 'smartparens
     '(progn
        (sp-pair "(" nil :actions :rem)
        (sp-pair "[" nil :actions :rem)
        (sp-pair "'" nil :actions :rem)
        (sp-pair "`" nil :actions :rem)
        (sp-pair "<" nil :actions :rem)
        (sp-pair "{" nil :actions :rem)
        (sp-pair "=" nil :actions :rem)
        (sp-pair "\"" nil :actions :rem)
        )
     )
   )
#+end_src

#+name: config/prog-mode-disable-smart-parens-fn
#+begin_src emacs-lisp :results none :tangle yes :noweb yes
(defun config/prog-mode-disable-smart-parens ()
  <<config/prog-mode-disable-smart-parens>>
  )
#+end_src

** rainbow-delimiters
=rainbow-delimiters= are incredibly helpful for visually determining nesting of
delimiters.

#+begin_src emacs-lisp :results none
(defun config/rainbow-delimiters ()
  "Add colorful indicators of delimiter nesting."
  (add-hook 'prog-mode-hook (lambda ()
    (require 'rainbow-delimiters)
    (rainbow-delimiters-mode)
    ))
  )
#+end_src

* auto fill comments
  I'm not sure how I feel about using =auto-fill-mode= for normal code, but for
  comments this is a must to me. Fortunately =auto-fill-mode= comes with
  =comment-auto-fill-only-comments=.

  #+begin_src emacs-lisp
    (defun config/auto-fill-comments ()
      "Turn on `auto-fill-mode' and disable it for everything but comments."
      (setq-local comment-auto-fill-only-comments t)
      (auto-fill-mode 1)
      )
  #+end_src
* line numbers

Generally line numbers are automatically set, butt his appears to be on a
per-mode basis with almost all modes opting in. =applescript-mode= is a notable
exception. I don't know why we wouldn't just default it for all =prog-mode=
settings. If line numbers would be inappropriate, then the mode seems
inappropriate to derive from =prog-mode=.

#+name: config/prog-mode-line-numbers-enable
#+begin_src emacs-lisp :results none :tangle yes
(add-hook 'prog-mode-hook (lambda() (message "displaying line numbers") (display-line-numbers-mode 1)))
#+end_src

* line wrapping
  Disable line wrapping for any =prog-mode= based buffer. =truncate-lines= set
  to =t= will mean the line is simply "clipped" when it goes off the side of the
  buffer, rather than "folded" (the docs' term) or wrapped.

  #+begin_src emacs-lisp
  (defun config/disable-line-wrapping ()
    (setq-local truncate-lines t)
  )
  #+end_src

#+name: prog-mode-disable-visual-line-mode
#+begin_src emacs-lisp :results none
(load-library "my-utils") ;; Needed for config/disable-visual-line-mode.
(add-hook 'prog-mode-hook #'config/disable-visual-line-mode)
#+end_src


* newlines

** end of file
   POSIX files are described as always having a final newline. So I should save
   my files as having a final newline. It can also prevent churn on lines added
   to the end of a file. Though this means that editors that haven't been
   respecting this standard will have saved files that we will override. Without
   a better case I think we should add final newlines, and if that is
   problematic in some cases I should investigate some kind of means of saving
   one-off files without their newline.

   #+name: config/prog-mode-manage-final-newline
   #+begin_src emacs-lisp :results none :tangle yes
    (setq-default mode-require-final-newline t)
   #+end_src
* indentation
** indent align fix

Emacs does an indentation called "alignment" or just "align", which is a funky
indentation that only Emacs seems to do, probably inherited from typical Lisp
indentation rules.

Most indentation in Emacs comes from =c-set-offset=. Emacs has a culture of
aligned indents off of the last glyph and I find it eats into my 80 columns very
quickly with little benefit. While my original motivator was to fix this for
[[file:./javascript.org]], it applies to any C-like language.

Or maybe JS doesn't use this at all. Ugh. I've kept all identifiers for
bisecting since I'm sure this will come up again later.

Use the interactive function =cc-set-offset= to find the current syntactic
element we're on (there might need to be resolution) and it will show the
current setting and allow an override. I've found this to be an excellent means
of debugging indentation issues.

Bear in mind that indentation isn't always consistent depending on where you
start from. Sometimes you need to highlight the entire expression, function
call, declaration, etc in order to achieve the complete indentation desired.
This is because the =cc-mode= indentation (or =cc-indent=?) trusts in your prior
indentation to be correct. I think this is typically the better thing to do.

#+name: config/prog-mode-fix-c-indentation
#+begin_src emacs-lisp :results none :tangle no
(c-add-style
 "1tbs-no-align"
 '(
   (c-basic-offset . 2)
   ;; Some setings must be done under this alist. It is not clear to me yet when
   ;; and why this must be. It is also not clear if the root versions are
   ;; superfluous or not. However I suspect they can conflict with each other.
   ;; It may explain why some indentations seem to be applied twice.
   (c-offsets-alist
    (arglist-close . 0)
    (arglist-cont-nonempty . 0)
    )
   (substatement-open . 0)
   (func-decl-cont . 0)
   ;; (c-set-offset 'brace-list-intro . 0)
   ;; (c-set-offset 'statement-cont . 0)
   (statement-cont . 0)
   (brace-list-open . 0)
   ;; (c-set-offset 'string . 0)
   ;; (c-set-offset 'c . 0)
   ;; (c-set-offset 'defun-open . 0)
   ;; (c-set-offset 'defun-close . 0)
   ;; (c-set-offset 'defun-block-intro . 0)
   ;; (c-set-offset 'class-open . 0)
   ;; (c-set-offset 'class-close . 0)
   ;; (c-set-offset 'inline-open . 0)
   ;; (c-set-offset 'inline-close . 0)
   (func-decl-cont . 0)
   (inher-cont . 0)
   ;; (c-set-offset 'block-open . 0)
   ;; (c-set-offset 'block-close . 0)
   ;; (c-set-offset 'brace-list-open . 0)
   ;; (c-set-offset 'brace-list-close . 0)
   ;; (c-set-offset 'brace-list-intro . 0)
   ;; (c-set-offset 'brace-list-entry . 0)
   ;; (c-set-offset 'brace-entry-open . 0)
   ;; (c-set-offset 'statement . 0)
   (statement-cont . 0)
   ;; (c-set-offset 'statement-block-intro . 0)
   ;; (c-set-offset 'statement-case-intro . 0)
   ;; (c-set-offset 'statement-case-open . 0)
   ;; (c-set-offset 'substatement . 0)
   ;; (c-set-offset 'substatement-open . 0)
   ;; (c-set-offset 'substatement-label . 0)
   ;; (c-set-offset 'case-label . 0)
   ;; (c-set-offset 'access-label . 0)
   ;; (c-set-offset 'label . 0)
   ;; (c-set-offset 'do-while-closure . 0)
   ;; (c-set-offset 'else-clause . 0)
   ;; (c-set-offset 'catch-clause . 0)
   ;; (c-set-offset 'comment-intro . 0)
   ;;
   ;; These arg lists tend to be the biggest source of alignment
   ;; issues. This sets the expressions or "arg lists" to indent
   ;; idempotently, and not aligned to the parent end-of-line
   ;; but the parent indentation.
   (arglist-intro . 0)
   (arglist-cont . 0)
   (arglist-cont-nonempty . +)
   (arglist-close . -)
   ;; (c-set-offset 'stream-op . 0)
   ;; (c-set-offset 'inclass . 0)
   ;; (c-set-offset 'cpp-macro . 0)
   (cpp-macro-cont . 0)
   ;; (c-set-offset 'friend . 0)
   ;; (c-set-offset 'objc-method-intro . 0)
   (objc-method-args-cont . 0)
   (objc-method-call-cont . 0)
   ;; (c-set-offset 'extern-lang-open . 0)
   ;; (c-set-offset 'extern-lang-close . 0)
   ;; (c-set-offset 'inextern-lang . 0)
   ;; (c-set-offset 'knr-argdecl-intro . 0)
   ;; (c-set-offset 'knr-argdecl . 0)
   ;; (c-set-offset 'topmost-intro . 0)
   (topmost-intro-cont . 0)
   (annoation-top-cont . 0)
   (annoation-var-cont . 0)
   ;; (c-set-offset 'member-init-intro . 0)
   (member-init-cont . 0)
   ;; (c-set-offset 'inner-intro . 0)
   ;; (c-set-offset 'namespace-open . 0)
   ;; (c-set-offset 'namespace-close . 0)
   ;; (c-set-offset 'innamespace . 0)
   ;; (c-set-offset 'module-open . 0)
   ;; (c-set-offset 'module-close . 0)
   ;; (c-set-offset 'inmodule . 0)
   ))
(setq-default
 c-indentation-style "1tbs-no-align"
 c-basic-offset 2
  )
(add-to-list 'c-default-style '(other . "1tbs-no-align"))
#+end_src

For some major modes we just need to tie this to the mode hook.
#+begin_src emacs-lisp :results none :noweb yes
(defun config/prog-mode-c-style-set ()
  (c-set-style "1tbs-no-align")
  )
#+end_src


* all together

#+begin_src emacs-lisp :results none :noweb yes
(use-package prog-mode
  :init
  <<config/prog-mode-fix-c-indentation>>
  <<prog-mode-disable-visual-line-mode>>
  (config/rainbow-delimiters)
  <<config/prog-mode-disable-smart-parens>>
  <<config/prog-mode-line-numbers-enable>>
  <<config/prog-mode-manage-final-newline>>
  (add-hook 'prog-mode-hook #'config/auto-fill-comments)
  (add-hook 'prog-mode-hook #'config/disable-line-wrapping)
  ;; I have found repeating this in a hook fixes the <> completion in JavaScript
  ;; modes.
  (add-hook 'prog-mode-hook #'config/prog-mode-disable-smart-parens)
  :config
  (require 'multi-line)
  <<config/prog-multi-line-default-strategy>>
  )
#+end_src
