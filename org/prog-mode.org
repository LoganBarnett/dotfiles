#+title:    prog-mode
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-08-16 Thu>
#+language: en
#+tags:     emacs config

=prog-mode= is a general mode for any programming mode. Settings applied in
=prog-mode= will be reflected in practically any mode with code or configuration
files. It generally doesn't effect text files.

* parens, braces, oh my
** smartparens
=smartparens= is rather cumbersome with =evil-mode= around. Staying in the
insert state can be great on occasion, but it makes commands harder to compose,
and oftentimes =smartparens= will incorrectly attempt to help me close a brace
when I'm inserting something on the inside that might be temporarily incorrect.
After all, I'm still typing. Keeping it disabled is vital, but it can also
provide some additional functionality, such as highlighting unmatched pairs.

I've tried excluding =smartparens= from the =spacemacs= packages, but some other
layer or package pulls it in anyways. Instead, let's toss it some config to
disable it per this [[https://github.com/syl20bnr/spacemacs/issues/6144][ticket]].

Perhaps one day I could look into =evil-smartparens=, which combines the power
of the =smartparens= strict mode (which prevents removal of unbalanced
delimiters), and ensures that normal motions do not create unbalanced
delimiters. This means the motions still mostly work though.

https://github.com/expez/evil-smartparens

#+name: config/prog-mode-disable-smart-parens
#+begin_src emacs-lisp :results none :tangle yes
  (on-doom
    ;; This is the recommended way to disable it per
    ;; https://github.com/hlissner/doom-emacs/issues/1094
    (after! smartparens (smartparens-global-mode -1))
    ;; However the recommended way isn't enough. So let's really disable it.
    ;; Without this, it will also leak into the minibuffer.
    (sp-pair "(" nil :actions :rem)
    (sp-pair "[" nil :actions :rem)
    (sp-pair "'" nil :actions :rem)
    (sp-pair "`" nil :actions :rem)
    (sp-pair "<" nil :actions :rem)
    (sp-pair "{" nil :actions :rem)
    (sp-pair "=" nil :actions :rem)
    (sp-pair "\"" nil :actions :rem)
    ;; The documentation regarding strict mode makes me think it's the real
    ;; culprit. Disable it everywhere. I'm not sure why the call above seems to
    ;; have no effect.
    (smartparens-global-strict-mode -1)
  )
  (on-spacemacs
   ;; Spacemacs has no means of disabling smartparens as well. So we just yank out
   ;; every possible pairing.
   (eval-after-load 'smartparens
     '(progn
        (sp-pair "(" nil :actions :rem)
        (sp-pair "[" nil :actions :rem)
        (sp-pair "'" nil :actions :rem)
        (sp-pair "`" nil :actions :rem)
        (sp-pair "<" nil :actions :rem)
        (sp-pair "{" nil :actions :rem)
        (sp-pair "=" nil :actions :rem)
        (sp-pair "\"" nil :actions :rem)
        )
     )
   )
#+end_src

** rainbow-delimiters
=rainbow-delimiters= are incredibly helpful for visually determining nesting of
delimiters.

#+begin_src emacs-lisp :results none
(defun config/rainbow-delimiters ()
  "Add colorful indicators of delimiter nesting."
  (add-hook 'prog-mode-hook (lambda ()
    (require 'rainbow-delimiters)
    (rainbow-delimiters-mode)
    ))
  )
#+end_src

* auto fill comments
  I'm not sure how I feel about using =auto-fill-mode= for normal code, but for
  comments this is a must to me. Fortunately =auto-fill-mode= comes with
  =comment-auto-fill-only-comments=.

  #+begin_src emacs-lisp
    (defun config/auto-fill-comments ()
      "Turn on `auto-fill-mode' and disable it for everything but comments."
      (setq-local comment-auto-fill-only-comments t)
      (auto-fill-mode 1)
      )
  #+end_src

* line wrapping
  Disable line wrapping for any =prog-mode= based buffer. =truncate-lines= set
  to =t= will mean the line is simply "clipped" when it goes off the side of the
  buffer, rather than "folded" (the docs' term) or wrapped.

  #+begin_src emacs-lisp
  (defun config/disable-line-wrapping ()
    (setq-local truncate-lines t)
  )
  #+end_src

#+name: prog-mode-disable-visual-line-mode
#+begin_src emacs-lisp :results none
(load-library "my-utils") ;; Needed for config/disable-visual-line-mode.
(add-hook 'prog-mode-hook #'config/disable-visual-line-mode)
#+end_src


* newlines

** end of file
   POSIX files are described as always having a final newline. So I should save
   my files as having a final newline. It can also prevent churn on lines added
   to the end of a file. Though this means that editors that haven't been
   respecting this standard will have saved files that we will override. Without
   a better case I think we should add final newlines, and if that is
   problematic in some cases I should investigate some kind of means of saving
   one-off files without their newline.

   #+name: config/prog-mode-manage-final-newline
   #+begin_src emacs-lisp :results none :tangle yes
    (setq-default mode-require-final-newline t)
   #+end_src
* indentation
Most indentation in Emacs comes from =c-set-offset=. Emacs has a culture of
hanging indents off of the last glyph and I find it eats into my 80 columns very
quickly with little benefit. While my original motivator was to fix this for
[[file:./javascript.org]], it applies to any C-like language.

Or maybe JS doesn't use this at all. Ugh. I've kept all identifiers for
bisecting since I'm sure this will come up again later.

#+name: config/prog-mode-fix-c-indentation
#+begin_src emacs-lisp :results none :tangle yes
(c-set-offset 'substatement-open 0)
;; (c-set-offset 'func-decl-cont 0)
;; (c-set-offset 'brace-list-intro 0)
;; (c-set-offset 'statement-cont 0)
;; (c-set-offset 'statement-cont 0)
;; (c-set-offset 'brace-list-open 0)
;; (c-set-offset 'string 0)
;; (c-set-offset 'c 0)
;; (c-set-offset 'defun-open 0)
;; (c-set-offset 'defun-close 0)
;; (c-set-offset 'defun-block-intro 0)
;; (c-set-offset 'class-open 0)
;; (c-set-offset 'class-close 0)
;; (c-set-offset 'inline-open 0)
;; (c-set-offset 'inline-close 0)
;; (c-set-offset 'func-decl-cont 0)
;; (c-set-offset 'inher-cont 0)
;; (c-set-offset 'block-open 0)
;; (c-set-offset 'block-close 0)
;; (c-set-offset 'brace-list-open 0)
;; (c-set-offset 'brace-list-close 0)
;; (c-set-offset 'brace-list-intro 0)
;; (c-set-offset 'brace-list-entry 0)
;; (c-set-offset 'brace-entry-open 0)
;; (c-set-offset 'statement 0)
;; (c-set-offset 'statement-cont 0)
;; (c-set-offset 'statement-block-intro 0)
;; (c-set-offset 'statement-case-intro 0)
;; (c-set-offset 'statement-case-open 0)
;; (c-set-offset 'substatement 0)
;; (c-set-offset 'substatement-open 0)
;; (c-set-offset 'substatement-label 0)
;; (c-set-offset 'case-label 0)
;; (c-set-offset 'access-label 0)
;; (c-set-offset 'label 0)
;; (c-set-offset 'do-while-closure 0)
;; (c-set-offset 'else-clause 0)
;; (c-set-offset 'catch-clause 0)
;; (c-set-offset 'comment-intro 0)
;; (c-set-offset 'arglist-intro 0)
;; (c-set-offset 'arglist-cont 0)
;; (c-set-offset 'arglist-cont-nonempty 0)
;; (c-set-offset 'arglist-close 0)
;; (c-set-offset 'stream-op 0)
;; (c-set-offset 'inclass 0)
;; (c-set-offset 'cpp-macro 0)
;; (c-set-offset 'cpp-macro-cont 0)
;; (c-set-offset 'friend 0)
;; (c-set-offset 'objc-method-intro 0)
;; (c-set-offset 'objc-method-args-cont 0)
;; (c-set-offset 'objc-method-call-cont 0)
;; (c-set-offset 'extern-lang-open 0)
;; (c-set-offset 'extern-lang-close 0)
;; (c-set-offset 'inextern-lang 0)
;; (c-set-offset 'knr-argdecl-intro 0)
;; (c-set-offset 'knr-argdecl 0)
;; (c-set-offset 'topmost-intro 0)
;; (c-set-offset 'topmost-intro-cont 0)
;; (c-set-offset 'annoation-top-cont 0)
;; (c-set-offset 'annoation-var-cont 0)
;; (c-set-offset 'member-init-intro 0)
;; (c-set-offset 'member-init-cont 0)
;; (c-set-offset 'inner-intro 0)
;; (c-set-offset 'namespace-open 0)
;; (c-set-offset 'namespace-close 0)
;; (c-set-offset 'innamespace 0)
;; (c-set-offset 'module-open 0)
;; (c-set-offset 'module-close 0)
;; (c-set-offset 'inmodule 0)
#+end_src


* all together

  #+begin_src emacs-lisp :results none :noweb yes
    <<prog-mode-disable-visual-line-mode>>
    (config/rainbow-delimiters)
    <<config/prog-mode-disable-smart-parens>>
    <<config/prog-mode-manage-final-newline>>
    (add-hook 'prog-mode-hook #'config/auto-fill-comments)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'config/disable-line-wrapping)
    <<config/prog-mode-fix-c-indentation>>
  #+end_src
