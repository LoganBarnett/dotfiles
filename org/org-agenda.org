#+title:    org-agenda
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-12-12 Wed>
#+language: en
#+tags:     emacs config org-agenda

* COMMENT save buffers on changing todos

  Changes in =org-agenda= write to the buffers that own the original TODO items
  but they do not save the buffer (which means a crash or other problem could
  remove my progress recorded). Auto-save may take care of this, but I don't see
  why we wouldn't just save the results anyways.

  I found a solution on this [[https://emacs.stackexchange.com/questions/21754/how-to-automatically-save-all-org-files-after-marking-a-repeating-item-as-done-i][SO post]], which I have adopted slightly (mostly so I
  don't have a function named after a glyph I can't readily type).

  #+begin_src emacs-lisp :results none
    (defmacro unrest (fnc)
      "Return function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))
  #+end_src

  #+name: config/org-agenda-autosave
  #+begin_src emacs-lisp :results none
    (advice-add 'org-deadline       :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-schedule       :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-store-log-note :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-todo           :after (unrest #'org-save-all-org-buffers))
  #+end_src

* make day view default view
Taken from the documentation on =org-agenda-list=:

#+begin_quote
With a numeric prefix argument in an interactive call, the agenda will span ARG
days. Lisp programs should instead specify SPAN to change the number of days.
SPAN defaults to ‘org-agenda-span’.
#+end_quote

#+name: config/org-agenda-default-view
#+begin_src emacs-lisp :results none :tangle yes
(defun config/org-agenda-default-view ()
  (setq-default org-agenda-span 1)
  )
#+end_src

* last day of month expression
  =org-agenda= repeating timestamps lack an expression that allows them to
  target something such as the first Tuesday or last Monday of a month.

  [[https://emacs.stackexchange.com/questions/31683/schedule-org-task-for-last-day-of-every-month][This SO answer]] shows how it can be done using a diary expression.

  #+begin_src emacs-lisp
    ;;; ORG-MODE:  * My Task
    ;;;              SCHEDULED: <%%(diary-last-day-of-month date)>
    ;;; DIARY:  %%(diary-last-day-of-month date) Last Day of the Month
    ;;; See also:  (setq org-agenda-include-diary t)
    ;;; (diary-last-day-of-month '(2 28 2017))
    (defun diary-last-day-of-month (date)
      "Return `t` if DATE is the last day of the month."
      (let* ((day (calendar-extract-day date))
             (month (calendar-extract-month date))
             (year (calendar-extract-year date))
             (last-day-of-month
              (calendar-last-day-of-month month year)))
        (= day last-day-of-month)))
  #+end_src

  %%(diary-last-day-of-month date) Last Day of the Month

* last day of week for the month expression

  https://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month
  Example:
  # <%%(diary-float t 6 1)>
* use diary sexps
  In order to use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Sexp-Diary-Entries.html][sexp diary entries]], the documentation for
  [[https://orgmode.org/manual/Weekly_002fdaily-agenda.html][weekly and daily agenda views]] seems pretty clear.

  #+begin_src emacs-lisp
    (defun config/org-agenda-include-diary-sexp ()
      (setq org-agenda-include-diary t)
    )
  #+end_src

  Using diary functions slows down =org-agenda= significantly, and I'm skeptical
  that it will work with mobile applications such as BeOrg.

  This [[https://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/][post]] talks about =org-clone-subtree-with-time-shift= as a possible
  answer, which statically creates subtree copies.

  It should also be noted that if a heading is prefixed with time range or even
  a time stamp, that can help decorate the agenda with the appropriate time
  slots. For example:

  #+begin_example org
  *** 13:00-14:30 do a thing
  #+end_example

  This will make the diary sexp work within the agenda showing the time range.

  Ultimately I think setting up the time-shift function above and having some
  kind of =cron= job process my agenda files is the way to go.

  See more here, possibly: https://www.reddit.com/r/emacs/comments/86xh8c/what_is_your_calendar_setup/
* interface
** COMMENT hydra
=org-agenda= has a whole mess of keys that I can never remember. Hydra should
save the day here!

#+begin_src emacs-lisp :results none
(defhydra hydra-evil-org-agenda
  (:pre (hydra-stack-init)
   ;; foreign-keys set to run will pass through key bindings. This means
   ;; evil-mode keys will work as expected so long as they are not shadowed
   ;; here.
   :foreign-keys run
   :hint none
   )
  "
Org agenda

_r_ refile
_s_ schedule
_v_ view

_C-g_ quit org-agenda
"
  ("v"
       (progn
         (hydra-evil-org-agenda-view/body)
         (hydra-push '(hydra-evil-org-agenda/body))
         )
   "view"
   :exit t
   )
  ("r" (org-agenda-refile) "refile")
  ("s" (org-agenda-schedule (org-read-date-display)) "schedule")
  ("q"
   (message "q blocked - use C-g to quit.")
   :exit nil
   )
  ("C-g" (org-agenda-Quit) "quit" :exit t)
  )

(defhydra hydra-evil-org-agenda-view (
                                      :foreign-keys run
                                      :hint none
                                      )
  "
Org agenda view

^View^      ^Step^
^----^----  ^----^-------
_d_ day     _C-n_ later
_w_ week    _C-p_ earlier
_m_ month
_y_ year
^^

_C-g_ back one menu
"
  ("d" org-agenda-day-view)
  ("w" org-agenda-week-view)
  ("m" org-agenda-month-view)
  ("y" org-agenda-year-view)
  ("C-g" hydra-pop "exit" :exit t)
  ("C-n" org-agenda-later "Step later")
  ("C-p" org-agenda-earlier "Step earlier")
  ;; TODO: Make a navigation stack to push and pop, then use u and C-r to move
  ;; along it.
  ("q"
   (message "q blocked - use C-g to quit.")
   :exit nil
   )
  )

(message "[CONFIG] Registering Hydra for org-agenda...")
(add-hook 'org-agenda-mode-hook (lambda ()
                                  (message "entering org-agenda-mode")
    (if (hydra-stack-empty-p)
        (hydra-evil-org-agenda/body)
        (message "Hydra already open, skipping.")
      )
    )
  )
#+end_src
** COMMENT transient

#+begin_src emacs-lisp :results none
(defclass argh--variable (transient-variable)
  ((scope       :initarg :scope)))

(define-infix-command argh-set-query ()
  "Set the `query' variable in the source buffer."
  :class 'argh--variable
  :key "-q"
  :argument "--query="
  :variable 'query)

(define-transient-command argh-transient ()
  "Show transient for current buffer."
  ["Query"
   (argh-set-query)])

(cl-defmethod transient-infix-set ((obj argh--variable) value)
  "Set a variable."
  (let ((variable (oref obj variable)))
    (oset obj value value)
    (set (make-local-variable (oref obj variable)) value)
    (unless (or value transient--prefix)
      (message "Unset %s" variable))))

;; (transient-setup 'argh
;;                  nil
;;                  nil
;;                  "Argh - set a variable"
;;                  'argh-transient
;;                  )

;; (transient-setup 'org-dnd
;;                  nil
;;                  nil
;;   ;;               "Org D&D"
;;                  (transient-define-prefix 'initiative

;;                    )
;;                  )
#+end_src

* all together

#+begin_src emacs-lisp :results none :noweb yes
  (use-package "org-agenda"
    :defer t
    :init
    (require 'mu4e)
    :config
    <<config/org-agenda-autosave>>
    <<config/org-agenda-default-view>>
    ;; This is disabled until I can figure out how to make it more performant.
    ;; (config/org-agenda-include-diary-sexp)
    )
#+end_src
