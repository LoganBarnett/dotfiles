#+title:    org-agenda
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-12-12 Wed>
#+language: en
#+tags:     emacs config org-agenda

* COMMENT save buffers on changing todos

  Changes in =org-agenda= write to the buffers that own the original TODO items
  but they do not save the buffer (which means a crash or other problem could
  remove my progress recorded). Auto-save may take care of this, but I don't see
  why we wouldn't just save the results anyways.

  I found a solution on this [[https://emacs.stackexchange.com/questions/21754/how-to-automatically-save-all-org-files-after-marking-a-repeating-item-as-done-i][SO post]], which I have adopted slightly (mostly so I
  don't have a function named after a glyph I can't readily type).

  #+begin_src emacs-lisp :results none
    (defmacro unrest (fnc)
      "Return function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))
  #+end_src

  #+name: config/org-agenda-autosave
  #+begin_src emacs-lisp :results none
    (advice-add 'org-deadline       :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-schedule       :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-store-log-note :after (unrest #'org-save-all-org-buffers))
    (advice-add 'org-todo           :after (unrest #'org-save-all-org-buffers))
  #+end_src

* make day view default view
Taken from the documentation on =org-agenda-list=:

#+begin_quote
With a numeric prefix argument in an interactive call, the agenda will span ARG
days. Lisp programs should instead specify SPAN to change the number of days.
SPAN defaults to ‘org-agenda-span’.
#+end_quote

#+name: config/org-agenda-default-view
#+begin_src emacs-lisp :results none :tangle yes
(defun config/org-agenda-default-view ()
  (setq-default org-agenda-span 1)
  )
#+end_src

* last day of month expression
  =org-agenda= repeating timestamps lack an expression that allows them to
  target something such as the first Tuesday or last Monday of a month.

  [[https://emacs.stackexchange.com/questions/31683/schedule-org-task-for-last-day-of-every-month][This SO answer]] shows how it can be done using a diary expression.

  #+begin_src emacs-lisp
    ;;; ORG-MODE:  * My Task
    ;;;              SCHEDULED: <%%(diary-last-day-of-month date)>
    ;;; DIARY:  %%(diary-last-day-of-month date) Last Day of the Month
    ;;; See also:  (setq org-agenda-include-diary t)
    ;;; (diary-last-day-of-month '(2 28 2017))
    (defun diary-last-day-of-month (date)
      "Return `t` if DATE is the last day of the month."
      (let* ((day (calendar-extract-day date))
             (month (calendar-extract-month date))
             (year (calendar-extract-year date))
             (last-day-of-month
              (calendar-last-day-of-month month year)))
        (= day last-day-of-month)))
  #+end_src

  %%(diary-last-day-of-month date) Last Day of the Month

* last day of week for the month expression

  https://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month
  Example:
  # <%%(diary-float t 6 1)>
* use diary sexps
  In order to use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Sexp-Diary-Entries.html][sexp diary entries]], the documentation for
  [[https://orgmode.org/manual/Weekly_002fdaily-agenda.html][weekly and daily agenda views]] seems pretty clear.

  #+begin_src emacs-lisp
    (defun config/org-agenda-include-diary-sexp ()
      (setq org-agenda-include-diary t)
    )
  #+end_src

  Using diary functions slows down =org-agenda= significantly, and I'm skeptical
  that it will work with mobile applications such as BeOrg.

  This [[https://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/][post]] talks about =org-clone-subtree-with-time-shift= as a possible
  answer, which statically creates subtree copies.

  It should also be noted that if a heading is prefixed with time range or even
  a time stamp, that can help decorate the agenda with the appropriate time
  slots. For example:

  #+begin_example org
  *** 13:00-14:30 do a thing
  #+end_example

  This will make the diary sexp work within the agenda showing the time range.

  Ultimately I think setting up the time-shift function above and having some
  kind of =cron= job process my agenda files is the way to go.

  See more here, possibly: https://www.reddit.com/r/emacs/comments/86xh8c/what_is_your_calendar_setup/
* interface
** COMMENT hydra
=org-agenda= has a whole mess of keys that I can never remember. Hydra should
save the day here!

#+begin_src emacs-lisp :results none
(defhydra hydra-evil-org-agenda
  (:pre (hydra-stack-init)
   ;; foreign-keys set to run will pass through key bindings. This means
   ;; evil-mode keys will work as expected so long as they are not shadowed
   ;; here.
   :foreign-keys run
   :hint none
   )
  "
Org agenda

_r_ refile
_s_ schedule
_v_ view

_C-g_ quit org-agenda
"
  ("v"
       (progn
         (hydra-evil-org-agenda-view/body)
         (hydra-push '(hydra-evil-org-agenda/body))
         )
   "view"
   :exit t
   )
  ("r" (org-agenda-refile) "refile")
  ("s" (org-agenda-schedule (org-read-date-display)) "schedule")
  ("q"
   (message "q blocked - use C-g to quit.")
   :exit nil
   )
  ("C-g" (org-agenda-Quit) "quit" :exit t)
  )

(defhydra hydra-evil-org-agenda-view (
                                      :foreign-keys run
                                      :hint none
                                      )
  "
Org agenda view

^View^      ^Step^
^----^----  ^----^-------
_d_ day     _C-n_ later
_w_ week    _C-p_ earlier
_m_ month
_y_ year
^^

_C-g_ back one menu
"
  ("d" org-agenda-day-view)
  ("w" org-agenda-week-view)
  ("m" org-agenda-month-view)
  ("y" org-agenda-year-view)
  ("C-g" hydra-pop "exit" :exit t)
  ("C-n" org-agenda-later "Step later")
  ("C-p" org-agenda-earlier "Step earlier")
  ;; TODO: Make a navigation stack to push and pop, then use u and C-r to move
  ;; along it.
  ("q"
   (message "q blocked - use C-g to quit.")
   :exit nil
   )
  )

(message "[CONFIG] Registering Hydra for org-agenda...")
(add-hook 'org-agenda-mode-hook (lambda ()
                                  (message "entering org-agenda-mode")
    (if (hydra-stack-empty-p)
        (hydra-evil-org-agenda/body)
        (message "Hydra already open, skipping.")
      )
    )
  )
#+end_src
** COMMENT transient

#+begin_src emacs-lisp :results none
(defclass argh--variable (transient-variable)
  ((scope       :initarg :scope)))

(define-infix-command argh-set-query ()
  "Set the `query' variable in the source buffer."
  :class 'argh--variable
  :key "-q"
  :argument "--query="
  :variable 'query)

(define-transient-command argh-transient ()
  "Show transient for current buffer."
  ["Query"
   (argh-set-query)])

(cl-defmethod transient-infix-set ((obj argh--variable) value)
  "Set a variable."
  (let ((variable (oref obj variable)))
    (oset obj value value)
    (set (make-local-variable (oref obj variable)) value)
    (unless (or value transient--prefix)
      (message "Unset %s" variable))))

;; (transient-setup 'argh
;;                  nil
;;                  nil
;;                  "Argh - set a variable"
;;                  'argh-transient
;;                  )

;; (transient-setup 'org-dnd
;;                  nil
;;                  nil
;;   ;;               "Org D&D"
;;                  (transient-define-prefix 'initiative

;;                    )
;;                  )
#+end_src

* key bindings

#+name: config/org-agenda-map-clean
#+begin_src emacs-lisp :results none :exports code :tangle no
;; I give up.  I can't figure out how to override these blasted key bindings no
;; matter what I do.  So instead I'll just copy the whole function and comment
;; out the stuff I don't want.  I don't know why this has to be so hard.
;;
;; Actually, I figured out _why_ this is so difficult to override.  Motions are
;; kind of in their own special precidence, and thse bindings are _all_ defined
;; as motions!  Even though most are not.  This could be a good contribution
;; back to evil-collection.  I have not affected the fix here yet.
(defun evil-org-agenda-set-keys ()
  "Set motion state keys for `org-agenda'."
  (evil-set-initial-state 'org-agenda-mode 'motion)

  ;; Horizontal movements have little use, thus we can override "f" and "t".
  ;; "w", "b", "e", "ge" and their upcase counterparts are preserved.
  (evil-define-key 'motion org-agenda-mode-map
    ;; Unused keys: D, X

    ;; open
    (kbd "<tab>") 'org-agenda-goto
    (kbd "S-<return>") 'org-agenda-goto
    (kbd "g TAB") 'org-agenda-goto
    (kbd "RET") 'org-agenda-switch-to
    (kbd "M-RET") 'org-agenda-recenter

    (kbd "SPC") 'org-agenda-show-and-scroll-up
    (kbd "<delete>") 'org-agenda-show-scroll-down
    (kbd "<backspace>") 'org-agenda-show-scroll-down

    ;; motion
    "j" 'org-agenda-next-line
    "k" 'org-agenda-previous-line
    "gj" 'org-agenda-next-item
    "gk" 'org-agenda-previous-item
    "gH" 'evil-window-top
    "gM" 'evil-window-middle
    "gL" 'evil-window-bottom
    (kbd "C-j") 'org-agenda-next-item
    (kbd "C-k") 'org-agenda-previous-item
    (kbd "[[") 'org-agenda-earlier
    (kbd "]]") 'org-agenda-later

    ;; manipulation
    ;; We follow standard org-mode bindings (not org-agenda bindings):
    ;; <HJKL> change todo items and priorities.
    ;; M-<jk> drag lines.
    ;; M-<hl> cannot demote/promote, we use it for "do-date".
    "J" 'org-agenda-priority-down
    "K" 'org-agenda-priority-up
    "H" 'org-agenda-do-date-earlier
    "L" 'org-agenda-do-date-later
    "t" 'org-agenda-todo
    (kbd "M-j") 'org-agenda-drag-line-forward
    (kbd "M-k") 'org-agenda-drag-line-backward
    (kbd "C-S-h") 'org-agenda-todo-previousset ; Original binding "C-S-<left>"
    (kbd "C-S-l") 'org-agenda-todo-nextset ; Original binding "C-S-<right>"

    ;; undo
    "u" 'org-agenda-undo

    ;; actions
    ;; "dd" 'org-agenda-kill
    ;; "dA" 'org-agenda-archive
    ;; "da" 'org-agenda-archive-default-with-confirmation
    "ct" 'org-agenda-set-tags
    "ce" 'org-agenda-set-effort
    "cT" 'org-timer-set-timer
    "i" 'org-agenda-diary-entry
    ;; "a" 'org-agenda-add-note
    "A" 'org-agenda-append-agenda
    "C" 'org-agenda-capture

    ;; mark
    "m" 'org-agenda-bulk-toggle
    "~" 'org-agenda-bulk-toggle-all
    "*" 'org-agenda-bulk-mark-all
    "%" 'org-agenda-bulk-mark-regexp
    "M" 'org-agenda-bulk-unmark-all
    "x" 'org-agenda-bulk-action

    ;; refresh
    "gr" 'org-agenda-redo
    "gR" 'org-agenda-redo-all

    ;; quit
    "ZQ" 'org-agenda-exit
    "ZZ" 'org-agenda-quit

    ;; display
    ;; "Dispatch" can prefix the following:
    ;; 'org-agenda-toggle-deadlines
    ;; 'org-agenda-toggle-diary
    ;; 'org-agenda-follow-mode
    ;; 'org-agenda-log-mode
    ;; 'org-agenda-entry-text-mode
    ;; 'org-agenda-toggle-time-grid
    ;; 'org-agenda-day-view
    ;; 'org-agenda-week-view
    ;; 'org-agenda-year-view
    "gD" 'org-agenda-view-mode-dispatch
    "ZD" 'org-agenda-dim-blocked-tasks

    ;; filter
    "sc" 'org-agenda-filter-by-category
    "sr" 'org-agenda-filter-by-regexp
    "se" 'org-agenda-filter-by-effort
    "st" 'org-agenda-filter-by-tag
    "s^" 'org-agenda-filter-by-top-headline
    "ss" 'org-agenda-limit-interactively
    "S" 'org-agenda-filter-remove-all

    ;; clock
    "I" 'org-agenda-clock-in ; Original binding
    "O" 'org-agenda-clock-out ; Original binding
    "cg" 'org-agenda-clock-goto
    "cc" 'org-agenda-clock-cancel
    "cr" 'org-agenda-clockreport-mode

    ;; go and show
    "." 'org-agenda-goto-today ; TODO: What about evil-repeat?
    "gc" 'org-agenda-goto-calendar
    "gC" 'org-agenda-convert-date
    "gd" 'org-agenda-goto-date
    "gh" 'org-agenda-holidays
    "gm" 'org-agenda-phases-of-moon
    "gs" 'org-agenda-sunrise-sunset
    "gt" 'org-agenda-show-tags

    "p" 'org-agenda-date-prompt
    "P" 'org-agenda-show-the-flagging-note

    ;; 'org-save-all-org-buffers ; Original binding "C-x C-s"

    ;; Others
    "+" 'org-agenda-manipulate-query-add
    "-" 'org-agenda-manipulate-query-subtract))

#+end_src


#+name: config/org-agenda-map
#+begin_src emacs-lisp :results none :exports code :tangle no

(message "Setting up org-agenda-map overrides...")
;; (define-key org-agenda-mode-map "d" nil)
;; (define-key org-agenda-mode-map "dd" nil)
;; (define-key org-agenda-mode-map "da" nil)
;; (define-key org-agenda-mode-map "dA" nil)
;; (define-key org-agenda-mode-map "d" nil)
;; (define-key org-agenda-mode-map "r" nil)
;; (define-key org-agenda-mode-map "a" nil)
;; Some of these need to be undefined to work properly.  Here's one.
(define-key org-agenda-mode-map "b" nil)
;; Force the prefix to not be stupid.
(define-prefix-command 'my-org-agenda-d-prefix)
(define-key org-agenda-mode-map (kbd "d") 'my-org-agenda-d-prefix)
(define-prefix-command 'my-org-agenda-a-prefix)
(define-key org-agenda-mode-map (kbd "a") 'my-org-agenda-a-prefix)
(define-prefix-command 'my-org-agenda-r-prefix)
(define-key org-agenda-mode-map (kbd "r") 'my-org-agenda-r-prefix)
(define-prefix-command 'my-org-agenda-b-prefix)
(evil-define-key 'motion org-agenda-mode-map "b" 'my-org-agenda-b-prefix)
(map!
  :mode org-agenda-mode
  ;; Force overriding.
  ;; :map org-agenda-mode-map
  ;; :map general-override-mode-map
  ;; :map evil-make-intercept-map
  ;; :map evil-local-set-key
  ;; There's a lot of defaults in place but I wish to override them.
  ;; Notably, there's not a quick way to schedule things without using an Emacs
  ;; pedal.  Some things don't match what I would expect.  Under the odd
  ;; defaults, "s" is for filtering, "d" is for archiving (perhaps an extension
  ;; of "delete"?), and there's nothing to schedule at all, which is one of my
  ;; most used shortcuts.
  ;; Under the new bindings, "d" is for dates.  "r" is for refile.  "s" can
  ;; continue to be searching but I might move it to "f".

  ;; Try to make it see that it needs to create the prefix, since we blew away
  ;; the prior keymap.
  ;; "d" nil ;;
  (:prefix ("d" . "date + schedule")
    :desc "org-agenda-schedule" "s" #'org-agenda-schedule
    :desc "org-agenda-deadline" "S" #'org-agenda-deadline
    :desc "org-agenda-date-prompt" "d" #'org-agenda-date-prompt
    )
  (:prefix ("a" . "archive")
    :desc "org-agenda-archive-default" "A" #'org-agenda-archive-default
    :desc "org-agenda-toggle-archive-tag" "a" #'org-agenda-toggle-archive-tag
    :desc "org-agenda-archive-kill" "d" #'org-agenda-kill
    )
  (:prefix ("r" . "refile")
    :desc "org-agenda-refile" "r" #'org-agenda-refile
    )
  ;; It's not well understood why this doesn't work while the other ones do.
  (:prefix ("b" . "agenda-buffer")
    ;; This is reall a refresh.  You can also get to it via `g r'.
    :desc "org-agenda-redo (refresh)" "r" #'org-agenda-redo
    )
   )
(message "Setup org-agenda key map without error!")
#+end_src


* all together

#+begin_src emacs-lisp :results none :noweb yes
<<config/org-agenda-map-clean>>

(use-package org-agenda
  :defer t
  :init
  ;; Somehow "~/org" winds up getting added in.  I don't know who is doing this
  ;; and how I would stop it.
  ;; `org-agenda-files' is also modified in org-agenda-private.org in my private
  ;; repo.
  (setq
   org-agenda-files
   `(
     "~/notes/agenda.org"
     "~/notes/inbox.org"
     )
   )
  (require 'mu4e)
  ;; :hook
  ;; This is how you're supposed to override settings, lest you run into prefix
  ;; problems and the like.  This is not covered in the README of
  ;; evil-colleciton and I should add it.  The source is here:
  ;; https://github.com/emacs-evil/evil-collection/issues/214
  ;; Except it doesn't work :(
  ;; (evil-collection-setup . #'config/org-agenda-mode-map)
  :general
  :config
  (message "in org-agenda :config section...")
  (require 'evil-org-agenda)
  <<config/org-agenda-map-clean>>
  (evil-org-agenda-set-keys)
  (after! evil-org-agenda
    (condition-case err
    (eval '(progn
      <<config/org-agenda-map>>
      ))
      (error (message "Error with keymaps in org-agenda: %s" err))
      )
    )
  <<config/org-agenda-autosave>>
  <<config/org-agenda-default-view>>
  ;; This is disabled until I can figure out how to make it more performant.
  ;; (config/org-agenda-include-diary-sexp)
  )
#+end_src
