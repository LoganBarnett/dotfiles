#+title:     Projectile
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2020-10-27 Tue>
#+language:  en
#+file_tags:
#+tags:

Projectile gives Emacs project management capabilities. This includes searching,
selecting projects, and finding them.

* cache invalidation

Sometimes, especially during the early creation of a project, projectile
doesn't seem to know that it's in a project and ~projectile-acquire-root~
forces a prompting of the current project.  This is a logic error of some
sort.  Reloading the buffer seems to not work (or the reload isn't doing a
complete reload).

The below code is left for reference in case I need to do other things to fix
projectile.

#+name: config/projectile-invalidate-project-cache-current-project-fn
#+begin_src emacs-lisp :results none :exports code :tangle no
(defun config/projectile-invalidate-project-cache-current-project ()
  "Invalidate the project cache assuming `projectile-project-name'."
  (interactive)
  (projectile-invalidate-cache nil)
  )
#+end_src


* kill all buffers

Something has set =projectile-kill-buffers-filter= to =kill-only-files= which
means I typically have a bunch of =magit= buffers hanging around, or potentially
other things. I want those killed too, since I killed the project.

#+name: config/projectile-buffers-kill-all
#+begin_src emacs-lisp :results none :tangle no
(setq-default projectile-kill-buffers-filter 'kill-all)
#+end_src

* projects directories

You can use =SPC p D= to refresh this.

These are some projects that don't fall under =projectile-project-search-path=
but we'd love to have in our search path all the same. The number indicates the
depth, where 0 means the directory is the project, and 1 means the first level
of directories under that directory.

#+name: config/projectile-projects-directory
#+begin_src emacs-lisp :results none :tangle yes
(setq-default projectile-project-search-path
              '(
                ("~/dev" . 1)
                ("~/notes" . 0)
                ("~/work-notes" . 0)
                )
              )
#+end_src

* search for hidden files

I thought maybe this was too aggressive but it doesn't seem to be. A restart
seemed to solve my problem. Perhaps there was a delay?
* indexing

New versions of =fd= have colors. Pretty! But it messes up the =consul= UI with
a bunch of raw color codes. Disable color.
#+name: config/projectile-fd-turn-off-colors
#+begin_src emacs-lisp :results none
(setq-default
 projectile-git-fd-args
 "-H -0 -E .git -tf --strip-cwd-prefix --color never"
 )
#+end_src

This is for flailing, because Tramp or Projectile aren't very forthcoming when
there are errors. They show up in _a_ log, but not =*Messages*=. Check for a
=projectile= prefixed buffer for actual errors trying to find files. At time of
writing, there is not an obvious error that =projectile= cannot find =fd=, which
it assumes to be present on the remote host. Instead the search results will be
empty.

#+name: config/projectile-index-method
#+begin_src emacs-lisp :results none :tangle no
;; (setq-default projectile-indexing-method 'alien)
(setq-default projectile-indexing-method 'hybrid)
#+end_src

** over tramp

#+begin_src emacs-lisp :results none :tangle no

(defun config/projectile-dir-files-alien-debug (directory)
  "Get the files for DIRECTORY using external tools."
  (let ((vcs (projectile-project-vcs directory)))
    (message "vcs (again) %s" vcs)
    (cond
     ((eq vcs 'git)
      (let (
            (cmd (projectile-get-ext-command vcs))
            )
        (message "cmd %s" cmd)
          (nconc (projectile-files-via-ext-command directory cmd)
                (projectile-get-sub-projects-files directory vcs)))
      )
     (t (projectile-files-via-ext-command directory (projectile-get-ext-command vcs))))))

(defun config/projectile-dir-files-debug (directory)
  "List the files in DIRECTORY and in its sub-directories.
Files are returned as relative paths to DIRECTORY."
  (unless (projectile--directory-p directory)
    (error "Directory %S does not exist" directory))
  ;; check for a cache hit first if caching is enabled
  (let ((files-list (and projectile-enable-caching
                         (gethash directory projectile-projects-cache))))
    ;; cache disabled or cache miss
    (or files-list
        (let ((vcs (projectile-project-vcs directory)))
          (message "vcs %s" vcs)
          (message "indexing method %s" projectile-indexing-method)
          (pcase projectile-indexing-method
            ('native (projectile-dir-files-native directory))
            ;; use external tools to get the project files
            ('hybrid (projectile-adjust-files directory vcs (config/projectile-dir-files-alien-debug directory)))
            ('alien (config/projectile-dir-files-alien-debug directory))
            (_ (user-error "Unsupported indexing method `%S'" projectile-indexing-method)))))))

(defun config/projectile-project-files-debug (project-root)
  "Return a list of files for the PROJECT-ROOT."
  (let (files)
    ;; If the cache is too stale, don't use it.
    (when projectile-files-cache-expire
      (let ((cache-time
             (gethash project-root projectile-projects-cache-time)))
        (when (or (null cache-time)
                  (< (+ cache-time projectile-files-cache-expire)
                     (projectile-time-seconds)))
          (remhash project-root projectile-projects-cache)
          (remhash project-root projectile-projects-cache-time))))

    ;; Use the cache, if requested and available.
    (when projectile-enable-caching
      (setq files (gethash project-root projectile-projects-cache)))

    ;; Calculate the list of files.
    (when (null files)
      (when projectile-enable-caching
        (message "Projectile is initializing cache for %s ..." project-root))
      (setq files
            (if (eq projectile-indexing-method 'alien)
                ;; In alien mode we can just skip reading
                ;; .projectile and find all files in the root dir.
                (projectile-dir-files-alien project-root)
              ;; If a project is defined as a list of subfolders
              ;; then we'll have the files returned for each subfolder,
              ;; so they are relative to the project root.
              ;;
              ;; TODO: That's pretty slow and we need to improve it.
              ;; One options would be to pass explicitly the subdirs
              ;; to commands like `git ls-files` which would return
              ;; files paths relative to the project root.
              (cl-mapcan
               (lambda (dir)
                         (message "dir %s" dir)
                 (mapcar (lambda (f)
                           (let (name (file-relative-name (concat dir f)
                                               project-root))
                             (message "name %s" name)
                             name
                             )
                           )
                         (config/projectile-dir-files-debug dir)))
               (projectile-get-project-directories project-root))))

      ;; Save the cached list.
      (when projectile-enable-caching
        (projectile-cache-project project-root files)))

    ;;; Sorting
    ;;
    ;; Files can't be cached in sorted order as some sorting schemes
    ;; require dynamic data.  Sorting is ignored completely when in
    ;; alien mode.
    (if (eq projectile-indexing-method 'alien)
        files
      (projectile-sort-files files))))
(defun config/projectile--find-files-debug ()
  (interactive)
  (message "%s" (config/projectile-project-files-debug (projectile-acquire-root)))
  )
#+end_src


* stitch

#+begin_src emacs-lisp :results none :noweb yes
<<config/projectile-invalidate-project-cache-current-project-fn>>

(use-package projectile
  :ensure t
  :init
  <<config/projectile-fd-turn-off-colors>>
  <<config/projectile-index-method>>
  <<config/projectile-projects-directory>>
  <<config/projectile-buffers-kill-all>>
  (require 'counsel-projectile)
  (counsel-projectile-mode)
  (map!
    :after projectile
    :leader
    (:prefix ("p" . "projectile")
      :desc "Discover new projects" :n "D" #'projectile-discover-projects-in-search-path
      ;; :desc "Invalidate project cache" :n "I" #'config/projectile-invalidate-project-cache-current-project
      :desc "Invalidate project cache" :n "I" #'projectile-invalidate-cache
      ;; Order is sensitive here.  See docstring of map! for details.
      :desc "Find file by name" :n "f" #'counsel-projectile-find-file
      :desc "Kill project buffers" :n "k" #'projectile-kill-buffers
      :desc "Switch project" :n "p" #'counsel-projectile-switch-project
      )
   )
  (map!
   :after projectile
   :leader
   :prefix ("s" . "search")
   :desc "Find text in project" :n "p" #'counsel-projectile-rg
   )
  )
#+end_src
