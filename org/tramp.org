#+title:    Tramp Emacs Config
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-03-07 Wed>
#+language: en
#+tags:     config tramp ssh remote

* troubleshooting
** wrong type argument

Sometimes you will get a pile of errors like this when trying to open a remote
project:

#+begin_example
Wrong type argument: "Wrong type argument", "tramp-file-name /Users/muh-user/dev/dotfiles/org/projectile.org"
#+end_example

Run this to fix:

#+begin_src emacs-lisp :tangle no
(recentf-cleanup)
#+end_src

This might be better to not destroy everything:

#+begin_src emacs-lisp :tangle no
(tramp-recentf-cleanup)
#+end_src

or

#+begin_src emacs-lisp :tangle no :results none
(tramp-recentf-cleanup-all)
#+end_src

These aren't marked as interactive functions. Perhaps a pull request is in order!

* shell settings

Tramp logs in via =ssh= as one of its modes. When it does so, it interacts with
the shell over =ssh=. It doesn't understand custom prompts very well, let alone
things specific to =zsh=. Generally Tramp expects =bash=. This setting makes
Tramp use bash regardless of what the remote machine is set to use.

#+begin_src emacs-lisp
;; (setq-default explicit-shell-file-name "/bin/bash")
#+end_src

* directory variables

  By default using =.dir-locals.el= is disabled by default due to performance
  reasons. My work repos that I have less control over are the most demanding of
  custom settings though, so let's enable it.

  #+begin_src emacs-lisp
  (defun config/enable-remote-dir-locals ()
    (setq-default enable-remote-dir-locals t)
    )
  #+end_src
* file transfers
** large files
   Tramp tries to inline the transfer for certain files and use =scp= for
   others. Per this [[https://emacs.stackexchange.com/questions/22304/invalid-base64-data-error-when-using-tramp][SO post]], =scp= is preferred to use always. It fixes a
   problem I have run into where the last message is "Invalid base64 data".

#+begin_src emacs-lisp
(defun config/fix-tramp-large-file-issue ()
  (setq-default tramp-copy-size-limit nil)
)
#+end_src

* debugging

Tramp can be debugged with a verbose number. I know you can set it as high as
11, but is for maintainers only. 3 is the default which includes some connection
information.

It seems after running org-babel blocks, this gets reset to =1= so it may need
to be run again.

#+name: config/tramp-log-verbosity
#+begin_src emacs-lisp :tangle yes :results none
(setq-default tramp-verbose 5)
#+end_src

* troubleshooting
** huge recentf error

https://discourse.doomemacs.org/t/recentf-cleanup-logs-a-lot-of-error-messages/3273/6

#+begin_src emacs-lisp :results none
(after! tramp (advice-add 'doom--recentf-file-truename-fn :override
                          (defun my-recent-truename (file &rest _args)
                            (if (or (not (file-remote-p file)) (equal "sudo" (file-remote-p file 'method)))
                                (abbreviate-file-name (file-truename (tramp-file-local-name file)))
                              file))))
#+end_src

** max-specpdl-size

This is because it's trying to ssh to a host and there are no ssh keys to use.
Other ssh errors might also produce this issue. Make sure the ssh key is loaded
via =keychain= (which =ssh-add= should also handle).
** Tramp just hangs

See [[prompt recognition errors]] as it is a likely outcome.

** prompt recognition errors

Prompt recognition errors are tricky and not obvious. This is because Tramp will
try to move forward anyways but will fail.  Look closely using instructions
below to determine if you have this error.  Generally this will appear as a
hang - nothing gets done.

Note that the prompt can change on the fly _because you logged in earlier_ so
Tramp might work the first time but minutes later will be broken.

*** determining if you have a prompt recognition error

You will sometimes see this in the log (if verbosity is at least 3):

#+begin_example
10:50:22.239339 tramp-process-actions (3) # Waiting for prompts from remote shell...
#+end_example

If verbosity is higher, you will likely see a lot more spew after that with
verbosity around 5.

Then you can find the dreaded, actual error:
#+begin_example
10:50:30.712477 tramp-process-actions (3) # Waiting for prompts from remote shell...failed
#+end_example

Tramp will continue anyways but will fail. You may see a lot of this:

#+begin_example
10:50:34.852722 tramp-get-test-command (5) # Finding a suitable ‘test’ command
#+end_example

*** fixing the issue

You need to cleanup the prompt on the remote host.

**** fix =setlocale= issue

The =setlocale= issue looks like this when logging in manually:

#+begin_example
-bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)
#+end_example

macOS maintains a =/etc/ssh/ssh_config= which is a fool's errand to maintain.
It's rewritten on updates and perhaps other arbitrary events. However, this file
is applied _after_ the =~/.ssh/config= is applied, which means it wins
collisions. If it didn't, we could use =SendEnv= and a =-= prefix (such as
=SendEnv -LC_ALL=) to remove environment variables which cause the mixup here. I
have not found anything about making sure the user configuration takes
precedence, and frankly, I am surprised it works this way.

Instead, just login to the host and run the example below. It assumes you're on
macOS, using US English as your language and locale.

#+begin_src shell :exports code
sudo locale-gen en_US.UTF-8
#+end_src
**** squelch Ubuntu's MOTD

Ubuntu's MOTD can present information about updates, commands to run, etc.  This
can interfere with Tramp's prompt discovery.  Stop sending an MOTD by editing
=/etc/pam/sshd= and commenting out this line:

#+begin_example
session    optional     pam_motd.so  motd=/run/motd.dynamic
#+end_example

I have not found a way to ensure this banner is ignored when logging in
non-interactively.  My research has been basic, not thorough, though.
**** using a clean, non-interactive prompt

A snippet like this should be at the top of =~/.bashrc= or something similar for
other remote shells.  I found this is the case by default on Ubuntu setups (as
of which version, I do not know.

#+begin_src shell :results none :exports code
if [[ "$TERM" == "dumb" ]]; then
  PS1="$ "
  return
fi
#+end_src

Even with this, Tramp can still have problems with prompt discovery.
**** restart Emacs

From prior troubleshooting experience with Tramp as well as even trying to
address this bug - sometimes Tramp just holds onto something in a cache that
cannot be seen, and thus new outcomes cannot manifest.  Restart Emacs and maybe
things will just work.  This potentially has to be done after any fixes
mentioned here.



* ls and dired
Need to override this function because =cmd= is defined with =ls= first instead
of =gls= and there are no other means of overriding.

#+begin_src emacs-lisp
(defun override-tramp-get-ls-command ()
  (defun tramp-get-ls-command (vec)
    "Determine remote `ls' command."
    (message "Using monkey patched tramp-get-ls-command")
    (with-tramp-connection-property vec "ls"
      (tramp-message vec 5 "Finding a suitable `ls' command")
      (or
      (catch 'ls-found
        (dolist (cmd '("gls" "gnuls" "ls"))
    (let ((dl (tramp-get-remote-path vec))
          result)
      (while (and dl (setq result (tramp-find-executable vec cmd dl t t)))
        ;; Check parameters.  On busybox, "ls" output coloring is
        ;; enabled by default sometimes.  So we try to disable it
        ;; when possible.  $LS_COLORING is not supported there.
        ;; Some "ls" versions are sensible wrt the order of
        ;; arguments, they fail when "-al" is after the
        ;; "--color=never" argument (for example on FreeBSD).
        (when (tramp-send-command-and-check
          vec (format "%s -lnd /" result))
          (when (tramp-send-command-and-check
            vec (format
          "%s --color=never -al /dev/null" result))
      (setq result (concat result " --color=never")))
          (throw 'ls-found result))
        (setq dl (cdr dl))))))
      (tramp-error vec 'file-error "Couldn't find a proper `ls' command"))))
      )
#+end_src
* keybindings

Tramp freezes up for me quite frequently. When it does so, things like =helm=
don't work anymore either. It basically locks me out of using Emacs entirely. I
want to call =tramp-cleanup-all-connections= but =M-x= invokes =helm=, which
joins the freeze. I've been about to =C-g= out of the =helm= freeze, but I'm
still stuck in an Emacs instance that's effectively broken. I want a =SPC=
command control it, as those still work.

#+begin_src emacs-lisp
   (on-spacemacs
    (spacemacs/declare-prefix "aT" "tramp")
    (spacemacs/set-leader-keys (kbd "SPC a T c") 'tramp-cleanup-all-connections)
    )
#+end_src

* git-gutter

  I had some trouble with =git-gutter= when doing a =helm-ag= replace operation.
  I followed up on [[https://github.com/nonsequitur/git-gutter-plus/pull/39][this ticket]] and was able to "advice" these functions using
  the workarounds listed in there. It seems to have worked so far.

  Since updating packages, this happens when opening any file remotely. A second
  open makes it work, but that's very undesirable.

  #+begin_src emacs-lisp :results none
    (defun config/fix-tramp-git-gutter-interaction ()
      (interactive)
      (defun git-gutter+-remote-default-directory (dir file)
        (let* ((vec (tramp-dissect-file-name file))
                (method (tramp-file-name-method vec))
                (user (tramp-file-name-user vec))
                (domain (tramp-file-name-domain vec))
                (host (tramp-file-name-host vec))
                (port (tramp-file-name-port vec)))
           (tramp-make-tramp-file-name method user domain host port dir)))

      (defun git-gutter+-remote-file-path (dir file)
        (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
          (replace-regexp-in-string (concat "\\`" dir) "" file)))
      )
  #+end_src
* all together

#+begin_src emacs-lisp :results none :noweb yes
  (require 'use-package)
  (use-package "tramp"
    :init
    <<config/tramp-log-verbosity>>
    :config
    ;; Kept as reference in case some non-gnu system is in use.
    ;;
    ;; (setq-default insert-directory-program "/usr/local/bin/gls")
    (setq-default dired-use-ls-dired t)
    (setq-default dired-listing-switches "-al")
    ;; This should fix issues with stalling when bringing up helm while tramp is
    ;; connected. See
    ;; https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#why-is-spacemacs-hanging-on-startup
    (setq-default tramp-ssh-controlmaster-options
    "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
    ;; (override-tramp-get-ls-command)
    (config/fix-tramp-large-file-issue)
    (config/enable-remote-dir-locals)
    (config/fix-tramp-git-gutter-interaction)
  )

#+end_src

* link dump
https://github.com/flycheck/flycheck/issues/883#issuecomment-188248824
https://github.com/flycheck/flycheck/issues/181
