* config
** look and feel

The menu bar on MacOs has lots of diagnostic information on my machine. This
information is clipped if the menu options from the focused application is too
long. The stock Emacs menu options are enough to force the menu bar items to be
clipped on a 13" screen. Switching off =menu-bar-mode= doesn't remove all menu
bar items, but it disables enough that this isn't a problem.

#+BEGIN_SRC emacs-lisp :results none
(message "Disabling menu bar...")
(defun config/disable-menu-bar ()
  (menu-bar-mode -1)
  )
;; Cannot use a mode hook to disable, since even running with -1 hits the mode
;; hook. We may have to advice/replace it to keep it from coming up (probably
;; from some package trying to be too helpful).
(config/disable-menu-bar)
#+END_SRC

*** mode-line
#+BEGIN_SRC emacs-lisp
  ;; (paradox-require 'diminish nil t)
  ;; (setq-default diminish-mode-alist '(company-mode))
  ;; (eval-after-load "company-mode" '(diminish 'company-mode 'auto-complete-mode))
  ;; (eval-after-load 'yas-minor-mode '(diminish 'yas-minor-mode nil))
  ;; (with-eval-after-load 'company-mode
  ;;   (spacemacs|diminish 'company-mode nil))
  ;; (spacemacs|diminish 'yas-minor-mode nil)
  ;; (spacemacs|diminish 'flyspell-mode nil)
  ;; (spacemacs|diminish 'which-key-mode nil)
  ;; (spacemacs|diminish 'smartparens-mode nil)
  ;; (require 'delight)
  ;; (delight 'yas-minor-mode)
  ;; (require 'delight-powerline)
  ;; (when (paradox-require 'dim nil t)
  ;;                    (dim-minor-names '((
  ;;                                        yas-minor-mode "foo"
  ;;                                        company-mode ""
  ;;                                        flycheck-mode ""
  ;;                                        flyspell-mode "")))
  ;;                    )

  ;; turning off individual lighters doesn't work using the "blessed"
  ;; spacemacs|diminish function (see commented code above)
  ;; so just turn the damn thing off entirely
  (on-spacemacs (spaceline-toggle-minor-modes-off))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (setq-default spaceline-separator-dir-left '(left . left))
  ;; (setq-default spaceline-separator-dir-right '(right . right))
  (setq-default powerline-default-separator nil)
  (on-spacemacs (spaceline-compile))
#+END_SRC

** encryption
   #+BEGIN_SRC emacs-lisp :results none
     (require 'epa-file)
     (epa-file-enable)
     (defvar epa-pinentry-mode)
     (setq
       epa-pinentry-mode 'loopback
       pgp-gpg-use-agent t
       )
     (pinentry-start)
   #+END_SRC
** facebook-flow

Flow is a strict type system that sits on top of Javascript as an
additional develop-time only annotation syntax.

There's a Flow spacemacs layer currently configured elsewhere. I'm slowly
migrating things in.

Flow is designed for incrementally adding typing. Also some things can be typed
as =any=, which basically means Flow will not type check that variable. As such,
it's possible for a lack of typing to leak into the code. Being able to
visualize type coverage is a really handy tool. It can be printed from the
command line like so:

#+BEGIN_EXAMPLE bash
./node_modules/.bin/flow coverage path/to/foo.js
#+END_EXAMPLE

But we live in the civilized world of Emacs, so we can just visualize this
inline for a given JS file.

#+BEGIN_SRC emacs-lisp
  ;; Actually, none of this works right now because it's held up due to some big
  ;; changes desired in flycheck. See
  ;; https://github.com/flycheck/flycheck/issues/836
  ;; and
  ;; https://github.com/flycheck/flycheck/pull/789

  ;; (load-library "flycheck-flow")
  ;; (flycheck-add-next-checker 'javascript-flow 'javascript-flow-coverage)
#+END_SRC
** narrowing

By default the various =narrow= functions will produce a warning if used,
because it can be confusing when it happens. This can be alleviated with setting
=narrow-to-region='s =disabled= property(?) to =nil=.

#+name: config/narrow-to-region-disable-warning
#+begin_src emacs-lisp :results none
(put 'narrow-to-region 'disabled nil)
#+end_src
