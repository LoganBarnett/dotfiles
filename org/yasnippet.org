#+title:    yasnippet
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-09-11 Tue>
#+language: en
#+tags:     yasnippet emacs config

* fundamental-mode
  Per this [[https://github.com/joaotavora/yasnippet/issues/557][ticket]], =fundamental-mode= doesn't have a =fundamental-mode-hook=. We
  can get around this issue for emacs-wide snippets by adding a hook onto the
  =yasnippet= minor mode.

  #+begin_src emacs-lisp
    (defun config/yasnippet-fundamental-mode ()
      "Make sure we use snippets in `fundamental-mode' globally."
      (add-hook 'yas-minor-mode-hook
                (lambda ()
                  (yas-activate-extra-mode 'fundamental-mode)))
      )
  #+end_src
* file templates

** Doom's file-templates
File templates are templates that expand for new or blank files.  This is a
feature introduced in Doom via the =file-templates= editor module.

Setting the =+file-templates-dir= gives us the power to override the templates.
However this isn't a great way to support a mix of both private and official
packages.  An undocumented way to support overrides is to place a =__= file in
the appropriate snippet directory.  For specifically named files, =__<filename>=
works as well.  The key for these files is assumed to be =__= and we should
continue that when writing file templates.  Files with the =__<filename>=
pattern should use the same =__<filename>= as their key.

The above doesn't seem reliable anymore.

With this we override the directory and forego updates or a complete set of
templates.  It just doesn't seem to work with a custom set of templates.

There is an interactive =+file-templates/debug= function that can be run but it
doesn't print the conflicts, probably because having a custom directory
alongside the official one just isn't supported, or isn't supported wholly.

#+name: config/yasnippets-override-doom-template-dir
#+begin_src emacs-lisp :results none :tangle no
(on-doom
  (setq-default +file-templates-dir "~/dev/dotfiles/yasnippets")
  )
#+end_src

** yatemplate - yasnippets meets auto-insert-mode

=yatemplate= integrates with =yasnippets= directly.  I like this because it gets
me away from relying on Doom too much.  Doom is becoming increasingly difficult
to work with, in large part because it's too monolithic.  There is work being
done to break it all apart, but it's been years in the making, and probably
needs more years of work still.  It's also more or less completely documented.

The only problem with =yatemplate= is that it requires regular expressions
within the file names themselves.  Fortunately there is a [[https://github.com/piknik/yatemplate][fork by piknik]] which
addresses this by placing the configuration inside the template itself.

*** configuring yatemplate

=auto-insert-mode= is what =yatemplate= uses to hook itself in.

#+name: config/auto-insert-mode-enable
#+begin_src emacs-lisp :results none :tangle no
(auto-insert-mode t)
#+end_src

And then we need to actually pull in =yatemplate=.  I have experienced
difficulty getting =yatemplate= snippets to expand on a file opening.  I believe
this is because I had =yatemplate-dir= set to my =yasnippets= directory.
Forcing it to the default seems to have done the trick after an Emacs restart.
Additionally, be wary of =yas-reload-all=.  When called interactively, it
implies the =NO-JIT= argument.  This is documented but it's easy to miss and not
intuitive.

#+name: config/yatemplate
#+begin_src emacs-lisp :results none :tangle no :noweb yes
(defun yatemplate-reload-all-verify ()
  (interactive)
  (message "Actually calling yatemplate-reload-all...")
  (message "snippet dirs %s" yas/snippet-dirs)
  (yatemplate-reload-all)
  (message "auto-insert-alist (after hook): flake.nix %s"
           (assoc "flake.nix" auto-insert-alist)
           )
  (message "auto-insert-alist (after hook): *.org %s"
           (assoc "*.org" auto-insert-alist)
           )
  (message "auto-insert-alist (after hook): %s" auto-insert-alist)
  ;; (message "Done calling yatemplate-reload-all.")
  )

(use-package "yatemplate"
  :demand t
  ;; :after yasnippet
  :init
  (message "[CONFIG] Loading yatemplate settings...")
  (setq-default yatemplate-dir "~/.emacs.d/.local/cache/templates")
  <<config/auto-insert-mode-enable>>
  :config
  (add-hook 'yas-after-reload-hook #'yatemplate-reload-all-verify)
  <<config/yatemplate-yasnippet-guess-major-mode-fix>>
  ;; (yatemplate-reload-all)
  (message "auto-insert-alist (after initial reload): flake.nix %s"
           (assoc "flake.nix" auto-insert-alist)
  )
  (message "[CONFIG] Done loading yatemplate settings!")
  )
#+end_src

*** fix possible yatemplate bug

I have not filed an issue with this yet.

I noticed when pulling in =yatemplate= that I lose the ability to properly
select a major mode when compiling a template.  It always selects =snippet-mode=
and I cannot select any other mode.  This seems to be caused by
=yatemplate--find-file-hook= which just looks like a monkey patch on =yasnippet=
based on the comments.  I wish to un-monkey patch it, and perhaps I can later
figure out why it's causing a problem.

#+name: config/yatemplate-yasnippet-guess-major-mode-fix
#+begin_src emacs-lisp :results none :tangle no
;; Remove so we don't have increasing layers if we run again.
(advice-remove 'yatemplate--find-file-hook #'override-yatemplate--find-file-hook)
(defun override-yatemplate--find-file-hook ()
  ;; Yep, we do nothing here.
  )

(advice-add 'yatemplate--find-file-hook :override #'override-yatemplate--find-file-hook)
#+end_src


* allow require-file-newline

=require-file-newline= set to =nil= makes it such that I must add the newline to
the end of the file, instead of Emacs inserting it automatically. I use this in
my snippet template because I don't always want to insert a newline upon snippet
expansion.

We need to set this in advance so when =yasnippet= is loaded, it will also load
the snippets using this variable non-interactively. If it requires interaction
during startup, it appears that =yasnippet= simply skips the snippet in
question.

#+name: config/yasnippet-require-file-newline-mark-safe
#+begin_src emacs-lisp :results none
(add-to-list 'safe-local-variable-values
              '(require-file-newline . nil)
              )
#+end_src
* snippet dirs

#+name: config/yasnippet-snippet-dirs
#+begin_src emacs-lisp :results none
(setq-default +snippets-dir "~/dev/dotfiles/yasnippets")
#+end_src

* overriding default snippets

I think this can be done, but a [[https://emacs.stackexchange.com/a/66215][Stack Overflow answer]] seems to indicate that
might be otherwise.  I would prefer there to be some kind of load order or
shadowing I could use, but I am unsure.

My findings thus far have shown that if this seems to be happening, it is likely
that I have not named the key correctly, the file correctly, or both. See [[file
templates]] for more details on things like the =__= files.

* apply

  #+begin_src emacs-lisp :results none :noweb yes
    (require 'use-package)

    (use-package "yasnippet"
      :demand t
      :init
      <<config/yasnippets-override-doom-template-dir>>
      <<config/yasnippet-require-file-newline-mark-safe>>
      <<config/yasnippet-snippet-dirs>>
      ;; This gets crushed by Doom.  Leave for reference.
      (setq-default yas/snippet-dirs '("~/dev/dotfiles/yasnippets"))
      (message "Just set yas/snippet-dirs to %s" yas/snippet-dirs)
      (config/yasnippet-fundamental-mode)
      :config
      ;; Controlling when things get loaded and dependences (together) is best
      ;; accomplished by actually nesting the declaration.  This way we can
      ;; ensure that yatemplate is loaded by the time that we go to do
      ;; yas/reload-all/yas-recompile-all.  See
      ;; https://github.com/jwiegley/use-package/issues/315 for the official
      ;; run-down.
      <<config/yatemplate>>
      (yas-global-mode 1)
      (yas-recompile-all)
      ;; Set NO-JIT to `t' so that it actually reloads everything.  Without
      ;; this, we lose the yatemplates.
      (yas-reload-all t)
      )

  #+end_src
