#+title:     UI
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2019-09-03 Tue>
#+language:  en
#+file_tags: emacs config doom
#+tags:

* UI
  The UI section details configuration for Emacs' user interface.

  Since this is pretty core it should be called early in the startup sequence.
** deleting windowless frames
   When a frame loses its last window via =quit-window=, I want it to also kill
   the frame itself, rather than finding another window to display. This is
   really helpful for the hanging frames that I create.

   #+begin_src emacs-lisp :results none

     ;; ADVISE ORIGINAL (built-in):
     ;;
     ;; If WINDOW is the only one in its frame, `delete-frame'.
     ;; (defun quit-window-if-only-one-frame (around &rest args)
     ;;   "If WINDOW is the only one in its frame, then `delete-frame' too."
     ;;   (message "window is %s and one-window-p t is %s" (selected-window) (one-window-p t))
     ;;   (if (fboundp 'with-selected-window)   ; Emacs 22+
     ;;       (with-selected-window
     ;;           (or (car args) (selected-window))
     ;;         (if (one-window-p t) (delete-frame) (apply around args)))
     ;;     (save-current-buffer
     ;;       (select-window (or (car args) (selected-window)))
     ;;       (if (one-window-p t) (delete-frame) (apply around args))))
     ;;   )

     ;; (advice-add 'quit-window-if-only-one-frame :around #'quit-window)

     ;; (defadvice quit-window (around delete-frame-if-one-win activate)
     ;;   "If WINDOW is the only one in its frame, then `delete-frame' too."
     ;;   (if (fboundp 'with-selected-window)   ; Emacs 22+
     ;;       (with-selected-window
     ;;           (or (ad-get-arg 0)  (selected-window))
     ;;         (if (one-window-p t) (delete-frame) ad-do-it))
     ;;     (save-current-buffer
     ;;       (select-window (or (ad-get-arg 0)  (selected-window)))
     ;;       (if (one-window-p t) (delete-frame) ad-do-it))))

       ;; (defun my/kill-frame-if-last-buffer ()
       ;;   (if (one-window-p (window-frame))
       ;;     (delete-frame (window-frame))
       ;;     nil
       ;;   )
       ;; )

   #+end_src
** displaying fringes

Perhaps a Doom setting - right side fringes get set to 4 pixels via
=fringe-mode=. Setting the =fringe-mode= value to something much larger allows
the continuation fringes to be easily visible. Even with this extra column worth
of space taken, my Emacs windows still fit well at 80 columns.

The code below sets the right width and leaves the left width alone.

#+begin_src emacs-lisp :results none
(set-fringe-mode '(nil . 12))
#+end_src
