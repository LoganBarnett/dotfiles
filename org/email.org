#+title:    Email Emacs Configuration
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-01-31 Wed 06:48>
#+language: en
#+tags:     email config

* introduction

Expand [[mu4e]] to see the current configuration.

  There's a lot of benefits to using Emacs to read and write emails.

  1. I can use text and tagging to search for emails easily.
  2. I can keep keybindings that I am familiar with for both reading and writing
     emails.
  3. Copying text out of emails is easy.
  4. Writing emails can be done with =org-mode=, which means I can use code for
     composing some parts of emails.
  5. I can handle GPG encryption automatically.
  6. My emails can be stored in some universal open source format.
  7. Color scheme is dark.

  Reading and writing email is kind of the holy grail of Emacs configurations.
  Emacs can author emails in =org-mode= and then export them to some email
  format. Amusingly, I think one of the bigger reasons I want email inside of
  emacs right now is the combined vim bindings plus a dark color scheme. Once I
  have replaced Apple Mail as my primary email client, all I have remaining as a
  major hurdle is Apple Calendar, which I think I can replace with Emacs as well
  (but in time).

* tools used
** isync

   =isync= is a library/tool that syncs with an IMAP account (Gmail speaks
   IMAP). =isync= isn't the name of the executable itself. Instead this is
   =mbsync=, and generally I use it with =mbsync -a=. I've found a few blog
   posts to help get me started.

** mu4e

   =mu4e= is the Emacs interface for =mu=, which does email tagging and
   searching. I haven't set this up yet. It needs =mu= itself installed.

   I do have =mu= installed.

*** variables

I will be using =maildir-account-dir= quite a bit. To ensure this is used
globally, we use =defvar= up front to declare it.

#+name: config/maildir-account-dir-create
#+begin_src emacs-lisp :results none :tangle yes
(defcustom maildir-account-dir "unset"
  "The base mail directory in mu for an account."
  )
#+end_src

*** capture template
*** opening
Doom doesn't bind =mu4e= that I have seen.

#+name: mu4e-open
#+begin_src emacs-lisp :results none :tangle yes
(on-doom
 (map!
  :leader
  :prefix "o"
  "m" #'mu4e
  )
 )
#+end_src

*** line numbers when viewing
I need my line numbers.

#+name: mu4e-line-numbers
#+begin_src emacs-lisp :results none :tangle yes
(add-hook 'mu4e-headers-mode-hook #'display-line-numbers-mode)
#+end_src

*** archiving
Archiving in =mu4e='s vernacular is "refile". We can set the folder to go
to the "all mail" folder and then it will work like it should for =gmail=.

That said, this fixed directory doesn't work. We need to set this in contexts
(see private dotfiles for this configuration).
#+name: config/mu4e-gmail-refile-to-archives
#+begin_example emacs-lisp
;; (setq-default mu4e-refile-folder "/personal-gmail/[Gmail]/.All Mail")
#+end_example

*** capturing

Capturing an email allows us to save the email for later in a to-do form so we
can process it when time and priority permits. Then the message can be archived
immediately so we needn't worry about it anymore, and the mailbox needn't become
yet-another-to-do-list.

**** capture single email instead of query
=mu4e= can be configured to capture the query used to find the email if used
from =mu4e-headers-mode= (the view with the list of emails). We want to turn
that off, so we can capture anything from its header:

#+name: config/email-mu4e-link-to-message
#+begin_src emacs-lisp :results none
(setq org-mu4e-link-query-in-headers-mode nil)
#+end_src

It appears to be set to =nil= already by default. However we need to stop
relying upon defaults so when the default changes, we are not broken.

I lifted these settings from [[http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/][master-your-inbox-with-mu4e-and-org-mode]].

**** capture email link
#+name: config/email-mu4e-capture-template-add
#+begin_src emacs-lisp :tangle no :noweb yes
<<config/email-mu4e-remove-capture-template>>
(config/email-mu4e-remove-capture-template "e")
(add-to-list
 'org-capture-templates
 '("e"
    "email"
    entry
    (file "~/notes/inbox.org")
    ;; (file+headline "~/notes/inbox.org" "Tasks")
    "* TODO [#A] %?
SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))
%a
"
    )
 )
#+end_src

#+RESULTS: config/email-mu4e-capture-template-add
| e | email | entry | (file ~/notes/inbox.org) | * TODO [#A] %? |

This could be used for any arbitrary file capture, but I'd like to keep one
specifically reserved for emails. They could vary, and while emails can be
represented as files, I feel they are more specialized - there is strong
incentive to map more of the email out with a more sophisticated capture
template.

**** capture entire email
The stock template is a good base to start with, but I want some additional
features:
1. The timestamp of the email itself.
2. The email of the sender.
3. Do not schedule the heading.

I can make this as a different email template: An email record, which I can use
=E= instead of =e= to record.

#+begin_src emacs-lisp :results none :noweb yes :tangle no
<<config/email-mu4e-remove-capture-template>>
(config/email-mu4e-remove-capture-template "E")
(add-to-list
 'org-capture-templates
 `(
   "E"
   "Email record"
   entry
   (file+headline "~/notes/inbox.org" "Emails to Refile")
   ,(mapconcat
     'identity
     '(
       "* TODO [#A] Refile %:subject%?"
       "SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))"
       "** %:subject"
       "%:date-timestamp-inactive"
       "%a"
       )
     "\n"
     )
   )
 )
#+end_src

**** remove captures for iteration

=org-capture-templates= is not an =alist= so adding new templates means we just
have more templates. Re-running a declaration, especially while debugging, gives
us extra templates and we don't have a strong sense of what one is the right
one. So before we add a template we should attempt to remove its old one. This
functionality gives us that by removing the template by its shortcut.

#+name: config/email-mu4e-remove-capture-template
#+begin_src emacs-lisp :results none :tangle no
(defun config/email-mu4e-remove-capture-template (shortcut)
    (setq org-capture-templates (-remove (lambda (x)
               (string-equal (car x) shortcut)
               )
             org-capture-templates))
  )
#+end_src


*** completion

For completion (particularly for mail directories), =mu4e= defaults to using
=ido=, but I find this is not great for having more than one email account.
Instead, we fall back on the default, which should be =ivy= in my configuration.

#+name: config/mu4e-mail-directory-completion
#+begin_src emacs-lisp :results none
(setq mu4e-completing-read-function 'completing-read)
#+end_src


*** contacts
**** org-contacts
Contacts get synced somewhere by default, but I'm not sure where. That said
I have my own =org-contacts= file I wish to use. I can also add some
actions with =o= being the keybinding to add an =org-contact= contact per
the [[http://www.djcbsoftware.nl/code/mu/mu4e/Maintaining-an-address_002dbook-with-org_002dcontacts.html][documentation]].

#+begin_src emacs-lisp :results none
(defun config/mu4e-org-contacts ()
  (setq-default mu4e-org-contacts-file "~/notes/contacts.org")
  (add-to-list 'mu4e-headers-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t)
  )
#+end_src
**** auto-complete

*** mail dir
     By default =mu4e= looks for =~/Maildir= which is not where I have my mail
     synced.

#+begin_src emacs-lisp
(defun config/mu4e-set-maildir ()
  (setq-default mu4e-maildir (expand-file-name "~/mail"))
  (setq-default mu4e-change-filenames-when-moving t)
)
#+end_src

*** materials
http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/
http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/
https://github.com/syl20bnr/spacemacs/issues/6028 - I ran into this issue and
needed to modify the package directly.
http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/

*** images

     Turning on image support is simple.

#+begin_src emacs-lisp
(defun config/mu4e-enable-images ()
  (setq-default mu4e-view-show-images t)
  (setq-default mu4e-view-prefer-html t)
  ;; I think this needs to be registered first? Ensures.
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
  )
#+end_src

*** toggling plain-text
     Toggling to plain text is shadowed by =evil-mode=. For now let's provide an
     interactive function to handle it.

     #+begin_src emacs-lisp :results none
       (defun my/mu4e-view-plaintext ()
         "Provide an interactive toggle of plain text and html of mail messages."
         (interactive)
         (setq-default mu4e-view-show-images nil)
         (setq-default mu4e-view-prefer-html nil)
         (setq-default mu4e~view-html-text 'text)
         (setq-default mu4e~message-body-html 'text)
         (mu4e-view-refresh)
         )
     #+end_src

*** DONE add =get-mail= command to mu4e update command
     CLOSED: [2018-08-01 Wed 10:06]
     http://spacemacs.org/layers/+email/mu4e/README.html#configuration

     I should also look at other interesting settings there too.
*** TODO encryption and GPG key
*** deleting mail

#+name: config/mu4e-gmail-messages-delete
#+begin_src emacs-lisp :results none :tangle no
(defun config/mu4e-trash (*args)
  (concat
    maildir-account-dir
    maildir-account-trash-subdir
    )
  )
(setq mu4e-trash-folder #'config/mu4e-trash)
#+end_src

*** getting mail
=~/bin/mail-sync= gets email and then runs =mu= to perform indexing. This is
=mu4e= seems to run indexing on its own, so we can just use =mbsync -a= like
=mail-sync= uses. =-F= tells it to do a full sync, which includes deletions. If
it we do not sync deletions then it starts to fall out of sync and then
eventually will fail.

=INSIDE_EMACS= is an environment variable that [[https://github.com/gpg/pinentry/blob/779b8e6df7d2678d40bc61ba9e9ff35324a40d03/pinentry/pinentry-emacs.h#L31][pinentry looks for]]. This should
allow me to enter my password from Emacs directly when checking my mail. See
comment in [[https://github.com/djcb/mu/issues/829#issuecomment-524851533][mu#829]] for an example.

Setting this to ='ask= seems to work for both opening =gpg= encrypted files and
using email.

#+name: config/email-get-mail-command
#+begin_src emacs-lisp :tangle no :results none
(setq
 mu4e-get-mail-command (format "INSIDE_EMACS=%s mbsync -a -F" emacs-version)
 ;; `epa-pinentry-mode' is deprecated, but not mirrored by `epg-pinentry-mode',
 ;; so set them both.
 ;; 'loopbpack allows Emacs to use the minibuffer for the password entiy.
 epa-pinentry-mode 'loopback
 epg-pinentry-mode 'loopback
 )
(pinentry-start)
#+end_src

*** sending mail

#+begin_src emacs-lisp
  (defun config/send-email ()
    ;; TODO: Many settings are inherited from ../lisp/config-email.el - move them
    ;; here.
    (setq-default
      user-mail-address "logustus@gmail.com"
      user-full-name "Logan Barnett-Hoy"
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "logustus@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      )
    ;; This allows using `dired' to add attachments. When in `dired-mode', use
    ;; `gnus-dired-attach'. Instructions are more complicated but I'm not sure what
    ;; they are adding since the below is all I needed. See:
    ;; https://www.djcbsoftware.nl/code/mu/mu4e/Dired.html#Dired
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
  )
#+end_src
*** bookmarks

Bookmarks are the initial =b= shortcuts that quickly let me jump to certain
views. It doesn't come with one that just shows your inbox. I'm not a fan of
looking at "today's" email unless I can make sure I handle everything in a
single day.

**** declare bookmarks

We could use =mu4e-bookmark-define= but it doesn't allow setting =:hide-unread=
and friends. The function's primary value is that it overwrites old instances in
place, so we have to do it ourselves. Bookmarks are just associative lists
though, so it's easy enough for us to construct them ourselves.

=:hide-unread= is not respected when =:query= is used. See [[mu4e: show unread
count]] for how that is overridden/fixed.

#+name: config/mu4e-add-bookmarks
#+begin_src emacs-lisp :tangle no :results none
(setq mu4e-bookmarks
      (-remove (lambda (x)
                 (or
                  (string-equal (plist-get x :name) "inbox")
                  ;; "Today's messages" is the default, and not useful to me
                  ;; since it includes spam and already-archived messages.
                  (string-equal (plist-get x :name) "Today's messages")
                  (string-equal (plist-get x :name) "Today's inbox messages")
                  )
                 )
               mu4e-bookmarks))

(add-to-list 'mu4e-bookmarks
             '(
               :name "inbox"
               :query (lambda ()
                         (concat "maildir:"
                                 maildir-account-dir
                                 maildir-account-inbox-subdir)
                         )
               :key ?i
               :hide-unread nil
               )
             )

(add-to-list 'mu4e-bookmarks
             '(
               :name "Today's inbox messages"
               :query (lambda ()
                         (concat
                          "maildir:"
                          maildir-account-dir
                          maildir-account-inbox-subdir
                          " AND date:today..now"
                          )
                         )

               :key ?t
               :hide-unread nil
               )
             )
#+end_src

[[https://www.djcbsoftware.nl/code/mu/mu4e/Bookmarks.html][mu4e bookmarks docs]]

**** mu4e: show unread count

=mu4e= assumes that if you use =query= that =:hide-unread= should be forced. I'm
not in agreement here, so just disable it.

#+begin_src emacs-lisp :results none :tangle yes
(defun mu4e--start (&optional func)
  "Start mu4e.
If `mu4e-contexts' have been defined, but we don't have a context
yet, switch to the matching one, or none matches, the first. If
mu4e is already running, invoke FUNC (if non-nil).

Otherwise, check requirements, then start mu4e. When successful,
invoke
 FUNC (if non-nil) afterwards."
  (unless (mu4e-context-current)
    (mu4e--context-autoswitch nil mu4e-context-policy))
  (setq mu4e-pong-func (lambda (info) (mu4e--pong-handler info func)))
  (mu4e--server-ping
   (mapcar ;; send it a list of queries we'd like to see read/unread info for
    (lambda (bm)
      (funcall (or mu4e-query-rewrite-function #'identity)
               (plist-get bm :query)))
    ;; exclude bookmarks that are not strings, and with certain flags
    (seq-filter (lambda (bm)
                  ;; Logan's modification below. Doesn't work though, so
                  ;; commented out for now. I get "expected <string> but got
                  ;; <list> from the server...? Producing a query would be the
                  ;; next logical step.
                  ;; (and t
                  (and (stringp (plist-get bm :query))
                       (not (or (plist-get bm :hide)
				(plist-get bm :hide-unread)))))
                (append (mu4e-bookmarks)
                        (mu4e--maildirs-with-query)))))
  ;; maybe request the list of contacts, automatically refreshed after
  ;; reindexing
  (unless mu4e--contacts-set (mu4e--request-contacts-maybe)))
#+end_src


*** reading: indexing
     This should make reading emails faster. It may, but I've noticed it also
     makes messages in my inbox get lost sometimes. They aren't even in the
     all-mail section. The mail server still shows the message as present in the
     inbox. Removing these statements seems to have fixed it.

     #+begin_src emacs-lisp :results none
       (defun config/mu4e-indexing ()
         ;; (setq-default
          ;; mu4e-index-cleanup nil
          ;; mu4e-index-lazy-check t
          ;; )
         )
     #+end_src

*** reading: mail list
     This prevents scrolling to the next message if you scroll down too far.

     #+begin_src emacs-lisp :results none
       (defun config/mu4e-viewing ()
         (setq-default
          mu4e-view-scroll-to-next nil
          )
         )
     #+end_src

*** reading: format

This is the new way to display things with w3m. I have read tickets saying this
is documented officially but I couldn't find it.

#+name: config/mu4e-html2text-renderer
#+begin_src emacs-lisp :noweb yes :results none
(setq-default
  mu4e-html2text-command "w3m -dump -T text/html -o display_link_number=true"
  mm-text-html-renderer 'gnus-w3m
  )
#+end_src

These are older settings which are documented officially in some form or another.

#+begin_example emacs-lisp
(setq-default
  mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t org"
  mu4e-html2text-command "pandoc -f html -t org"
  mu4e-html2text-command 'mu4e-shr2text
  mm-text-html-renderer "w3m -dump -T text/html -o display_link_number=true"
  )
#+end_example

*** urls
=mu4e= uses numbered URLs, which are generally aggregated at the bottom of
a message. One can jump to these URLs under the standard keybindings, but
much of that is shadowed by =evil-mode=.

#+name: mu4e-goto-url
#+begin_src emacs-lisp :results none :tangle yes
(on-doom
 (map!
  :leader
  :map mu4e-view-mode-map
  :prefix "j"
  "u" #'mu4e-view-go-to-url
  )
 )
(on-spacemacs
 (evil-define-key 'evilified 'mu4e-view-mode
   (kbd "g u") 'mu4e-view-go-to-url
   )
 (evil-normalize-keymaps)
 (add-hook 'mu4e-view-mode #'evil-normalize-keymaps)
 )
#+end_src

*** writing
**** line wrapping
      Wrapping at 80 columns is king, but it's not without some management to
      make happen. By default =mu4e= seems to respect single line breaks when
      exporting to the email. This means email readers (such as gmail) will
      break the email at about 78 columns or so, which makes for very poor
      looking, jagged paragraphs. This is partly due to GMail's interaction with
      =format=flowed= for plain text emails, and the RFC governing it.

      Some additional reading:
      + [[https://www.djcbsoftware.nl/code/mu/mu4e/Writing-messages.html][mu4e docs on writing messages]]
      + [[https://mathiasbynens.be/notes/gmail-plain-text][GMail plain text and line wrapping]]
      + [[https://github.com/djcb/mu/issues/569][mu#569]] Support format=flowed on outgoing mails

***** unfill
       I like to edit my emails using =auto-fill-mode= and =fill-paragraph=.
       However we need to "unfill" just before ending. Fortunately a [[https://emacs.stackexchange.com/a/45380/14851][Stack
       Overflow answer]] already does this for us. Below is the code for that,
       mostly verbatim. I changed the call from =fill-paragraph= to
       =mu4e-fill-paragraph= since =fill-paragraph= does the opposite of what we
       want, and =mu4e-fill-paragraph= effectively does the "unfill".

     #+begin_src emacs-lisp :results none
       (defun config/mu4e-unfill-body ()
         (let ((fill-column most-positive-fixnum)
               (top ))
           (mu4e-compose-goto-top)
           (setq top (point))
           (mu4e-compose-goto-bottom)
           ;; now go backward by paragraph and unfill them unless the paragraph starts
           ;; with >
           (while (and (> (point) top)
                       (backward-paragraph))
             (unless (or (looking-at ">") (looking-at "-"))
               (mu4e-fill-paragraph))))
         )
     #+end_src

***** fill when writing
       For more line wrapping goodness, we need to set up =auto-fill-mode= in
       this buffer again, and also set =fill-column= to 72. 78 should be the
       target, but I'm trying to be conservative here. Once the email is sent,
       it should be "unfilled" (see [[unfill]]) so clients can respect line wraps
       properly.

       We also want to fill some arbitrary text if it was pasted in from a
       source that's not set to our =fill-column= beforehand. By default, =mu4e=
       remaps =M-q= (the standard =fill-paragraph= binding) to
       =mu4e-fill-paragraph=. We want to bring that back as well.

From some experimentation I found maybe =mu4e-compose-format-flowed= isn't
always what I want. More research is required. It would be nice to preserve
formatting I do myself (such as lists), and =mu4e-compose-format-flowed= as
=nil= is the way to accomplish that.

       #+begin_src emacs-lisp :results none

         (defun config/mu4e-prevent-hard-line-wrap-on-export ()
           "Sets `use-hard-newlines' to t for the mu4e buffer."
           (message "opting to use hardlines")
           (setq-default mu4e-compose-format-flowed nil)
           (add-hook
            'message-send-hook
            'config/mu4e-unfill-body
            )
           (add-hook
            'mu4e-compose-mode-hook
            (lambda ()
              (setq-local fill-column 72)
              (auto-fill-mode 1)
              (local-set-key (kbd "M-q") 'fill-paragraph)
              )
            )
           )
       #+end_src

From my findings on a forum regarding [[https://mu-discuss.narkive.com/tQ3DpgrD/auto-fill-mode-not-working][auto-fill-mode-not-working]], the answer
seems to be to disable =comment-auto-fill-only-comments= in =mu4e:compose-mode=.

#+name: config/mu4e-auto-fill-comments-disable
#+begin_src emacs-lisp :results none :tangle no
(defun config/comment-auto-fill-disable ()
  (setq-local comment-auto-fill-only-comments nil)
  )
(add-hook 'mu4e-compose-mode-hook #'config/comment-auto-fill-disable)
#+end_src

***** unfill woes

       Sometimes the paragraph doesn't wrap properly. I've included an example
       below. I'm not sure this is a great problem, nor how it should be fixed.
       I haven't seen it in normal text yet, and I think line wrapping still
       works on clients in most cases. The important part is it doesn't hard
       wrap *abruptly*.

       #+begin_quote
       Pellentesque dapibus suscipit ligula. Donec posuere augue in quam.
       Etiam vel tortor sodales tellus ultricies commodo. Suspendisse potenti.
       Aenean in sem ac leo mollis blandit. Donec neque quam, dignissim in,
       mollis nec, sagittis eu, wisi. Phasellus lacus. Etiam laoreet quam sed
       arcu. Phasellus at dui in ligula mollis ultricies. Integer
       placerat tristique nisl. Praesent augue. Fusce commodo. Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor
       vitae lacus. Nullam libero mauris, consequat quis, varius et, dictum id,
       arcu. Mauris mollis tincidunt felis. Aliquam feugiat tellus ut
       neque. Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus,
       et dictum nunc justo sit amet elit.
       #+end_quote
**** prevent replying to self during reply-all

      We shouldn't reply to ourselves when doing a reply. This also requires
      that we know what our email address is, which seems to be the combination
      of =user-mail-address= and =mu4e-user-mail-address-list=. One of them is
      host dependent (which can change on local network switching, I think).

      #+begin_src emacs-lisp :results none
        (defun config/mu4e-composing ()
          (setq-default
            mu4e-compose-dont-reply-to-self t
            mu4e-user-mail-address-list '("logustus@gmail.com")
            )
          )
      #+end_src
*** evilication

     #+begin_src emacs-lisp :results none
       (defun config/mu4e-evilify-evil-window-prefix ()
         "Setup window prefixed commands"
         (interactive)
         ;; The docs state you can use the mode name directly instead of a map within
         ;; it. This resolves problems where certain modes seem to ignore
         ;; `evil-define-key'.
         ;; https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately
         (mapc
          (lambda (keymap)
            (evil-define-key 'evilified keymap
              (kbd "C-w h") 'evil-window-left
              (kbd "C-w j") 'evil-window-down
              (kbd "C-w k") 'evil-window-up
              (kbd "C-w l") 'evil-window-right
              (kbd "C-w v") 'evil-window-vsplit
              (kbd "C-w s") 'evil-window-split
              (kbd "C-w =") 'balance-windows
              ;; TODO: More to come with other window functions.
              ;; TODO: Consider using https://github.com/emacs-evil/evil-collection
              ;; TODO: Consider generalizing this for other modes
              )
            )
          '(mu4e-view-mode-map mu4e-headers-mode-map)
          )
         (evil-normalize-keymaps)
         (message "window prefix configured")
         )
     #+end_src
*** key bindings

There's a lot of good and evilified key bindings in =mu4e=, but I want one more:
Marking messages as spam. I could just move them using that normal operation,
but it's two steps. Plus I have to think about it now that I'm managing multiple
email accounts with =mu=. This should be smart enough to use the current
mailbox/context.

#+name: config/mu4e-mark-for-spam
#+begin_src emacs-lisp :results none :tangle yes
(defun config/mu4e-spam (*args)
  (concat
    maildir-account-dir
    maildir-account-spam-subdir
    )
  )
(setq-default mu4e-spam-folder #'config/mu4e-spam)

(defun mu4e-get-spam-folder (&optional msg)
  "Get the spam folder, optionallly based on MSG.
See `mu4e-trash-folder'."
  (concat
    maildir-account-dir
    maildir-account-spam-subdir
    )
  )

(add-to-list 'mu4e-marks '(spam
                           :char
                           ("p" . "s")
                           :prompt "spam"
                           :dyn-target
                           (lambda (target msg)
                             (mu4e-get-spam-folder msg)
                             )
                           :action
                           (lambda (docid msg target)
                             (mu4e--server-move docid
                                                (mu4e--mark-check-target target)
                                                "-N"
                                                )
                             )
                             )
                           )
(mu4e~headers-defun-mark-for spam)
(define-key mu4e-headers-mode-map (kbd "p") 'mu4e-headers-mark-for-spam)
(on-doom
 (map!
  :map
  mu4e-headers-mode-map
  :n "p"
  #'mu4e-headers-mark-for-spam
  )
 )
#+end_src

*** look at the path for mu

The default =mu= binary directory defaults to =/usr/local/bin/mu= which might
not always be the case. For me it is setup via =nix=. Instead of hardcoding a
=nix= path, let's just look at =PATH= for it.

#+name: config/set-mu-path
#+begin_src emacs-lisp :results none :tangle yes
(setq mu4e-mu-binary (executable-find "mu"))
#+end_src
*** troubleshooting

**** mu4e version mismatch with mu binary

Run his block to clear an errant install of =mu4e=. I don't know what's causing
this yet, or if this was a one-time thing. Runs of =doom upgrade= might have
laid this file down again, but I haven't checked.

#+begin_src shell :results output :tangle no :var emacsVersion=(print emacs-version)
rm -rfv ~/.doom-emacs.d/.local/straight/$emacsVersion/mu4e
#+end_src

---- trim or store below

Sometimes during an upgrade, you'll see a version mismatch between =mu= and
=mu4e=. I don't think =mu4e= directly queries the binary but instead looks on
disk. If the index is of an old version, it assumes the server is of an old
version and quits with a somewhat misleading error message.

Running =mu server= directly reveals the real error: The index is out of date
and needs to be reinitialized. This can be done using the same =mu init ...=
invocation found in [[file:../install-email.sh]].

Oh and you also need to force the version. I'm not sure what's up with that.
Help on =mu4e-mu-version= is a "variable without a source file". Weird! I should
probably file a bug.

We'll apply the workaround here.

#+name: config/fix-mu4e-version-mismatch
#+begin_src emacs-lisp :results none :tangle yes
;; (setq mu4e-mu-version "1.8.5")
  ;; (defalias 'mu4e~start 'mu4e--start)
  ;; (defalias 'mu4e~stop 'mu4e--stop)
  ;; (defalias 'mu4e~check-requirements 'mu4e--check-requirements)
  ;; (defalias 'mu4e~proc-sentinel 'mu4e--server-sentinel)
  ;; (defalias 'mu4e~proc-start 'mu4e--server-start)
  ;; (defalias 'mu4e~proc-eat-sexp-from-buf 'mu4e--server-eat-sexp-from-buf)
  ;; (defalias 'mu4e~pong-handler 'mu4e--pong-handler)
  ;; (defalias 'mu4e~main-view 'mu4e--main-view)
  ;; (defalias 'mu4e~main-view-real 'mu4e--main-view-real)
  ;; (defalias 'mu4e~main-view-real-1 'mu4e--main-view-real-1)
  ;; (defalias 'mu4e~main-menu 'mu4e--main-menu)
  ;; (defalias 'mu4e~main-action-str 'mu4e--main-action-str)
  ;; (defalias 'mu4e~main-redraw-buffer 'mu4e--main-redraw-buffer)
  ;; (defalias 'mu4e~proc-move 'mu4e--server-move)
  ;; (defalias 'mu4e~mark-check-target 'mu4e--mark-check-target)
  ;; (defalias 'mu4e~maildirs-with-query 'mu4e--maildirs-with-query)
  ;; (defalias 'mu4e~longest-of-maildirs-and-bookmarks 'mu4e--longest-of-maildirs-and-bookmarks)
  ;; (defalias 'mu4e~update-timer 'mu4e--update-timer)
#+end_src

This doesn't do the trick. The actual local code is in disagreement here. It's
not just the version string out of whack. =mu --version= shows the correct
version. =mu4e= does not.

*** apply mu4e

#+begin_src emacs-lisp :results none :noweb yes

  (defun gmail-archive ()
    "Archive the current or marked mails.
  This moves them into the All Mail folder."
    (interactive)
    (gnus-summary-move-article nil "nnimap+imap.gmail.com:personal-gmail-archives"))

  (defun gmail-report-spam ()
    "Report the current or marked mails as spam.
  This moves them into the Spam folder."
    (interactive)
    (gnus-summary-move-article nil "nnimap+imap.gmail.com:personal-gmail-spam"))

  (require 'use-package)
  (message "initializing mu4e with use-package...")
  (use-package "mu4e"
    :init
    <<mu4e-open>>
    <<config/maildir-account-dir-create>>
    <<config/mu4e-mark-for-spam>>
    <<config/email-mu4e-capture-template-add>>
    <<config/email-mu4e-link-to-message>>
    <<config/mu4e-auto-fill-comments-disable>>
    <<config/mu4e-add-bookmarks>>
    <<config/mu4e-gmail-messages-delete>>
    <<config/mu4e-mail-directory-completion>>
    <<config/set-mu-path>>
    <<config/force-mu4e-mu-version>>
    <<config/mu4e-gmail-refile-to-archives>>
    <<config/email-get-mail-command>>
    <<config/mu4e-html2text-renderer>>
    :config
    (message "initializing mu4e...")
    (require 'org-mime)
    ;; (config/mu4e-enable-images)
    (config/mu4e-set-maildir)
    (config/send-email)
    (config/mu4e-evilify-evil-window-prefix)
    (config/mu4e-indexing)
    (config/mu4e-viewing)

    (load-library "my-utils")
    ;; No idea why setq-local is needed here, and elsewhere defvar-local works.
    ;; This would be a great question for the emacs user group.

    (setq-local key-id
                (my-utils/get-string-from-file  "~/dev/dotfiles-private/key-id.txt")
                )
    (message "loaded key id %s" key-id)
    (require 'epg-config)
    (require 'mml-sec)
    (setq-default
    user-mail-address "logustus@gmail.com"
    mml-2015-signers key-id
    mml2015-use 'epg
    ;; epg-user-id "???" ; Was "gpg_key_id" in docs: https://www.djcbsoftware.nl/code/mu/mu4e/Reading-messages.html
    mml2015-sign-with-sender t
    gnus-select-method
    '(nnimap "personal-gmail"
              (nnimap-address "imap.gmail.com")
              (nnimap-server-port 993)
              (nnimap-stream ssl)
              )
    ;; u 41E46FB1ACEA3EF0 Logan Barnett (gpg key) <logustus@gmail.com>
    smtpmail-smtp-server "smtp.gmail.com"
    smtpmail-smtp-service 587
    message-send-mail-function 'smtpmail-send-it
    ;; nntp-authinfo-file "~/.nntp-authinfo.gpg"
    nntp-authinfo-file "~/.authinfo.gpg"
    ;; Gmail system labels have the prefix [Gmail], which matches the default
    ;; value of gnus-ignored-newsgroups. That's why we redefine it.
    ;; gnus-ignored-newsgroups "^to\\.\\|^[0-9. 	]+\\( \\|$\\)\\|^[\"][\"#'()]"
    gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]"
    ;; The agent seems to confuse nnimap, therefore we'll disable it.
    gnus-agent nil
    ;; We don't want local, unencrypted copies of emails we write.
    gnus-message-archive-group nil
    ;; We want to be able to read the emails we wrote.
    mml2015-encrypt-to-self t
    ;; mu4e-view-prefer-html nil
    ;; mu4e-html2text-command "html2text -utf8 -width 72"
    ;; mu4e-html2text-command "html2markdown | grep -v '&nbsp_place_holder;'"

    ;; This is a MacOS specific solution. It just flattens the text so it's not
    ;; very preferable, but unlike the shr stuff, it doesn't create a bunch of
    ;; hanging file handles that require a reboot sometime later.
    ;; mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout"
    ;; mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum
    )
    ;; Attempt to encrypt all the mails we'll be sending.
    (add-hook 'message-setup-hook 'mml-secure-message-encrypt)

    (config/mu4e-prevent-hard-line-wrap-on-export)
    (config/mu4e-org-contacts)
    <<mu4e-goto-url>>
    <<mu4e-line-numbers>>
    (message "done initializing mu4e")
    )
#+end_src

** notmuch                                                          :ARCHIVE:

   =notmuch= is installed as a =spacemacs= layer. There's a
   [[https://github.com/cmiles74/spacemacs-notmuch-layer][spacemacs-notmuch-layer]] repository for this, as it is not built in. Not much
   is just a way of navigating and tagging emails. It doesn't handle the
   syncing.

   Aside from the layer linked above, there's also a =notmuch= layer sitting in
   the =develop= branch of Spacemacs [[https://github.com/syl20bnr/spacemacs/issues/2163][spacemacs #2163]]. It has not made its way to
   a release branch yet.

*** keybindings

    The keybindings here are in sore need of love for something that works for
    my muscle memory.

    |   |   |   |
    |---+---+---|
    | s |   | search emails |
    |   |   |   |
    |   |   |   |
    |   |   |   |

* research

  - [[https://www.reddit.com/r/emacs/comments/4rl0a9/email_in_emacs_i_want_to_but_wow_its_overwhelming/d52q08p/][IceDane's Emacs email setup]] :: =IceDane= has very good rationale of the
       setup they use and goes through all of the things they have tried. I want
       to closely follow this setup.
  - [[https://notmuchmail.org/notmuch-emacs/][notmuch Emacs interface]] :: Official documentation for using =notmuch= with
       Emacs.
  - [[https://wiki.archlinux.org/index.php/Isync][ArchLinux isync config]] :: Tutorial on setting up =isync=.
  - [[http://www.ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html][Adolfo Villafiorita's IMAP in Emacs + MacOS setup]] :: This has been a rich
       trove of information about a setup similar to =IceDane='s. It includes a
       little bit alternatives and also different approaches with additional
       passes on existing configs (such as adding oauth support via Gmail).
  - [[https://www.reddit.com/r/emacs/comments/7me0vn/help_configuring_mbsyncrc_for_gmail_on_osx/][isync "unknown section keyword" problem]] :: I ran into this problem. The fix
       is that sections are grouped together by a lack of an extra line break.
       Extra linebreak (two in a row) means there's a new section.
  - [[https://docwhat.org/el-capitan-and-the-evils-of-openssl/][OpenSSL and CertificateFile]] :: Homebrew provides a pem file that can be used
       in the =CertificateFile= field for =.mbsyncrc= (=isync='s config file).
       This gives us the root certificate authority needed to establish a chain
       of trust with gmail's certificates.

* alternative tools

*** gnus

    I have tried =gnus= which is built into Spacemacs as a layer. =gnus= is
    meant as more of an RSS aggregator than anything else. I had a lot of
    trouble syncing with Gmail, writing emails, and reading them. The
    documentation for evilication is sparse at best, and I just get the feel
    that while using =gnus= for email is clever, it just feels like stretching a
    tool to be something it isn't.
* reference

  - [[https://www.emacswiki.org/emacs/NotMuch][Emacs Wiki - NotMuch]] :: Has some scripts that might be helpful later, and
       links to other sources and integrations with other tools.
  - [[https://github.com/tjim/nevermore][nevermore]] :: A =notmuch= interface for Emacs. I'm not sure what it provides
       over the =notmuch= official Emacs plugin yet. =company= support?
  - [[https://github.com/cmiles74/spacemacs-notmuch-layer][Spacemacs notmuch layer]] :: =notmuch= for Spacemacs. Use =SPC a n= to activate.
  - [[https://notmuchmail.org/notmuch-emacs/][notmuch-emacs]] :: Official docs on setting up =notmuch= with Emacs.
* artifacts
