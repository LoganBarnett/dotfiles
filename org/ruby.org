#+title:     Ruby
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2021-02-17 Wed>
#+language:  en
#+file_tags:
#+tags:

* ruby

The module provided in Doom isn't as flexible as I'd have liked. Instead of
trying to hack it until it works, this file will serve as my configuration. At
some point I could put together a pull request, but I need it working for me
first.

** indentation

See [[file:./prog-mode.org::*indent align fix]] for a description of alignment in
Emacs in a general sense.

Typical Emacs indentation has this hanging style of indentation which offers
zero benefit to line width. Fix it to use a traditional staggered indentation.

These variables below are documented ways of fixing the continuation
indentation, but they don't seem to work. I'm told =smie= is perhaps the
culprit, but I've yet to find good documentation on how to address it.

Just switching to =enh-ruby-mode= seems to do the trick though. So far I have
noticed no shortcomings.

#+name: config/ruby-mode-fix-hanging-indentation
#+begin_src emacs-lisp :results none :tangle no
(setq-default
 ruby-deep-arglist nil
 ruby-deep-indent-paren nil
 ruby-block-hanging-re nil
 ruby-deep-indent-paren-style nil
 enh-ruby-deep-indent-paren nil
  enh-ruby-hanging-brace-indent-level 2
  enh-ruby-hanging-indent-level 2
  enh-ruby-deep-indent-construct nil
ruby-smie-grammar '((:smie-closer-alist
  ("def" . "end")
  ("begin" . "end")
  ("do" . "end")
  ("class" . "end")
  ("module" . "end")
  ("for" . "end")
  ("[" . "]")
  ("{" . "}")
  ("while" . "end")
  ("until" . "end")
  ("unless" . "end")
  ("if" . "end")
  ("case" . "end")
  ("opening-|" . "closing-|"))
 ("**" 372 383)
 ("%" 346 359)
 ("/" 347 360)
 ("*" 348 361)
 ("-" 322 334)
 ("+" 323 335)
 (">>" 298 310)
 ("<<" 299 311)
 ("|" 272 285)
 ("&" 273 286)
 ("^" 274 287)
 ("<=" 242 258)
 ("<" 243 259)
 (">=" 244 260)
 (">" 245 261)
 ("!~" 246 227)
 ("=~" 247 228)
 ("!=" 213 229)
 ("===" 214 230)
 ("==" 215 231)
 ("<=>" 216 200)
 ("||" 188 201)
 ("&&" 189 202)
 ("..." 150 176)
 (".." 151 177)
 ("||=" 152 126)
 ("&&=" 153 127)
 (">>=" 154 128)
 ("<<=" 155 129)
 ("^=" 156 130)
 ("|=" 157 131)
 ("&=" 158 132)
 ("**=" 159 133)
 ("%=" 160 134)
 ("/=" 161 135)
 ("*=" 162 136)
 ("-=" 163 137)
 ("+=" 164 138)
 ("closing-|" 0
  (405))
 ("opening-|"
  (406)
  0)
 ("when" 17 17)
 ("elsif" 15 15)
 ("else" 28 29)
 ("then" 30 41)
 ("=>" 104 103)
 ("in" 407 63)
 ("rescue" 16 16)
 ("ensure" 16 16)
 ("case"
  (408)
  1)
 ("if"
  (409)
  1)
 ("unless"
  (410)
  1)
 ("until"
  (411)
  1)
 ("while"
  (412)
  1)
 ("{"
  (413)
  1)
 ;; ("["
 ;;  (414)
 ;;  1)
 ("["
  (414)
  1
  )
 ("for"
  (415)
  1)
 ("module"
  (416)
  1)
 ("class"
  (417)
  1)
 ("do"
  (418)
  1)
 ("begin"
  (419)
  1)
 ("def"
  (420)
  1)
 ("?" 165 4)
 ("," 91 91)
 ;; ("," (91) 0)
 ("=" 115 102)
 (" @ " 421 77)
 ("." 394 394)
 ("end" 1
  (422))
 ("}" 1
  (423))
 ("]" 1
  (424))
 (":" 4 139)
 ("or" 64 78)
 ("and" 65 79)
 (";" 52 52)
 ("iuwu-mod" 66 80)
 ;; ("->" (425) 0)
 )
)
#+end_src

** multi-line

#+name: config/ruby-multi-line-strategy
#+begin_src emacs-lisp :results none :tangle no
(setq-default multi-line-ruby-strategy multi-line-current-strategy)
#+end_src

#+name: config/ruby-multi-line-strategy-hook
#+begin_src emacs-lisp :results none :tangle no :noweb yes
(defun config/multi-line-ruby-strategy ()
  <<config/ruby-multi-line-strategy>>
  )
(add-hook 'ruby-mode-hook #'config/multi-line-ruby-strategy)
#+end_src

** prettier

Instead of the standard =rubocop=, I prefer to let the machine do the hard work
of formatting. To that effect there is [[https://github.com/prettier/plugin-ruby][prettier for ruby]], which I am happy to
employ.

*** disable rubocop

Before we install =prettier=, we have to disable =rubocop= first. =rubocop= is
quite built into =ruby-mode=, but it does have a flag we can use to disable it.

#+name: config/ruby-rubocop-disable
#+begin_src emacs-lisp :results none
(setq-default ruby-flymake-use-rubocop-if-available nil)
#+end_src
** ruby version

The Ruby version used can make a big difference in how things work.  One example
is a syntax difference with "fluent dots" (Ruby's silly name for having dots for
chained calls/references at the beginning of a line rather than at the end).
"Fluent dots" works fine typically, until you start to interlace them with
comments.  Ruby's "I don't about whitespace but sometimes I do" kicks in, and
everyone is sad.  Fortunately this is fixed in 2.7, but Emacs won't pick that up
on macOS, because macOS uses Ruby 2.6 by default with no shell hooks (like
=direnv=) in place for Emacs' =PATH= lookups.

This applies to both =enh-ruby-mode= via =enh-ruby-program= as well as
=flycheck= via =flycheck-ruby-executable=.  There may be others as well, but
this was the most apparent I could find.

#+name: config/ruby-exec-version
#+begin_src emacs-lisp :results none
(defun config/ruby-path ()
  (let (
    (ruby-program
      ;; The easiest thing to do is jump into a shell at the directory in
      ;; question, allow any shell hooks to run (like direnv), and then
      ;; query for Ruby.
      (shell-command-to-string
        (concat
           "/run/current-system/sw/bin/zsh -c '"
           "eval \"$(/nix/store/1nslf9a1isrmxh3hxvwkrbxy6ssr116s-direnv-2.34.0/bin/direnv hook zsh)\" > /dev/null; "
           "cd " (projectile-project-root) " 2> /dev/null; "
           "which ruby;"
           "' | tr -d '\\n'"
           )
        )
      )
    )
      (setq-local enh-ruby-program ruby-program)
      (setq-local flycheck-ruby-executable ruby-program)
      (if config/debug-ruby
        (progn
          (message "ruby-program: %s" ruby-program)
          (message "Getting Ruby version with: %s" (concat ruby-program " --version"))
          (message "Ruby version: %s" (shell-command-to-string (concat ruby-program " --version")))
          )
        nil
        )
    )
  (setq-default config/debug-ruby nil)
  )
(add-hook 'enh-ruby-mode-hook #'config/ruby-path)
#+end_src


** stitch

#+begin_src emacs-lisp :results none :noweb yes
(use-package "enh-ruby-mode"
  :mode "\\.rb\\'" "\\`Gemfile" "\\.gemspec\\'"
  :init
  ;; Lifted from what ruby-mode uses.
  (add-to-list 'auto-mode-alist '("\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
  ;; Selects the right mode from the shebang.
  (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
  <<config/ruby-exec-version>>
  <<config/ruby-rubocopy-disable>>
  <<config/ruby-multi-line-strategy-hook>>
  <<config/ruby-mode-fix-hanging-indentation>>
  :config
 )
#+end_src
