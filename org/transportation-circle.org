#+title:     Transportation Circle
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2021-01-13 Wed>
#+language:  en
#+file_tags:
#+tags:

This is a literate program. The program is woven into the documentation below
using =org-babel=.

* transportation circle

Transportation Circle is the brand name I just made up for this functionality.
It provides an interactive minor mode in a buffer and displays interaction
options through a transient map.

** justification

I wanted to use transient.el. I love magit, I love its interface. It has loads
of documentation but it's hard to take that documentation and turn it into real,
working code. It also uses objects, which especially confuse me in the world of
Emacs and Lisp. Working on this would give me a better grasp of how to control a
buffer in Emacs specifically for the purposes of some kind of interactive
interface, rather than a text file. I have other twisted plots in mind, once I
have some familiarity here.

I have tried hydra. While hydra is within the realm of this functionality, it's
designed to be relatively basic. There's value in that, but it doesn't allow the
customization I want.
** the program

Transportation Circle declares a series of functions for displaying itself,
initializing its key maps, and so forth. This is brought in below.

#+name: tc/main
#+begin_src emacs-lisp :results none :noweb yes
<<tc/buffer-display-fn>>
#+end_src

** testing

Run this block to test.

#+name: tc/test
#+begin_src emacs-lisp :results none :noweb yes :tangle no

(defun tc/hi ()
  (message "hi - teleportation circle works!")
  )

(defvar tc/actions '())

(setq tc/actions '(
                   ((action . tc/hi) (key . "i") (display . "initiative"))
                   ((action . tc/hi) (key . "c") (display . "generate character"))
                   ((action . tc/hi) (key . "o") (display . "generate location"))
                   ((action . tc/hi) (key . "t") (display . "generate item"))
                   ))

<<tc/buffer-display-fn>>
(tc/buffer-display)
;; (tc/buffer-populate tc/actions (current-buffer))
#+end_src

** emacs terminology in regards to ui

As a quick refresher:
+ Frame :: A "window" in terms of most GUIs. The frame is a UI whose direct
  parent is the OS itself. It will likely have a close, maximize, and minimize
  buttons.
+ Window :: This is a section within a frame. Generally, windows are associated
  with a buffer.

** display the window

=display-buffer= has a lot of powerful options, but selecting the right one is
tricky. [[https://github.com/muffinmad/emacs-mini-frame][emacs-mini-frame]] has some potential, but I didn't opt for it on this
pass.

This approach with =display-buffer= explicitly indicates the options to use.
However the preferred method is to set a =cons= cell of a regular expression to
match a buffer name and options for =display-buffer=. This value is appended to
=display-buffer-alist=.

There are a number of documents relevant to this topic.
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Position-Parameters.html#Position-Parameters][Position-parameters]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Interaction-Parameters.html#Frame-Interaction-Parameters][Frame-Interaction-Parameters]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html][Buffer-Display-Action-Functions]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Child-Frames.html#Child-Frames][Child-Frames]]
+ [[https://www.reddit.com/r/emacs/comments/aw40il/cant_make_displaybufferpopupframe_work_with/][A reddit page with a number of options used as an example]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Buffers.html][Main buffer displaying document]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Choice.html#Window-Choice][Window-Choice]]

#+name: tc/buffer-display-body
#+begin_src emacs-lisp :results none :tangle no :noweb yes
<<tc/transient-map-fn>>
(let* (
       (original-buffer (current-buffer))
       (buffer (get-buffer-create "*transportation circle*"))
      ;; (top-pos (- (window-height) (* 10 10)))
      (top-pos (+ (window-height) 558)) ;; Number found manually. How to
                                        ;; calcuate?
      (nada (message "top pos %s" top-pos))
      (frame (display-buffer buffer `((display-buffer-in-child-frame) . (
                           (child-frame-parameters . (
                            (height . 10) ;; Number of lines.
                            ;; (width . ,(window-width))
                            ;; Unsure why we have to add one more column, but it
                            ;; fits nicely.
                            (width . ,(+ (window-width) 1))
                            ;; (inhibit-same-window . t)
                            ;; (inhibit-switch-frame . t)
                            (top . ,top-pos)
                            (menu-bar-lines . 0) ;; Does this do anything?
                            (keep-ratio . t) ;; Follow resizes of parent.
                            (no-other-frame . t) ;; Prevent cycling via next/previous.
                            (minibuffer . nil) ;; doesn't seem to work
                            ;; (parent-window . ,(selected-window))
                            (parent-frame . ,(selected-frame))
                            ;; (no-accept-focus . t)
                            ;; (preserve-size . (t . t))
                            ;; (popup-frame-parameters . (no-accept-focus . t))
                            ;; (window-height . 100)
                            ))
                           ;; (inhibit-same-window . t)
                           ;; (inhibit-switch-frame . t)
                           ;; (no-accept-focus . t)
                           ;; (popup-frame-parameters . (
                           ;;  (no-accept-focus . t)
                           ;;  (window-height . 10)
                           ;;  ))
                           ;; (window-height . 10)
                           ))))

      )
        (tc/buffer-populate tc/actions buffer)
        (message "Buffer populated")
        (switch-to-buffer original-buffer)
        (message "Current buffer is now %s" (current-buffer))
        (tc/transient-map tc/actions)
        (message "Configured transient map for %s" (current-buffer))

  ;; display-buffer-in-child-frame is basically a pop-up. But maybe we want
  ;; that, if we can control some parameters of it.
  ;; Oh, I'm not supposed to call these directly.
  ;; (display-buffer-in-child-frame buffer '(
  ;;                                    inhibit-same-window
  ;;                                    inhibit-switch-frame

  ;;                                    ))
 ;; display-buffer-in-child-frame looks like a better candidate - read up on it.
  ;; (display-buffer-at-bottom buffer '(
  ;;                                    inhibit-same-window
  ;;                                    inhibit-switch-frame
  ;;                                    ))

  ;; For twisted plots later: display-buffer-at-bottom would be good for a
  ;; global mode-line.
  ;; (display-buffer buffer '((display-buffer-below-selected)

  ;; (display-buffer buffer `((display-buffer-below-selected) . (
  ;;   (window-height . fit-window-to-buffer)
  ;;   ;; (side . bottom)
  ;;   ;; (inhibit-same-window . t)
  ;;   )))
  ;; (tc/buffer-populate tc/actions buffer)

  ;; (other-window 1)
)
#+end_src

#+name: tc/buffer-display-fn
#+begin_src emacs-lisp :results none :noweb yes
<<tc/buffer-populate-fn>>
(defun tc/buffer-display ()
  (interactive)
  <<tc/buffer-display-body>>
  )
#+end_src

** buffer contents

#+name: tc/buffer-populate-fn
#+begin_src emacs-lisp :results none :noweb yes :tangle no
<<tc/buffer-entries-populate-fn>>

(defun tc/buffer-populate (actions buffer)
  (save-window-excursion
    (message "Switch to new buffer...")
    (switch-to-buffer buffer)
    (erase-buffer)
    (font-lock-mode)
    (insert "Transportation Circle for ")
    (insert "D&D")
    (insert "\n\n")
    (tc/buffer-entries-populate tc/actions)
    )
  )
#+end_src

*** buffer heading

#+name: tc/buffer-heading-populate
#+begin_src emacs-lisp :results none
(insert "Transportation Circle for ")
(insert "D&D")
(insert "\n\n")
#+end_src

*** buffer entries

#+name: tc/buffer-entries-populate-fn
#+begin_src emacs-lisp
(defun tc/buffer-entries-populate (actions)
  "Insert ACTIONS into the selected buffer."
  (message "%s" actions)
  (insert
   (-reduce #'concat
            (-map
             (lambda (action)
               (concat
                "  " ;; Indent.
                (propertize (cdr (assoc 'key action))
                            'font-lock-face
                            '(:foreground "purple")
                            )
                (propertize (concat " " (cdr (assoc 'display action)))
                            'font-lock-face
                            '(:foreground "#4488DD")
                            )
                "\n"
                )
               )
             actions
             )
            )
   )
  )
#+end_src

** key bindings
*** summon
=SPC m D D=

#+begin_src emacs-lisp :results none
(on-doom
  (map!
    :localleader
    :desc "dnd"
    (:prefix "D"
      :map org-mode-map
      :ne "D" #'tc/buffer-display
      )
    )
 )
#+end_src

*** interaction

**** interaction overview
=set-transient-map= gives us the capability to bind a key map that sits on top
of the current key map (whatever it may be) temporarily. The documentation on
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html][Controlling Active Maps]] details this.

I feel for non-standard _application_ functionality, it's very good to have a
small cheat sheet of sorts displayed near the operational area. This can not
only show what options are available but what flags we have set.

The transient map takes place over =org-mode=. The =*transportation circle*=
buffer is just the cheat sheet. If we land on this buffer somehow, we should
return to the buffer selected.

**** unreachable buffer

This is still a work in progress.

The =*transportation circle*= buffer should be more or less unreachable, but if
we reach it we should return to the parent buffer.

On the off chance that someone arrives at the buffer, it should be read only.
**** transient map

After we show the buffer, we need to immediately flip back to the original
buffer. Once there we add a transient map to the buffer, so we can temporarily
add bindings for =transportation-circle=.

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html][Controlling-Active-Maps]] documents =set-transient-map= briefly.

#+name: tc/transient-map-fn
#+begin_src emacs-lisp :tangle no :noweb yes
<<tc/keymap-action-fn>>
(defun tc/transient-map (circle)
  "Set up a transient map described by CIRCLE.

CIRCLE is a list of destinations. See tc/actions.
"
  (set-transient-map
   ;; (intern (concat (symbol-name major-mode) "-map"))
   (let ((map (make-sparse-keymap)))
     (-each
         circle
       (lambda (d)
         (define-key map (kbd (cdr (assoc 'key d))) (tc/keymap-action d))
         ;; `(,(kbd (cdr (assoc 'key d))) . ,(tc/keymap-action d))
         )
       )
     (message "map %s" map)
     map
     )
   t ;; nil
   (lambda ()
     ;; TODO: Close the window.
     (message "Transportation Circle transient map killed.")
     )
   )
  )
#+end_src

**** destination actions

When setting up the keymap in [[transient map]], we partially apply the destination
to the action.

#+name: tc/keymap-action-fn
#+begin_src emacs-lisp
(defun tc/keymap-action (destination)
  "Partially apply DESTINATION to action in DESTINATION."
  (-partial (cdr (assoc 'action destination)) destination)
  )
#+end_src

* COMMENT settings
#  LocalWords:  keymap
