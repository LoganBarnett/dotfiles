#+title:     Org-mode
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2020-06-06 Sat>
#+language:  en
#+file_tags:
#+tags:

* exporting
** GitHub Flavored Markdown

In its inert form, =org-mode= shares a lot of similarities with Markdown.
However some things don't come over the export very well.

A notable problem I've encountered is paragraphs being unfilled. While this is
valid in Markdown, it leaves a bunch of manual edits for me to make to fix it if
I want to hand this the export to another human in good conscious. I could make
this configurable and submit a pull request, but let's just get it working
first.

#+name: config/markdown-export-fill-paragraph
#+begin_src emacs-lisp :results none :tangle no
(require 'ox-gfm)
(defadvice org-gfm-paragraph (around fill-gfm-paragraph activate)
  ;; ad-do-it is the magic advice "result" of the original function, if we
  ;; choose to evaluate the value, the function is executed (original params
  ;; included).
  (setq ad-return-value (fill-string ad-do-it))
  )

#+end_src
** org-reveal

* evil

~evil-org-mode~ (~evil-org~) brings about a lot of very good key bindings.  See
https://github.com/Somelauw/evil-org-mode for enhanced bindings and behaviors.
I'll try to list the ones I frequently use.

1. ~<~ and ~>~ demote and promote headings (and include child headings if
   folded).
2. Continue item on next or previous line with ~o~/~O~.

#+name: config/evil-org-mode
#+begin_src emacs-lisp :results none :exports code :tangle no
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(setq-default evil-org-special-o/O '(table-row item))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

* images
=org-mode= in Emacs can display images inline. This is a wonderful feature that
doesn't get used enough, and there are tweaks needed to get it in a properly
usable state.

** COMMENT image width

I moved this over but I don't think it actually gets used. I think I just wound
up using the attribute =org-width= inline on the images. This bears more
investigation and then documentation.

By default images are set to use their max width in an org document. This works
great if your images are really small and you have a huge monitor. However it's
nearly useless for those of us stuck on smaller monitors, or if we want to use
vertical splits. I found that 564 (or 594?) seems to be the sweet spot in terms
of pixels on a window designed to display just a little over 80 columns with all
the gutter stuff.

#+begin_src emacs-lisp :results none
;; I don't get why this doesn't seem to be logging, but it seems to be working.
(defun iimage-scale-to-fit-width ()
  "Scale over-sized images in the buffer to the width of the current window.
\(imagemagick must be enabled\)"
  (interactive)
  (let ((max-width (window-width (selected-window) t)))
    ;; (message "max-width %s" max-width)
    (org-element-map
        (org-element-parse-buffer 'object)
        'link
      (lambda (el)
        (let ((path (org-element-property :path el)))
          ;; (message "path %s" path)
          (when (string-match (image-file-name-regexp) path)
          ;; (when (image-p el)
          ;; ;; (message "el %s" el)
          ;; (when (equal "file" image)
            ;; (message "true")
            ;; (message "modifying el %s" el)
            ;; (message "width %s" (org-element-property :width el))
            (org-element-put-property el :type 'imagemagick)
            (org-element-put-property el :max-width max-width)
            (org-element-put-property el :width max-width)
            )
          )
        )
    ;; (let ((display (get-text-property (point-min) 'display)))
    ;;   (if (and (plist-member display 'max-width) (/= (plist-get display 'max-width) display))
          ;; (alter-text-property (org-element-property :begin el)
          ;;                      (org-element-property :end el)
          ;;                      'display
          ;;                      (lambda (prop)
          ;;                        (message "prop %s" prop)
          ;;                        (when (image-p prop)
          ;;                          (plist-put (cdr prop) :type 'imagemagick)
          ;;                          (plist-put (cdr prop) :max-width max-width)
          ;;                          ;; (plist-put (cdr prop) :width max-width)
          ;;                          ;; (plist-put (cdr prop) :scale t)
          ;;                          prop)
          ;;                      )
          ;; )))
      )
    )
    ;; )
  )
#+end_src


#+begin_src emacs-lisp :results none
(defun iimage-scale-on-window-configuration-change ()
  "Hook function for major mode that display inline images:
Adapt image size via `iimage-scale-to-fit-width' when the window size changes."
  (add-hook 'window-configuration-change-hook #'iimage-scale-to-fit-width t t))
#+end_src
** download linked image

When I export HTML to =org-mode= I find I want the images to be downloaded too.
The first step is to have the capability to download an image from a link (in
=org-mode=) and then replace that link with a local file link, with size
settings or anything else I desire.

I will start with an =org-capture= template.

#+begin_example emacs-lisp :results none
'("i" "org-mode image link" entry
  "[[%(link)][%(link-name)]]"
  )
#+end_example


* items

** keybindings
#+name: config/org-mode-items-keybindings
#+begin_src emacs-lisp :results none :exports code :tangle no
;; This is how Doom does it, but it doesn't work for us.
(map!
 :map evil-org-mode-map
 :ni [C-return]   #'+org/insert-item-below
 :ni [C-S-return] #'+org/insert-item-above
 )
(map!
 :map org-mode-map
 :ni [C-return]   #'+org/insert-item-below
 :ni [C-S-return] #'+org/insert-item-above
 )
#+end_src

** sub items

I typically use alphabetical lists (~a.~) for sub lists in ~org-mode~.  This has
to be turned on deliberately though - something I took for granted in Doom.

#+name: config/org-mode-list-item-alphabetical
#+begin_src emacs-lisp :results none :exports code :tangle no
;; Recognize a), A), a., A., etc -- must be set before org is loaded.
(setq-default org-list-allow-alphabetical t)
#+end_src


* latex
** executables
To get LaTeX working, we need to ensure that =latex= is on the =PATH=. My
attempts to address this have failed using normal =bash= and =zsh= shell
settings. Though

#+name: config/latex-setup-exec
#+begin_src emacs-lisp :results none :tangle no
(add-to-list 'exec-path "/Library/TeX/texbin/")
(setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
#+end_src

** formatting
I like the scale to be at 1.0. It was 1.5 from Doom Emacs as far as I can tell.
The rest of the settings seemed fine by me, so they are a duplicate here.

I also want the color to be nice.

#+name: config/latex-format
#+begin_src emacs-lisp :results none :tangle no
(setq org-format-latex-options
      '(:foreground default
        :background "#242730"
        :scale 1.0
        :html-foreground "gray"
        :html-background "Transparent"
        :html-scale 1.0
        :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")
        )
      )
#+end_src
** packages

According to [[http://bnbeckwith.com/blog/org-mode-tikz-previews-on-windows.html][this post]], TikZ and its family of packages must be rendered using
=ImageMagick=.
#+name: config/org-mode-latex-use-imagemagick
#+begin_src emacs-lisp :results none :tangle no
(setq org-preview-latex-default-process 'imagemagick)
#+end_src

We want the equivalent of =\usepackage{circuitikz}=.
\usepackage{tikz}
#+name: config/org-mode-latex-add-tikz-packages
#+begin_src emacs-lisp :results none :tangle no
(add-to-list 'org-latex-packages-alist '("" "tikz" t))
(add-to-list 'org-latex-packages-alist '("" "siunitx" t))
(add-to-list 'org-latex-packages-alist '("" "circuitikz" t))
#+end_src

* navigation

Seek ~org-evil-mode~ settings in [[evil]] - it provides the ~g h~ binding and
more.  Doom doesn't have it.

* headings
** folding
Starting up with everything folded is generally preferable.

#+name: config/org-mode-manage-initial-folding
#+begin_src emacs-lisp :results none :tangle no
(setq org-startup-folded 'overview) ;; Equivalent to 'fold?
;; Because setting the variable isn't enough?
;; (org-set-startup-visibility)
#+end_src

Alternatively this can be controlled on a per document basis:

#+begin_example org
,#+startup: nofold
#+end_example

But none of this works as advertised per the documentation. I'm not sure what is
interfering. So let's just rub some Lisp on it.

#+name: config/org-mode-hack-initial-folding
#+begin_src emacs-lisp :results none :tangle no
(add-hook 'org-mode-hook #'+org/close-all-folds)
#+end_src

* links

** open links in new frame

=org-mode= either from Doom or by default doesn't open files in new frames. This
should fix that. However something keeps overriding it. [[stitch]] also uses
=add-hook= to deal with this.

#+name: config/open-link-in-new-window
#+begin_src emacs-lisp :results none :tangle yes
(add-to-list 'org-link-frame-setup '(file . find-file-other-window))
#+end_src

** follow links on enter

This is yanked from Doom's org-mode evil mappings to get it such that ~RET~
follows a link.  In addition, I believe ~org-return-follows-link~ must be set.

#+name: config/org-mode-link-follow-on-enter
#+begin_src emacs-lisp :results none :exports code :tangle no
(setq-default org-return-follows-link t)
(map!
 :map org-mode-map
 :n [return]   #'+org/dwim-at-point
 )
#+end_src


* old config
This is moved from =config-org-mode.el=. I should break this up and add prose as
necessary.

#+name: config/org-dirty-config-fns
#+begin_src emacs-lisp :results none :tangle yes
;; TODO: Setup a keybinding to replace org-clock-report with this function.
(defun my/org-clock-report ()
  "Run org-clock-report but don't leave a narrowed buffer when done."
  (interactive)
  (org-clock-report)
  (widen))

;; Lifted from
;; https://emacs.stackexchange.com/questions/21124/execute-org-mode-source-blocks-without-security-confirmation
(defun my/org-confirm-babel-evaluate (lang body)
  "Prevents evaluation of LANG if it is in the list below. BODY is not used."
  (not (member lang '("plantuml"))))

(defun config/hidden-content-indicator ()
  "Use something besides '...' to indicate hidden content in `org-mode'.

A common form of hidden content is collapsed headings."
  (setq-default org-ellipsis "⤵")
  )

(defun config/google-calendar-sync ()
  "Setup `org-gcal' to sync with Google Calendar to create `org-agenda' items."
  ;; Leave interactive so I can debug.
  (interactive)
  (require 'org-gcal)
  ;; (load-library "org-gcal")
    (setq-default
     org-gcal-client-id "457715697460-ktut9k8mle9i7pbvgkkkognh2fb0o13i.apps.googleusercontent.com"
     ;; (funcall (plist-get
     ;;           (car
     ;;            (auth-source-search
     ;;             :host "calendar.google.com"
     ;;             :user "client-id")
     ;;            )
     ;;            :secret))
     org-gcal-client-secret
     (funcall (plist-get
               (car
                (auth-source-search
                 :host "calendar.google.com"
                 :user "logustus@gmail.com")
                )
               :secret))
     org-gcal-file-alist '(("logustus@gmail.com" . "~/notes/calendar.org")
                          )
     org-gcal-header-alist '(("logustus@gmail.com" . "personal"))
     )
    ;; (message "id %s secret %s" org-gcal-client-id org-gcal-client-secret)
  )

(defun image-p (obj)
  "Return non-nil if OBJ is an image."
  (eq (car-safe obj) 'image))



(defvar-local journal-file "/journal/.+\\.org")
(defun config/org-journal-file-p (path)
  "Return non-nil if PATH refers to a journal org-file."
  (string-match-p journal-file path)
  )
(defun config/org-not-journal-file-p (path)
  "Return non-nil if PATH refers _does not match_ a journal org-file."
  (not (config/org-journal-file-p path))
  )

;; Taken from https://emacs.stackexchange.com/a/12124/14851
(defun my/html2org-clipboard ()
  "Convert clipboard contents from HTML to Org and then paste (yank)."
  (interactive)
  (kill-new (shell-command-to-string "osascript -e 'the clipboard as \"HTML\"' | perl -ne 'print chr foreach unpack(\"C*\",pack(\"H*\",substr($_,11,-3)))' | pandoc -f html -t json | pandoc -f json -t org"))
  (yank))

;; Taken from:
;; https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/
(defun config/org-opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

(defun config/org-open-in-other-window ()
  (add-to-list 'org-link-frame-setup '(file . find-file-other-window))
  )

#+end_src

#+name: config/org-dirty-config-run
#+begin_src emacs-lisp :results none :tangle yes
(require 'my-utils) ;; Needed for config/disable-visual-line-mode.
(add-hook 'org-mode-hook #'config/disable-visual-line-mode)
;; set default diary location
(setq-default
 diary-file "~/notes/diary.org"
 ;; appt-audible t
 calendar-date-style 'iso
 ;; `org-agenda-files' is also modified in org-agenda-private.org in my private
 ;; repo.
 org-agenda-files
 `(
   "~/notes/agenda.org"
   "~/notes/inbox.org"
   )
 ;; For optimizations:
 org-hide-leading-stars nil
 org-startup-indented nil
 org-adapt-indentation nil
 ;; I think this was removed and no longer used. Verify.
 ;; org-indent-mode-turns-on-hiding-stars nil
 ;; shrink inline images see:
 ;; http://lists.gnu.org/archive/html/emacs-orgmode/2012-08/msg01388.html
 org-src-fontify-natively t
 )

;; (add-to-list 'org-startup-options '("indent" org-startup-indented nil))

(remove-hook 'org-mode-hook #'org-superstar-mode)
;; TODO: Generalize this to a helper for any lib.
;; (defun config/find-culprit-org-indent-mode (&rest libs)
;;    (message "Lib: %s" libs)
;;    (if (string= (car libs) "org-indent")
;;        (progn
;;         (message "backtrace: %s" (backtrace))
;;         (error! "Someone tried to pull in org-indent?!?!?!")
;;         )
;;        t
;;     )
;;   )
;; (general-advice-add 'require :before #'config/find-culprit-org-indent-mode)
(defun config/+org-init-appearance-h ()
  "Configures the UI for `org-mode'."
  (setq org-indirect-buffer-display 'current-window
        org-eldoc-breadcrumb-separator " → "
        org-enforce-todo-dependencies t
        org-entities-user
        '(("flat"  "\\flat" nil "" "" "266D" "♭")
          ("sharp" "\\sharp" nil "" "" "266F" "♯"))
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-footnote-auto-label 'plain
        ;; org-hide-leading-stars t
        ;; org-hide-leading-stars-before-indent-mode t
        org-image-actual-width nil
        org-list-description-max-indent 4
        org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success))
        ;; org-startup-indented t
        org-tags-column 0
        org-use-sub-superscripts '{})
  )
(general-advice-add '+org-init-appearance-h :override #'config/+org-init-appearance-h)

;; TODO: Generalize this to a helper for any variable.
;; (defun config/find-culprit-startup-indented (symbol newval operation where)
;;   (message "a change")
;;     (message "%s changed to %s!" symbol newval)
;;    (if newval
;;        (progn
;;          (message "where %s" where)
;;         (message "backtrace: %s" (backtrace))
;;         )
;;        nil
;;     )
;;   )
;; (add-variable-watcher 'org-hide-leading-stars #'config/find-culprit-startup-indented)

(load-library "org-to-jekyll")
;; (setq-default org-image-actual-width '(564))
;; (setq-default org-image-actual-width nil)
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-mode-hook #'display-line-numbers-mode)
;; Use my custom org clock report function, which prevents narrowing. I find
;; narrowing during this operation confusing.
;; (add-hook 'org-mode-hook (lambda ()
;;                            (bind-key "C-c C-x C-r" 'my/org-clock-report)
;;                            ))
(global-set-key (kbd "C-c C-x C-r") 'my/org-clock-report)
;; For some reason this doesn't work. How do I override key bindings?
(bind-key (kbd "C-c C-x C-r") 'my/org-clock-report)
;; `org-clone-subtree-with-time-shift' uses some (typically) obscure Emacs
;; binding. Let's bring it into the modern, discoverable era.
;; TODO: Add Doom bindings.
(on-spacemacs (spacemacs/set-leader-keys-for-major-mode
               'org-mode
               (kbd "s t")
               'org-clone-subtree-with-time-shift
               ))

(setq-default org-modules '(
                            ;; `org-checklist' clears checklists on tasks if
                            ;; `:RESET_CHECK_BOXES: t' is set for the
                            ;; properties on the task. I find this very
                            ;; useful for checklists in repeating tasks.
                            org-checklist
                            ))
(require 'org-checklist)

;; Preload org export functions, needed for latex preview.
(require 'ox)
;; Some initial langauges we want org-babel to support
(require 'ob-js)
(require 'ob-shell)
(require 'ob-plantuml)
;; Exporters.
(require 'ox-confluence-en) ;; This one adds PlantUML support.
(require 'ox-gfm) ;; Github Flavored Markdown.
;; Allow using yaml blocks as-is.
(defun org-babel-execute:yaml (body params) body)
;; TODO: Doom docs say bad things about doing this. I should look into it.
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '(
;;    (ditaa . t)
;;    (dot . t)
;;    (emacs-lisp . t)
;;    (gnuplot . t)
;;    (js . t)
;;    (latex . t)
;;    (lilypond . t)
;;    (octave . t)
;;    ;; (perl . t)
;;    (plantuml . t)
;;    ;; (python . t)
;;    ;; (ruby . t)
;;    (shell . t)
;;    ;; (sqlite . t)
;;    ;; (R . t)
;;    ))
(add-to-list 'org-src-lang-modes '("javascript" . js2))
;; Stack Overflow exports using my/html2org-clipboard use things like
;; "lang-bash" for describing the language of the code block.  Since I use Stack
;; Overflow a lot, and I'd prefer not to have to repair a bunch of translated
;; material upon each translation, we'll just have org-mode support the
;; languages as I use them.  There's perhaps a more durable way to do this, but
;; this works for me for now.
(add-to-list 'org-src-lang-modes '("lang-bash" . sh))
(setq-default
 org-confirm-babel-evaluate 'my/org-confirm-babel-evaluate
 org-default-notes-file "~/notes/inbox.org"
 org-directory "~/notes"
 org-refile-use-outline-path 'file
 helm-org-headings-fontify t
 ;; Everyone claims this makes helm work with org-refile. Who am I to say
 ;; otherwise?
 org-outline-path-complete-in-steps nil
 org-refile-allow-creating-parent-nodes 'confirm
 org-refile-targets '((config/org-opened-buffer-files :maxlevel . 9))
 )
(config/org-open-in-other-window)
;; (setq-default imagemagick-enabled-types t)
;; imagemagick-register-types must be invoked after changing enabled types.
(imagemagick-register-types)

;; Solution lifted from https://emacs.stackexchange.com/a/33963
;; Somehow this doesn't appear to be working for jpegs of large width. They
;; get clipped, which is undesirable.
;; (add-hook 'org-mode-hook #'iimage-scale-on-window-configuration-change)

(config/hidden-content-indicator)
;; (config/google-calendar-sync)
#+end_src

* paths

The =org-directory= needs to be set before =org-mode= is loaded, because
reasons.

#+name: config/org-mode-set-paths
#+begin_src emacs-lisp :results none :tangle no
(setq org-directory "~/notes")
#+end_src
* org-auto-id

#+name: config/org-auto-id
#+begin_src emacs-lisp :results none :tangle no
(load-library "org-auto-id")
(require 'org-auto-id)
(org-auto-id/on-save-auto-id)
#+end_src


I don't have a better place for a TODO list.
** TODO fix illegal characters
If the heading contains characters such as =<= or =>= it will build HTML that
won't parse correctly, because open-tags aren't legal HTML inside of attribute
values, I think.

We should drop or convert these characters.

* org-agenda
This is worthy of its own file. See [[file:./org-agenda.org][org-agenda.org]].
* org-babel
** text
I need json and other text code blocks to be treated as content.

Lifted from
https://emacs.stackexchange.com/questions/24247/org-mode-pipe-source-block-output-as-stdin-to-next-source-block

Specifically https://emacs.stackexchange.com/a/51734/14851

Do I actually need this though?

#+name: config/org-babel-passthrough
#+begin_src emacs-lisp :results none :tangle yes
(defun config/org-mode-org-babel-execute:passthrough (body params)
  body)
(defalias 'org-babel-execute:json 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:text 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:yaml 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:conf 'config/org-mode-org-babel-execute:passthrough)
;; The post says to use this, but I found everything works without it.
;; (add-to-list 'org-babel-load-languages '(passthrough . t))
#+end_src

Here's the test:
#+NAME: json-test
#+BEGIN_SRC json
  {"greet": "hello, world"}
#+END_SRC

#+HEADER: :stdin json-test
#+BEGIN_SRC sh
  jq .greet
#+END_SRC

#+RESULTS:
: hello, world

#+name: greet/text
#+begin_src text
hi
#+end_src

#+begin_src shell :noweb yes
echo <<greet/text>>
#+end_src

#+RESULTS:
: hi



It works!
** evaluation

I want to see errors when a =noweb= reference fails to resolve.

#+name: config/org-mode-babel-show-noweb-ref-error
#+begin_src emacs-lisp :results none :tangle yes
(setq org-babel-error-all-langs t)
#+end_src

** exporting
*** svgs and html documents
Some export destinations (such as HTML for Confluence documents) don't work well
with SVG documents being linked. This is in part due to a single upload being
done, rather than an upload per document generated from the export. SVGs support
inlining, and that is what we will do here to work around the issue.

This doesn't work because =:post= needs an =org-babel= block and not a function.
Bleh.
#+begin_src emacs-lisp :results none :tangle yes
(defun config/ox-html-inline-svgs (text)
  (with-temp-buffer
    (erase-buffer)
    (cl-assert text nil "config/ox-html-inline-svgs received nil instead of text ")
    (insert text)
    (beginning-of-buffer)
    (if (re-search-forward org-any-link-re nil t)
  (progn (let ((fname (match-string 2)))
        (replace-match
        (format "#+INCLUDE: \"%s\" export html" fname))
        ))
      (error "config/ox-html-inline-svgs: Was not able to find link in output"))
    (buffer-string)
    )
  )
#+end_src

To use this, add =:post config/ox-html-inline-svgs :exports code :results raw
drawer=.

#+begin_src emacs-lisp :results none :tangle yes
(require 'ox-html)
(require 'nxml-mode)

(defcustom org+-html-embed-svg nil
  "Embed SVG images.
You can set this variable in Org files with
#+HTML_EMBED_SVG: t
or
#+OPTIONS: html-embed-svg:t"
  :type 'boolean
  :group 'org-export-html)

(cl-pushnew
 '(:html-embed-svg "HTML_EMBED_SVG" "html-embed-svg" org+-html-embed-svg)
 (org-export-backend-options (org-export-get-backend 'html)))

(defun org+-html-svg-image-embed (fun source attributes info)
  "Make embedding of SVG images possible in org HTML export.
SVG images are embedded if :html-embed-svg is non-nil in the plist INFO.
Otherwise FUN called with SOURCE, ATTRIBUTES, and INFO as arguments.
SOURCE is the file name of the SVG file.
This is an around advice for `org-html--svg-image' as FUN."
  (if (member (plist-get info :html-embed-svg) '("yes" "t" t))
      (with-temp-buffer
    (insert-file-contents source)
    (with-syntax-table nxml-mode-syntax-table
      (while (and (search-forward "<svg") ;; barfs if a "<svg" is not found in code
              (nth 8 (syntax-ppss)))))
    (delete-region (point-min) (match-beginning 0))
    (buffer-string))
    (funcall fun source attributes info)))

(advice-add 'org-html--svg-image :around #'org+-html-svg-image-embed)
#+end_src
*** confluence prefix

Confluence puts a prefix upon every anchor which is the title of the document.
That name can vary across =org-mode= buffers. Look it up using the custom
keyword =AUTO_ID_PREFIX=.

#+begin_src emacs-lisp :results none :tangle yes
(defun config/auto-id-with-confluence-prefix (hierarchy-list)
  (concat
   (org-auto-id/get-org-keyword "AUTO_ID_PREFIX")
   (org-auto-id/id-as-extra-kebab hierarchy-list)
   )
  )
#+end_src
** languages

There is a snippet for source blocks in [[file:../yasnippets/org-mode/srcb]] which
allows an auto complete of languages (major modes).  Getting that list of what
languages are available requires some work though.  The best list we can get is
from =auto-mode-alist=.  We should evaluate this every time since it can
potentially change as we edit our configuration.  This function we will define
will be used in the snippet.

#+name: config/org-babel-source-block-languages-fn
#+begin_src emacs-lisp :results none :tangle yes
(defun auto-mode-alist-pair-to-org-babel-language (auto-mode-pair)
  (replace-regexp-in-string
   "-mode$"
   ""
   ;; Perhaps obscure.  Can be found in describe-variable which is where we
   ;; found out the modes that auto-mode-alist uses in the first place.
   (cl-prin1-to-string
    (let ((auto-mode (cdr auto-mode-pair)))
      (if (listp auto-mode)
        ;; This is some kind of weird nested list when this happens.
        (cdr (cdr auto-mode))
        auto-mode
        )
     )
     )
   )
  )

(defun config/org-babel-languages-available ()
  (require 'dash)
  (-uniq
   (-sort
    #'string-lessp
    (-map #'auto-mode-alist-pair-to-org-babel-language auto-mode-alist)
    )
   )
  )
#+end_src

Test it!

#+begin_src emacs-lisp :results value list :noweb yes
<<config/org-babel-source-block-languages-fn>>

(config/org-babel-languages-available)
#+end_src

#+RESULTS:
- antlr
- applescript
- archive
- asm
- authinfo
- autoconf
- awk
- bat
- bibtex
- bibtex-style
- bovine-grammar
- c
- c++
- c-or-c++
- change-log
- compilation
- conf
- conf-colon
- conf-desktop
- conf-javaprop
- conf-mode-maybe
- conf-ppd
- conf-space
- conf-toml
- conf-unix
- conf-windows
- conf-xdefaults
- csharp
- css
- dcl
- delphi
- diff
- dns
- doc-view-mode-maybe
- dockerfile
- doctex
- dsssl
- ebrowse-tree
- editorconfig-conf
- elisp-byte-code
- elm
- emacs-lisp
- enh-ruby
- erts
- f90
- feature
- fortran
- fundamental
- gdb-script
- gfm
- git-rebase
- gitattributes
- gitconfig
- gitignore
- glsl
- go
- go-dot-mod
- go-dot-work
- graphviz-dot
- groovy
- hcl
- hexl
- icon
- idl
- idlwave
- image
- java
- javascript
- js
- js-json
- json
- latex
- ld-script
- less-css
- lisp
- lisp-data
- lua
- m2
- m4
- mail
- makefile-automake
- makefile-bsdmake
- makefile-gmake
- makefile-imake
- makefile-makepp
- markdown
- metafont
- metapost
- mhtml
- mixal
- nil
- nix
- nix-drv
- nroff
- objc
- octave-maybe
- org
- pascal
- perl
- pike
- plantuml
- prolog
- ps
- puppet
- python
- rjsx
- rst
- ruby
- rustic
- scad
- scheme
- scribe
- scss
- ses
- sgml
- sh
- shell-script
- sieve
- simula
- skk-jisyo-edit
- snmp
- snmpv2
- sql
- srecode-template
- tar
- tcl
- terraform
- tex
- texinfo
- text
- typescript
- typescript-tsx
- vera
- verilog
- vhdl
- vimrc
- wisent-grammar
- xml
- yaml
** editing

*** indentation

Per [[https://github.com/syl20bnr/spacemacs/issues/13255][spacemacs#13255]], ~org-src-preserve-indentation~ causes ~org-babel~ to add
indentation upon making new lines in a code block.  The documentation for this
function states it's for export functionality but there seems to be more to it
than that.  Only later does the documentation state that it can be involved in
adding indentation (and even that isn't very clear).
~org-edit-src-content-indentation~ is the value used.  Since I want this to be a
"self healing" value, let's set it to 0 and keep ~org-src-preserve-indentation~
at ~nil~.

#+name: config/org-babel-src-indentation
#+begin_src emacs-lisp :results none :exports code
(setq-default org-src-preserve-indentation nil)
(setq-default org-edit-src-content-indentation 0)
#+end_src

* org-clock
** org-clock-display

By default =org-clock-display= only shows entries for the current year, which
makes displaying clock usage a little weird when looking across the seam of a
year. We want to display it up until now.

#+name: config/org-clock-display-until-now
#+begin_src emacs-lisp :results none :tangle yes
(setq org-clock-display-default-range 'untilnow)
#+end_src
** clock out on killing a buffer

This can also happen when exiting/quitting Emacs.

Right now there is a =kill-buffer-hook= which includes
=org-check-running-clock=. This prompts to clock out, which trips me up when I'm
quitting Emacs. For now I've decided it's better than nothing, and will keep it.
I don't know how to keep it from confusing me when I need to exit Emacs
iteratively.

* org-html
This handles the HTML exporting functionality in =org-mode=.
** Manual spaces before tags

Headlines/Headings will display their tags by default. There's a hunk of text
=org-html= inserts between the heading and the tags of =&#xa0;&#xa0;&#xa0;=,
which can foul up some styling. Spacing should never be used to control styling,
even if it is an easy fix. CSS could manage this just fine, and not foul up
screen readers by inserting unnecessary pauses.

To remove this infix, we have to redefine the function itself. Perhaps this
would make a good contribution to =org-html=. At some point I should investigate
whether or not we can employ semantic HTML for the tags.

#+begin_src emacs-lisp :results none :tangle yes
(defun org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  "Default format function for a headline.
See `org-html-format-headline-function' for details."
  (let ((todo (org-html--todo todo info))
	(priority (org-html--priority priority info))
	(tags (org-html--tags tags info)))
    (concat todo (and todo " ")
	    priority (and priority " ")
	    text
      ;; Old line
	    ;; (and tags "&#xa0;&#xa0;&#xa0;") tags)))
	    tags)))

#+end_src


* org-todo
** log timestamps when done
When marking a =TODO= as =DONE= we can automatically insert a timestamp.

#+name: config/org-todo-log-done
#+begin_src emacs-lisp :results none :tangle yes
(setq org-log-done 'time)
#+end_src
** default todo states

#+name: config/org-todo-states
#+begin_src emacs-lisp :results none :exports code :tangle no
(setq org-todo-keywords
      '((sequence
         "TODO(t)"  ; A task that needs doing & is ready to do
         "PROJ(p)"  ; A project, which usually contains other tasks
         "LOOP(r)"  ; A recurring task
         "STRT(s)"  ; A task that is in progress
         "WAIT(w)"  ; Something external is holding up this task
         "HOLD(h)"  ; This task is paused/on hold because of me
         "IDEA(i)"  ; An unconfirmed and unapproved task or notion
         "|"
         "DONE(d)"  ; Task successfully completed
         "KILL(k)") ; Task was cancelled, aborted, or is no longer applicable
        (sequence
         "[ ](T)"   ; A task that needs doing
         "[-](S)"   ; Task is in progress
         "[?](W)"   ; Task is being held up or paused
         "|"
         "[X](D)")  ; Task was completed
        (sequence
         "|"
         "OKAY(o)"
         "YES(y)"
         "NO(n)"))
      org-todo-keyword-faces
      '(("[-]"  . +org-todo-active)
        ("STRT" . +org-todo-active)
        ("[?]"  . +org-todo-onhold)
        ("WAIT" . +org-todo-onhold)
        ("HOLD" . +org-todo-onhold)
        ("PROJ" . +org-todo-project)
        ("NO"   . +org-todo-cancel)
        ("KILL" . +org-todo-cancel)))

  ;; HACK Face specs fed directly to `org-todo-keyword-faces' don't respect
  ;;      underlying faces like the `org-todo' face does, so we define our own
  ;;      intermediary faces that extend from org-todo.
  (with-no-warnings
    (custom-declare-face '+org-todo-active  '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
    (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
    (custom-declare-face '+org-todo-onhold  '((t (:inherit (bold warning org-todo)))) "")
    (custom-declare-face '+org-todo-cancel  '((t (:inherit (bold error org-todo)))) ""))
#+end_src

* priorities

For the most part, A-C on priorities works great. However Jira tends to use
around 5 priorities, and we must support these beforehand.

#+name: config/org-mode-set-priorities
#+begin_src emacs-lisp :results none :tangle yes
(setq
 org-priority-lowest ?E
 org-priority-faces '(
                     (?A . error)
                     (?B . warning)
                     (?C . success)
                     (?D . success)
                     (?E . success)
                     )
 )
#+end_src
* timestamps

** prompting for timestamps programmatically
=org-time-stamp= is very handy in that it has a rich user interface for
selecting/guessing a date and time to use. However this date and time is
inserted directly into the buffer. This creates difficulties with composition,
such as using in the context of snippets. Using the simple recommendation in
this [[https://emacs.stackexchange.com/a/69012][Stack Overflow post]], we can just create a temporary buffer, have it insert
there, and grab the result.

#+name: config/org-time-stamp-string
#+begin_src emacs-lisp :results none :tangle yes
(defun org-time-stamp-string (time inactive)
  (with-temp-buffer
    (insert (or time ""))
    (org-mode)
    (org-time-stamp nil inactive)
    (buffer-substring (point-min) (point-max))
    )
  )
#+end_src

It's also helpful to have a timestamp without the actual brackets (used for
inactive and active timestamps). This allows us to pipe the results easily to
date parsing mechanisms.

Here's the regular expression we need:

#+name: config/inactive-timestamp-sans-bracket-regexp
#+begin_src emacs-lisp :reesults none :tangle yes
(defvar inactive-timestamp-sans-bracket-regexp
  "\\[\\([^]]+\\)\\]"
  )
#+end_src

#+name: config/org-time-stamp-string-sans-brackets
#+begin_src emacs-lisp :results none :tangle yes :noweb yes

<<config/inactive-timestamp-sans-bracket-regexp>>

(defun org-time-stamp-string-sans-brackets (&optional default)
  (interactive)
  (let* (
         (time (org-time-stamp-string default t))
         (match (string-match inactive-timestamp-sans-bracket-regexp time))
         )
    (match-string 1 time)
    )
  )
#+end_src

Here's a test. Don't forget you can use =(re-builder)= to interactively test.

#+begin_src emacs-lisp :tangle no
(let* (
      (timestamp  "[2023-07-14 Fri]")
       (match (string-match inactive-timestamp-sans-bracket-regexp timestamp))
    )
  (string= (match-string 1 timestamp) "2023-07-14 Fri")
  )
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle no
(org-time-stamp-string-sans-brackets)
#+end_src

#+RESULTS:
: 2023-08-18 Fri

And test with an arbitrary date.

#+begin_src emacs-lisp :tangle no
(org-time-stamp-string-sans-brackets "[2023-08-17 Thu]")
#+end_src

#+RESULTS:
: 2023-08-18 Fri

** clock a full day

It's really handy to clock a full day of work retroactively without having to
munge all of the timestamps. I do this a lot for vacation/sick days.

I've tried using this with =yasnippet=, but I run into problems with the
prompting mechanism interfering with the snippet mechanism in the first place.
It doesn't really need to be a snippet. We can just insert the text from an
interactive function.

Later, we can even make it smart enough to look at the heading and default to
that time.

#+name: config/clock-full-day
#+begin_src emacs-lisp :results none :tangle yes :noweb yes

<<config/inactive-timestamp-sans-bracket-regexp>>

(defun clock-full-day ()
  (interactive)
  (let*
      (
       (parent-heading (-last-item (org-get-outline-path t)))
       (default-time (if (string-match inactive-timestamp-sans-bracket-regexp
                                  parent-heading
                                  )
                    parent-heading
                  (format-time-string "[%Y-%M-%d %a]")
                  )
         )
       )
    (insert
     (format
      ":LOGBOOK:
CLOCK: %s
:END:
"
      (let (
            (timestamp (org-time-stamp-string-sans-brackets default-time))
            )
        (format "[%s 09:00]--[%s 17:00] => 8:00" timestamp timestamp)
        )
      )
     )
    )
  )
#+end_src

Test that =org-get-outline-path= does what we expect.

#+begin_src emacs-lisp :tangle no
(message "%s" (-last-item (org-get-outline-path t)))
#+end_src

#+RESULTS:
: clock a full day
** inactive timestamp with both date and time

#+name: config/org-mode-insert-inactive-time-stamp-with-time-fn
#+begin_src emacs-lisp :results none :tangle no
(defun config/org-mode-insert-inactive-time-stamp-with-time ()
  (interactive)
  (org-insert-time-stamp (current-time) t t)
  )
#+end_src

Show the code works.

#+begin_src emacs-lisp :results value :tangle no :noweb yes
<<config/org-mode-insert-inactive-time-stamp-with-time-fn>>
(with-temp-buffer
  (config/org-mode-insert-inactive-time-stamp-with-time)
  )
#+end_src

#+RESULTS:
: [2023-10-03 Tue 19:38]

* typing
** disable smart parens

At some point org-mode started completing =[= with =]= and this cannot stand.
This started to grow quickly, so I just used what we have in [[file:./prog-mode.org][prog-mode.org]].
* spelling
** duplicate words

Flyspell marks words as duplicates if the last word of a headline in =org-mode=
is the same as the first word in the following paragraph. We should not follow
these. My suggestion for this is to ignore a blank line boundary.

To fix this, we just need to override =flyspell-check-region-doublons= with our
own.

My changes here don't actually seem to work. See more below on my hunt for this
issue.

#+name: config/flyspell-duplicate-org-mode-heading-fix
#+begin_example emacs-lisp :results none :tangle no
(advice-remove
 #'flyspell-check-region-doublons
 #'config/flyspell-check-region-doublons
 )
(defun config/flyspell-check-region-doublons (beg end)
  "Check for adjacent duplicated words (doublons) in the given region."
  (save-excursion
    (message "in advised override")
    (goto-char beg)
    (flyspell-word)     ; Make sure current word is checked
    (backward-word 1)
    (while (and (< (point) end)
                ;; Original code looks for any amount of line breaks, but we
                ;; just want one.
                (re-search-forward "\\<\\(\\w+\\)\\>[ \t\f]?\\1\\>"
                                   end 'move))
      (flyspell-word)
      (backward-word 1))
    (flyspell-word))
  )

(advice-add
 #'flyspell-check-region-doublons
 :override
 #'config/flyspell-check-region-doublons
 )
#+end_example

Under =flyspell-word= there is a place where it jumps backwards to find a
duplicate word using =skip-chars-backward=. It skips over any =\n= and that's
just not working for me. I could create an alternative to =skip-chars-backward=
to make it skip paragraphs - it does what =skip-chars-backward= does but doesn't
count extra =\n= entries. This would probably fix the issue. Since hard wraps
should also check for duplicates, we do want that in there once at least.

#+begin_src org :results none
, *** remember the foos
# vv this word will be marked as a duplicate.
foos are a gentle identifier, hailing back to the days of...
#+end_src

Of note, I can reproduce this error in =markdown-mode= as well.

#+begin_src markdown :results none
# remember the foos

foos are a gentle identifier, hailing back to the days of...
^^^^ this word will be marked as a duplicate.
#+end_src


This is the region of offending code, I think:

#+begin_example emacs-lisp :results none
  ((and (or (not (eq ispell-parser 'tex))
		     (and (> start (point-min))
			  (not (memq (char-after (1- start)) '(?\} ?\\)))))
		 flyspell-mark-duplications-flag
		 (not (catch 'exception
			(let ((dict (or ispell-local-dictionary
					ispell-dictionary)))
			  (dolist (except flyspell-mark-duplications-exceptions)
			    (and (or (null (car except))
				     (and (stringp dict)
					  (string-match (car except) dict)))
				 (member (downcase word) (cdr except))
				 (throw 'exception t))))))
		 (save-excursion
		   (goto-char start)
		   (let* ((bound
			   (- start
			      (- end start)
			      (- (save-excursion
                                   (skip-chars-backward " \t\n\f")))))
			  (p (when (>= bound (point-min))
			       (flyspell-word-search-backward
                                word bound flyspell-case-fold-duplications))))
		     (and p (/= p start)))))
	    ;; yes, this is a doublon
	    (flyspell-highlight-incorrect-region start end 'doublon)
	    nil)
#+end_example

* stitch

#+begin_src emacs-lisp :results none :noweb yes :tangle yes
(use-package "org"
  :init
  <<config/org-mode-insert-inactive-time-stamp-with-time-fn>>
  ;; Alphabetical list items must be set before `org-mode' loads.
  <<config/org-mode-list-item-alphabetical>>
  <<config/org-mode-items-keybindings>>
  <<config/org-mode-manage-initial-folding>>
  <<config/org-mode-set-paths>>
  <<config/org-mode-link-follow-on-enter>>
  <<config/org-todo-log-done>>
  <<config/org-todo-states>>
  <<config/org-clock-display-until-now>>
  ;; This value keeps getting overridden, so use add-hook to ensure it.
  ;; TODO: Do not use lambdas as they are hard to remove from hooks.
  (add-hook 'org-mode-hook (lambda () <<config/open-link-in-new-window>>))
  <<config/org-babel-passthrough>>
  <<config/org-mode-hack-initial-folding>>
  <<config/org-mode-smart-parens-disable>>
  <<config/org-babel-src-indentation>>
  ;; (config/prog-mode-disable-smart-parens)
  ;; (add-hook 'org-mode-hook #'config/prog-mode-disable-smart-parens)
  :config
  ;; This is very broken because evil-mode hasn't loaded yet and map!'s
  ;; documentation states that if evil is not loaded yet, then evil-specific
  ;; bindings are ignored.  At the moment we don't have anything for evil here
  ;; but that could change.
  (map!
   ;; :after org-mode
   :mode org-mode
   :localleader
   (:prefix ("c" . "clocks")
     :desc "org-clock-in" "i" #'org-clock-in
     :desc "org-clock-out" "o" #'org-clock-out
     :desc "org-resolve-clocks" "r" #'org-resolve-clocks
     )
   (:prefix ("d" . "date/time stamps")
    ;; :map org-mode-map
    :desc "schedule" "s" #'org-schedule
    :desc "deadline" "S" #'org-deadline
    :desc "active datestamp" "t" #'org-timestamp
    :desc "inactive datestamp" "T" #'org-timestamp-inactive
    :desc "Inactive timestamp" "C" #'config/org-mode-insert-inactive-time-stamp-with-time
    )
   (:prefix ("s" . "subtree/heading")
      :desc "archive" "a" #'org-archive-subtree
     )
   )
  ;; A series of helpers from Doom that we already use.
  ;; Can't use require because it doesn't use `provide'.
  (load-library "doom-autoload-org")
  <<config/evil-org-mode>>
  ;; Provide org-reveal's interactive functions.
  (require 'ox-reveal)
  <<config/markdown-export-fill-paragraph>>
  ;; <<config/flyspell-duplicate-org-mode-heading-fix>>
  <<config/open-link-in-new-window>>
  ;; Needed to set `org-startup-folded'.
  (org-set-startup-visibility)
  <<config/org-dirty-config-fns>>
  <<config/org-dirty-config-run>>
  <<config/latex-setup-exec>>
  <<config/latex-format>>
  <<config/org-mode-latex-use-imagemagick>>
  <<config/org-mode-latex-add-tikz-packages>>
  <<config/org-auto-id>>
  <<config/org-mode-babel-show-noweb-ref-error>>
  <<config/org-mode-set-priorities>>
  (require 'ob-dsq)
  (require 'gnuplot)
  (org-babel-do-load-languages 'org-babel-load-languages '((gnuplot . t)))
  )
#+end_src
