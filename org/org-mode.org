#+title:     Org-mode
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2020-06-06 Sat>
#+language:  en
#+file_tags:
#+tags:

* exporting
** GitHub Flavored Markdown

In its inert form, =org-mode= shares a lot of similarities with Markdown.
However some things don't come over the export very well.

A notable problem I've encountered is paragraphs being unfilled. While this is
valid in Markdown, it leaves a bunch of manual edits for me to make to fix it if
I want to hand this the export to another human in good conscious. I could make
this configurable and submit a pull request, but let's just get it working
first.

#+name: config/markdown-export-fill-paragraph
#+begin_src emacs-lisp :results none :tangle yes
(require 'ox-gfm)
(defadvice org-gfm-paragraph (around fill-gfm-paragraph activate)
  ;; ad-do-it is the magic advice "result" of the original function, if we
  ;; choose to evaluate the value, the function is executed (original params
  ;; included).
  (setq ad-return-value (fill-string ad-do-it))
  )

#+end_src
** org-reveal

* images
=org-mode= in Emacs can display images inline. This is a wonderful feature that
doesn't get used enough, and there are tweaks needed to get it in a properly
usable state.

** COMMENT image width

I moved this over but I don't think it actually gets used. I think I just wound
up using the attribute =org-width= inline on the images. This bears more
investigation and then documentation.

By default images are set to use their max width in an org document. This works
great if your images are really small and you have a huge monitor. However it's
nearly useless for those of us stuck on smaller monitors, or if we want to use
vertical splits. I found that 564 (or 594?) seems to be the sweet spot in terms
of pixels on a window designed to display just a little over 80 columns with all
the gutter stuff.

#+begin_src emacs-lisp :results none
;; I don't get why this doesn't seem to be logging, but it seems to be working.
(defun iimage-scale-to-fit-width ()
  "Scale over-sized images in the buffer to the width of the current window.
\(imagemagick must be enabled\)"
  (interactive)
  (let ((max-width (window-width (selected-window) t)))
    ;; (message "max-width %s" max-width)
    (org-element-map
        (org-element-parse-buffer 'object)
        'link
      (lambda (el)
        (let ((path (org-element-property :path el)))
          ;; (message "path %s" path)
          (when (string-match (image-file-name-regexp) path)
          ;; (when (image-p el)
          ;; ;; (message "el %s" el)
          ;; (when (equal "file" image)
            ;; (message "true")
            ;; (message "modifying el %s" el)
            ;; (message "width %s" (org-element-property :width el))
            (org-element-put-property el :type 'imagemagick)
            (org-element-put-property el :max-width max-width)
            (org-element-put-property el :width max-width)
            )
          )
        )
    ;; (let ((display (get-text-property (point-min) 'display)))
    ;;   (if (and (plist-member display 'max-width) (/= (plist-get display 'max-width) display))
          ;; (alter-text-property (org-element-property :begin el)
          ;;                      (org-element-property :end el)
          ;;                      'display
          ;;                      (lambda (prop)
          ;;                        (message "prop %s" prop)
          ;;                        (when (image-p prop)
          ;;                          (plist-put (cdr prop) :type 'imagemagick)
          ;;                          (plist-put (cdr prop) :max-width max-width)
          ;;                          ;; (plist-put (cdr prop) :width max-width)
          ;;                          ;; (plist-put (cdr prop) :scale t)
          ;;                          prop)
          ;;                      )
          ;; )))
      )
    )
    ;; )
  )
#+end_src


#+begin_src emacs-lisp :results none
(defun iimage-scale-on-window-configuration-change ()
  "Hook function for major mode that display inline images:
Adapt image size via `iimage-scale-to-fit-width' when the window size changes."
  (add-hook 'window-configuration-change-hook #'iimage-scale-to-fit-width t t))
#+end_src
** download linked image

When I export HTML to =org-mode= I find I want the images to be downloaded too.
The first step is to have the capability to download an image from a link (in
=org-mode=) and then replace that link with a local file link, with size
settings or anything else I desire.

I will start with an =org-capture= template.

#+begin_src emacs-lisp :results none
'("i" "org-mode image link" entry
  "[[%(link)][%(link-name)]]"
  )
#+end_src


* latex
** executables
To get LaTeX working, we need to ensure that =latex= is on the =PATH=. My
attempts to address this have failed using normal =bash= and =zsh= shell
settings. Though

#+name: config/latex-setup-exec
#+begin_src emacs-lisp :results none :tangle yes
(add-to-list 'exec-path "/Library/TeX/texbin/")
(setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
#+end_src

** formatting
I like the scale to be at 1.0. It was 1.5 from Doom Emacs as far as I can tell.
The rest of the settings seemed fine by me, so they are a duplicate here.

I also want the color to be nice.

#+name: config/latex-format
#+begin_src emacs-lisp :results none :tangle yes
(setq org-format-latex-options
      '(:foreground default
        :background "#242730"
        :scale 1.0
        :html-foreground "gray"
        :html-background "Transparent"
        :html-scale 1.0
        :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")
        )
      )
#+end_src
** packages

According to [[http://bnbeckwith.com/blog/org-mode-tikz-previews-on-windows.html][this post]], TikZ and its family of packages must be rendered using
=ImageMagick=.
#+name: config/org-mode-latex-use-imagemagick
#+begin_src emacs-lisp :results none :tangle yes
(setq org-preview-latex-default-process 'imagemagick)
#+end_src

We want the equivalent of =\usepackage{circuitikz}=.
\usepackage{tikz}
#+name: config/org-mode-latex-add-tikz-packages
#+begin_src emacs-lisp :results none :tangle yes
(add-to-list 'org-latex-packages-alist '("" "tikz" t))
(add-to-list 'org-latex-packages-alist '("" "siunitx" t))
(add-to-list 'org-latex-packages-alist '("" "circuitikz" t))
#+end_src

* headings
** folding
Starting up with everything folded is generally preferable.

#+name: config/org-mode-manage-initial-folding
#+begin_src emacs-lisp :results none :tangle yes
(setq org-startup-folded 'overview) ;; Equivalent to 'fold?
;; Because setting the variable isn't enough?
;; (org-set-startup-visibility)
#+end_src

Alternatively this can be controlled on a per document basis:

#+begin_example org
,#+startup: nofold
#+end_example

But none of this works as advertised per the documentation. I'm not sure what is
interfering. So let's just rub some Lisp on it.

#+name: config/org-mode-hack-initial-folding
#+begin_src emacs-lisp :results none :tangle yes
(add-hook 'org-mode-hook #'+org/close-all-folds)
#+end_src

* links
=org-mode= either from Doom or by default doesn't open files in new frames. This
should fix that. However something keeps overriding it. [[stitch]] also uses
=add-hook= to deal with this.

#+name: config/open-link-in-new-window
#+begin_src emacs-lisp :results none :tangle yes
(add-to-list 'org-link-frame-setup '(file . find-file-other-window))
#+end_src

* old config
This is moved from =config-org-mode.el=. I should break this up and add prose as
necessary.

#+name: config/org-dirty-config-fns
#+begin_src emacs-lisp :results none :tangle yes
;; TODO: Setup a keybinding to replace org-clock-report with this function.
(defun my/org-clock-report ()
  "Run org-clock-report but don't leave a narrowed buffer when done."
  (interactive)
  (org-clock-report)
  (widen))

;; Lifted from
;; https://emacs.stackexchange.com/questions/21124/execute-org-mode-source-blocks-without-security-confirmation
(defun my/org-confirm-babel-evaluate (lang body)
  "Prevents evaluation of LANG if it is in the list below. BODY is not used."
  (not (member lang '("plantuml"))))

(defun config/hidden-content-indicator ()
  "Use something besides '...' to indicate hidden content in `org-mode'.

A common form of hidden content is collapsed headings."
  (setq-default org-ellipsis "â¤µ")
  )

(defun config/google-calendar-sync ()
  "Setup `org-gcal' to sync with Google Calendar to create `org-agenda' items."
  ;; Leave interactive so I can debug.
  (interactive)
  (require 'org-gcal)
  ;; (load-library "org-gcal")
    (setq-default
     org-gcal-client-id "457715697460-ktut9k8mle9i7pbvgkkkognh2fb0o13i.apps.googleusercontent.com"
     ;; (funcall (plist-get
     ;;           (car
     ;;            (auth-source-search
     ;;             :host "calendar.google.com"
     ;;             :user "client-id")
     ;;            )
     ;;            :secret))
     org-gcal-client-secret
     (funcall (plist-get
               (car
                (auth-source-search
                 :host "calendar.google.com"
                 :user "logustus@gmail.com")
                )
               :secret))
     org-gcal-file-alist '(("logustus@gmail.com" . "~/notes/calendar.org")
                          )
     org-gcal-header-alist '(("logustus@gmail.com" . "personal"))
     )
    ;; (message "id %s secret %s" org-gcal-client-id org-gcal-client-secret)
  )

(defun image-p (obj)
  "Return non-nil if OBJ is an image."
  (eq (car-safe obj) 'image))



(defvar-local journal-file "/journal/.+\\.org")
(defun config/org-journal-file-p (path)
  "Return non-nil if PATH refers to a journal org-file."
  (string-match-p journal-file path)
  )
(defun config/org-not-journal-file-p (path)
  "Return non-nil if PATH refers _does not match_ a journal org-file."
  (not (config/org-journal-file-p path))
  )

;; Taken from https://emacs.stackexchange.com/a/12124/14851
(defun my/html2org-clipboard ()
  "Convert clipboard contents from HTML to Org and then paste (yank)."
  (interactive)
  (kill-new (shell-command-to-string "osascript -e 'the clipboard as \"HTML\"' | perl -ne 'print chr foreach unpack(\"C*\",pack(\"H*\",substr($_,11,-3)))' | pandoc -f html -t json | pandoc -f json -t org"))
  (yank))

;; Taken from:
;; https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/
(defun config/org-opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

(defun config/org-open-in-other-window ()
  (add-to-list 'org-link-frame-setup '(file . find-file-other-window))
  )

#+end_src

#+name: config/org-dirty-config-run
#+begin_src emacs-lisp :results none :tangle yes
(load-library "my-utils") ;; Needed for config/disable-visual-line-mode.
(add-hook 'org-mode-hook #'config/disable-visual-line-mode)
;; set default diary location
(setq-default
 diary-file "~/notes/diary.org"
 ;; appt-audible t
 calendar-date-style 'iso
 ;; `org-agenda-files' is also modified in org-agenda-private.org in my private
 ;; repo.
 org-agenda-files
 `(
   "~/notes/agenda.org"
   "~/notes/inbox.org"
   )
 ;; For optimizations:
 org-hide-leading-stars nil
 org-startup-indented nil
 org-adapt-indentation nil
 ;; I think this was removed and no longer used. Verify.
 ;; org-indent-mode-turns-on-hiding-stars nil
 ;; shrink inline images see:
 ;; http://lists.gnu.org/archive/html/emacs-orgmode/2012-08/msg01388.html
 org-src-fontify-natively t
 )

;; (add-to-list 'org-startup-options '("indent" org-startup-indented nil))

(remove-hook 'org-mode-hook #'org-superstar-mode)
;; TODO: Generalize this to a helper for any lib.
;; (defun config/find-culprit-org-indent-mode (&rest libs)
;;    (message "Lib: %s" libs)
;;    (if (string= (car libs) "org-indent")
;;        (progn
;;         (message "backtrace: %s" (backtrace))
;;         (error! "Someone tried to pull in org-indent?!?!?!")
;;         )
;;        t
;;     )
;;   )
;; (general-advice-add 'require :before #'config/find-culprit-org-indent-mode)
(defun config/+org-init-appearance-h ()
  "Configures the UI for `org-mode'."
  (setq org-indirect-buffer-display 'current-window
        org-eldoc-breadcrumb-separator " â "
        org-enforce-todo-dependencies t
        org-entities-user
        '(("flat"  "\\flat" nil "" "" "266D" "â­")
          ("sharp" "\\sharp" nil "" "" "266F" "â¯"))
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-footnote-auto-label 'plain
        ;; org-hide-leading-stars t
        ;; org-hide-leading-stars-before-indent-mode t
        org-image-actual-width nil
        org-list-description-max-indent 4
        org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success))
        ;; org-startup-indented t
        org-tags-column 0
        org-use-sub-superscripts '{})
  )
(general-advice-add '+org-init-appearance-h :override #'config/+org-init-appearance-h)

;; TODO: Generalize this to a helper for any variable.
;; (defun config/find-culprit-startup-indented (symbol newval operation where)
;;   (message "a change")
;;     (message "%s changed to %s!" symbol newval)
;;    (if newval
;;        (progn
;;          (message "where %s" where)
;;         (message "backtrace: %s" (backtrace))
;;         )
;;        nil
;;     )
;;   )
;; (add-variable-watcher 'org-hide-leading-stars #'config/find-culprit-startup-indented)

(load-library "org-to-jekyll")
;; (setq-default org-image-actual-width '(564))
;; (setq-default org-image-actual-width nil)
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-mode-hook #'display-line-numbers-mode)
;; Use my custom org clock report function, which prevents narrowing. I find
;; narrowing during this operation confusing.
;; (add-hook 'org-mode-hook (lambda ()
;;                            (bind-key "C-c C-x C-r" 'my/org-clock-report)
;;                            ))
(global-set-key (kbd "C-c C-x C-r") 'my/org-clock-report)
;; For some reason this doesn't work. How do I override key bindings?
(bind-key (kbd "C-c C-x C-r") 'my/org-clock-report)
;; `org-clone-subtree-with-time-shift' uses some (typically) obscure Emacs
;; binding. Let's bring it into the modern, discoverable era.
;; TODO: Add Doom bindings.
(on-spacemacs (spacemacs/set-leader-keys-for-major-mode
               'org-mode
               (kbd "s t")
               'org-clone-subtree-with-time-shift
               ))

(setq-default org-modules '(
                            ;; `org-checklist' clears checklists on tasks if
                            ;; `:RESET_CHECK_BOXES: t' is set for the
                            ;; properties on the task. I find this very
                            ;; useful for checklists in repeating tasks.
                            org-checklist
                            ))
(require 'org-checklist)

;; Preload org export functions, needed for latex preview.
(require 'ox)
;; Some initial langauges we want org-babel to support
(require 'ob-js)
(require 'ob-shell)
(require 'ob-plantuml)
;; Exporters.
(require 'ox-confluence-en) ;; This one adds PlantUML support.
(require 'ox-gfm) ;; Github Flavored Markdown.
;; Allow using yaml blocks as-is.
(defun org-babel-execute:yaml (body params) body)
;; TODO: Doom docs say bad things about doing this. I should look into it.
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '(
;;    (ditaa . t)
;;    (dot . t)
;;    (emacs-lisp . t)
;;    (gnuplot . t)
;;    (js . t)
;;    (latex . t)
;;    (lilypond . t)
;;    (octave . t)
;;    ;; (perl . t)
;;    (plantuml . t)
;;    ;; (python . t)
;;    ;; (ruby . t)
;;    (shell . t)
;;    ;; (sqlite . t)
;;    ;; (R . t)
;;    ))
(add-to-list 'org-src-lang-modes '("javascript" . js2))
(setq-default
 org-confirm-babel-evaluate 'my/org-confirm-babel-evaluate
 org-default-notes-file "~/notes/inbox.org"
 org-directory "~/notes"
 org-refile-use-outline-path 'file
 helm-org-headings-fontify t
 ;; Everyone claims this makes helm work with org-refile. Who am I to say
 ;; otherwise?
 org-outline-path-complete-in-steps nil
 org-refile-allow-creating-parent-nodes 'confirm
 org-refile-targets '((config/org-opened-buffer-files :maxlevel . 9))
 )
(config/org-open-in-other-window)
;; (setq-default imagemagick-enabled-types t)
;; imagemagick-register-types must be invoked after changing enabled types.
(imagemagick-register-types)

;; Solution lifted from https://emacs.stackexchange.com/a/33963
;; Somehow this doesn't appear to be working for jpegs of large width. They
;; get clipped, which is undesirable.
;; (add-hook 'org-mode-hook #'iimage-scale-on-window-configuration-change)

(config/hidden-content-indicator)
;; (config/google-calendar-sync)
#+end_src

* paths

The =org-directory= needs to be set before =org-mode= is loaded, because
reasons.

#+name: config/org-mode-set-paths
#+begin_src emacs-lisp :results none :tangle yes
(setq org-directory "~/notes")
#+end_src
* org-auto-id

#+name: config/org-auto-id
#+begin_src emacs-lisp :results none :tangle yes
(load-library "org-auto-id")
(require 'org-auto-id)
(org-auto-id/on-save-auto-id)
#+end_src


I don't have a better place for a TODO list.
** TODO fix illegal characters
If the heading contains characters such as =<= or =>= it will build HTML that
won't parse correctly, because open-tags aren't legal HTML inside of attribute
values, I think.

We should drop or convert these characters.

* org-agenda
This is worthy of its own file. See [[file:./org-agenda.org][org-agenda.org]].
* org-babel
** text
I need json and other text code blocks to be treated as content.

Lifted from
https://emacs.stackexchange.com/questions/24247/org-mode-pipe-source-block-output-as-stdin-to-next-source-block

Specifically https://emacs.stackexchange.com/a/51734/14851

Do I actually need this though?

#+name: config/org-babel-passthrough
#+begin_src emacs-lisp :results none :tangle yes
(defun config/org-mode-org-babel-execute:passthrough (body params)
  body)
(defalias 'org-babel-execute:json 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:text 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:yaml 'config/org-mode-org-babel-execute:passthrough)
(defalias 'org-babel-execute:conf 'config/org-mode-org-babel-execute:passthrough)
;; The post says to use this, but I found everything works without it.
;; (add-to-list 'org-babel-load-languages '(passthrough . t))
#+end_src

Here's the test:
#+NAME: json-test
#+BEGIN_SRC json
  {"greet": "hello, world"}
#+END_SRC

#+HEADER: :stdin json-test
#+BEGIN_SRC sh
  jq .greet
#+END_SRC

#+RESULTS:
: hello, world

#+name: greet/text
#+begin_src text
hi
#+end_src

#+begin_src shell :noweb yes
echo <<greet/text>>
#+end_src

#+RESULTS:
: hi



It works!
** evaluation

I want to see errors when a =noweb= reference fails to resolve.

#+name: config/org-mode-babel-show-noweb-ref-error
#+begin_src emacs-lisp :results none :tangle yes
(setq org-babel-error-all-langs t)
#+end_src

** exporting
*** svgs and html documents
Some export destinations (such as HTML for Confluence documents) don't work well
with SVG documents being linked. This is in part due to a single upload being
done, rather than an upload per document generated from the export. SVGs support
inlining, and that is what we will do here to work around the issue.

This doesn't work because =:post= needs an =org-babel= block and not a function.
Bleh.
#+begin_src emacs-lisp :results none
(defun config/ox-html-inline-svgs (text)
  (with-temp-buffer
    (erase-buffer)
    (cl-assert text nil "config/ox-html-inline-svgs received nil instead of text ")
    (insert text)
    (beginning-of-buffer)
    (if (re-search-forward org-any-link-re nil t)
  (progn (let ((fname (match-string 2)))
        (replace-match
        (format "#+INCLUDE: \"%s\" export html" fname))
        ))
      (error "config/ox-html-inline-svgs: Was not able to find link in output"))
    (buffer-string)
    )
  )
#+end_src

To use this, add =:post config/ox-html-inline-svgs :exports code :results raw
drawer=.

#+begin_src emacs-lisp :results none
(require 'ox-html)
(require 'nxml-mode)

(defcustom org+-html-embed-svg nil
  "Embed SVG images.
You can set this variable in Org files with
#+HTML_EMBED_SVG: t
or
#+OPTIONS: html-embed-svg:t"
  :type 'boolean
  :group 'org-export-html)

(cl-pushnew
 '(:html-embed-svg "HTML_EMBED_SVG" "html-embed-svg" org+-html-embed-svg)
 (org-export-backend-options (org-export-get-backend 'html)))

(defun org+-html-svg-image-embed (fun source attributes info)
  "Make embedding of SVG images possible in org HTML export.
SVG images are embedded if :html-embed-svg is non-nil in the plist INFO.
Otherwise FUN called with SOURCE, ATTRIBUTES, and INFO as arguments.
SOURCE is the file name of the SVG file.
This is an around advice for `org-html--svg-image' as FUN."
  (if (member (plist-get info :html-embed-svg) '("yes" "t" t))
      (with-temp-buffer
    (insert-file-contents source)
    (with-syntax-table nxml-mode-syntax-table
      (while (and (search-forward "<svg") ;; barfs if a "<svg" is not found in code
              (nth 8 (syntax-ppss)))))
    (delete-region (point-min) (match-beginning 0))
    (buffer-string))
    (funcall fun source attributes info)))

(advice-add 'org-html--svg-image :around #'org+-html-svg-image-embed)
#+end_src
*** confluence prefix

Confluence puts a prefix upon every anchor which is the title of the document.
That name can vary across =org-mode= buffers. Look it up using the custom
keyword =AUTO_ID_PREFIX=.

#+begin_src emacs-lisp :results none
(defun config/auto-id-with-confluence-prefix (hierarchy-list)
  (concat
   (org-auto-id/get-org-keyword "AUTO_ID_PREFIX")
   (org-auto-id/id-as-extra-kebab hierarchy-list)
   )
  )
#+end_src


* org-clock
** org-clock-display

By default =org-clock-display= only shows entries for the current year, which
makes displaying clock usage a little weird when looking across the seam of a
year. We want to display it up until now.

#+name: config/org-clock-display-until-now
#+begin_src emacs-lisp :results none :tangle yes
(setq org-clock-display-default-range 'untilnow)
#+end_src
** clock out on killing a buffer

This can also happen when exiting/quitting Emacs.

Right now there is a =kill-buffer-hook= which includes
=org-check-running-clock=. This prompts to clock out, which trips me up when I'm
quitting Emacs. For now I've decided it's better than nothing, and will keep it.
I don't know how to keep it from confusing me when I need to exit Emacs
iteratively.

* org-html
This handles the HTML exporting functionality in =org-mode=.
** Manual spaces before tags

Headlines/Headings will display their tags by default. There's a hunk of text
=org-html= inserts between the heading and the tags of =&#xa0;&#xa0;&#xa0;=,
which can foul up some styling. Spacing should never be used to control styling,
even if it is an easy fix. CSS could manage this just fine, and not foul up
screen readers by inserting unnecessary pauses.

To remove this infix, we have to redefine the function itself. Perhaps this
would make a good contribution to =org-html=. At some point I should investigate
whether or not we can employ semantic HTML for the tags.

#+begin_src emacs-lisp :results none
(defun org-html-format-headline-default-function
    (todo _todo-type priority text tags info)
  "Default format function for a headline.
See `org-html-format-headline-function' for details."
  (let ((todo (org-html--todo todo info))
	(priority (org-html--priority priority info))
	(tags (org-html--tags tags info)))
    (concat todo (and todo " ")
	    priority (and priority " ")
	    text
      ;; Old line
	    ;; (and tags "&#xa0;&#xa0;&#xa0;") tags)))
	    tags)))

#+end_src


* org-todo
** log timestamps when done
When marking a =TODO= as =DONE= we can automatically insert a timestamp.

#+name: config/org-todo-log-done
#+begin_src emacs-lisp :results none
(setq org-log-done 'time)
#+end_src

* priorities

For the most part, A-C on priorities works great. However Jira tends to use
around 5 priorities, and we must support these beforehand.

#+name: config/org-mode-set-priorities
#+begin_src emacs-lisp :results none :tangle yes
(setq
 org-priority-lowest ?E
 org-priority-faces '(
                     (?A . error)
                     (?B . warning)
                     (?C . success)
                     (?D . success)
                     (?E . success)
                     )
 )
#+end_src
* typing
** disable smart parens

At some point org-mode started completing =[= with =]= and this cannot stand.
This started to grow quickly, so I just used what we have in [[file:./prog-mode.org][prog-mode.org]].

* stitch

#+begin_src emacs-lisp :results none :noweb yes
(use-package "org"
  :init
  <<config/org-mode-manage-initial-folding>>
  <<config/org-mode-set-paths>>
  <<config/org-todo-log-done>>
  <<config/org-clock-display-until-now>>
  ;; This value keeps getting overridden, so use add-hook to ensure it.
  (add-hook 'org-mode-hook (lambda () <<config/open-link-in-new-window>>))
  <<config/org-babel-passthrough>>
  <<config/org-mode-hack-initial-folding>>
  <<config/org-mode-smart-parens-disable>>
  (config/prog-mode-disable-smart-parens)
  (add-hook 'org-mode-hook #'config/prog-mode-disable-smart-parens)
  :config
  ;; Provide org-reveal's interactive functions.
  (require 'ox-reveal)
  <<config/markdown-export-fill-paragraph>>
  ;; <<config/flyspell-duplicate-org-mode-heading-fix>>
  <<config/open-link-in-new-window>>
  ;; Needed to set `org-startup-folded'.
  (org-set-startup-visibility)
  <<config/org-dirty-config-fns>>
  <<config/org-dirty-config-run>>
  <<config/latex-setup-exec>>
  <<config/latex-format>>
  <<config/org-mode-latex-use-imagemagick>>
  <<config/org-mode-latex-add-tikz-packages>>
  <<config/org-auto-id>>
  <<config/org-mode-babel-show-noweb-ref-error>>
  <<config/org-mode-set-priorities>>
  )
#+end_src
