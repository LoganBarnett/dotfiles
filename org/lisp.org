#+title:     Lisp
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2021-03-11 Thu>
#+language:  en
#+file_tags:
#+tags:

* advice

Sometimes we need to completely unadvise a function, regardless of what advice
it already has.

Note: I have not seen this always work in all circumstances. Further
investigation is needed. ~advice-mapc~ was not iterating over all of the advice.

#+name: config/advice-unadvice
#+begin_src emacs-lisp :results none :tangle yes
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (message "Removing advice from %s" sym)
  (advice-mapc (lambda (advice _props)
                 (message "Removed %s from %s" advice sym)
                 (advice-remove sym advice))
               sym))
#+end_src

* file local variables

Things like =.dir-locals.el= and =org= files can have certain variables set from
the file itself. While some of these are safe, some of these are unsafe. Doom
has decided in this [[https://github.com/hlissner/doom-emacs/commit/5e7864838a7f65204b8ad3fe96febc603675e24a][commit]] that the prompting should be disabled by default.
While I agree that we should prompt less, I also think that it's far too easy to
miss a message in the minibuffer, and then we're wondering why =noweb= isn't
working inside of our literate =org= file anymore. Set it back to prompting. =t=
means to accept all "safe" variables and prompt if unsafe variables are present.

#+name: config/lisp-file-local-variables-prompt-if-unsafe
#+begin_src emacs-lisp :results none :tangle no
(setq-default enable-local-variables t)
#+end_src

* string truncation in package.el

I'm going to leave this as reference, since it turned out to be a wild goose
chase.

Lines in =package.el= for Doom look like this:

#+begin_example emacs-lisp :results none
(package! evil-nerd-commenter :pin "b8ac35fe01...")
#+end_example

It may be using the actual ellipsis character, which may or may not render as 3
columns.

=+emacs-lisp-truncate-pin= exists to truncate git SHA hashes as part of
fontification. I did witness an example of it truncating the wrong thing, but
attempts to reproduce this have failed.

This is a relatively harmless change. If I yank the link it belongs to and paste
it elsewhere, it will initially appear to have preserved the ellipsis. However
this is because the fontification survived the yank. It will be written to disk
with the appropriate, full value. When the buffer is reloaded (assuming it is
not a =package.el= or perhaps a Lisp file), it should show the non-fontified
version: meaning it has no ellipsis.

If I need to disable it for whatever reason, change the =example= block below
into a =src= block.

#+begin_example emacs-lisp
(defun config/truncate-string-stop (orig-fn &rest args)
  "Intentionally block truncation."
  )
(advice-add '+emacs-lisp-truncate-pin :around #'config/truncate-string-stop)
(advice-remove '+emacs-lisp-truncate-pin)
#+end_example

Don't actually remove this just yet.
#+begin_src emacs-lisp :results none
;(advice-remove '+emacs-lisp-truncate-pin #'config/truncate-string-stop)
#+end_src
* string manipulation
** fill a string

#+name: config/fill-string
#+begin_src emacs-lisp :results none :tangle yes
(defun fill-string (s)
  "Fill string S (hard line wrap)."
  (with-temp-buffer
    (markdown-mode)
    (insert s)
    (fill-region (point-min) (point-max))
    (buffer-substring (point-min) (point-max))
    )
  )
#+end_src

* indentation

See [[file:./prog-mode.org::*indent align fix]] for a description of alignment in
Emacs in a general sense.

The before and after looks the same with =lisp-backquote-indentation= set to
=nil=. Perhaps this construct is wrong.

#+begin_example emacs-lisp
(setq-default
 big-list
 '(
   foo
   bar
   baz
   ))
#+end_example

#+begin_example emacs-lisp
(setq-default
 big-list
 '(
   foo
   bar
   baz
   ))
#+end_example

#+name: config/lisp-indentation-align-fix
#+begin_src emacs-lisp :results none :tangle no
(setq-default lisp-backquote-indentation nil)
#+end_src

* stitch

#+begin_src emacs-lisp :results none :noweb yes
<<config/advice-unadvice>>
<<config/fill-string>>
(use-package "lisp-mode"
  :init
  <<config/lisp-file-local-variables-prompt-if-unsafe>>
  <<config/lisp-indentation-align-fix>>
  )
#+end_src
