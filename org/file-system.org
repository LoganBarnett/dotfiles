#+title:     File Management
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2024-10-05 Sat>
#+language:  en
#+file_tags:
#+tags:


* stitch

#+begin_src emacs-lisp :results none :exports code :tangle yes

(evil-define-command +evil:move-this-file (new-path &optional force-p)
  "Move current buffer's file to NEW-PATH. Replaces %, # and other vim-esque
filename modifiers (see `+evil*ex-replace-special-filenames'). If FORCE-P,
overwrite the destination file if it exists, without confirmation."
  :repeat nil
  (interactive "<f><!>")
  (when (or (not new-path) (string-empty-p new-path))
    (user-error "No new path was specified"))
  (doom/move-this-file new-path force-p))

(defun config/rename-current-buffer-file-vc ()
  (interactive)
  (let (
        (new-file-path (counsel-find-file (buffer-file-name) default-directory))
        )
     (vc-rename-file (buffer-file-name) new-file-path)
     (rename-buffer new-file-path)
     (revert-buffer :ignore-auto)
    )
  )

;; TODO: Move this into something generic.  We neeed a library for this stuff!
(defun doom-files--update-refs (&rest files)
  "Ensure FILES are updated in `recentf', `magit' and `save-place'."
  (let (toplevels)
    (dolist (file files)
      (when (featurep 'vc)
        (vc-file-clearprops file)
        (when-let (buffer (get-file-buffer file))
          (with-current-buffer buffer
            (vc-refresh-state))))
      (when (featurep 'magit)
        (when-let (default-directory (magit-toplevel (file-name-directory file)))
          (cl-pushnew default-directory toplevels)))
      (unless (file-readable-p file)
        (when (bound-and-true-p recentf-mode)
          (recentf-remove-if-non-kept file))
        (when (and (bound-and-true-p projectile-mode)
                   (doom-project-p)
                   (projectile-file-cached-p file (doom-project-root)))
          (projectile-purge-file-from-cache file))))
    (dolist (default-directory toplevels)
      (magit-refresh))
    (when (bound-and-true-p save-place-mode)
      (save-place-forget-unreadable-files))))

(defun doom/move-this-file (new-path &otional force-p)
  "Move current buffer's file to NEW-PATH.

If FORCE-P, overwrite the destination file if it exists, without confirmation."
  (interactive
   (list (read-file-name "Move file to: ")
         current-prefix-arg))
  (unless (and buffer-file-name (file-exists-p buffer-file-name))
    (user-error "Buffer is not visiting any file"))
  (let ((old-path (buffer-file-name (buffer-base-buffer)))
        (new-path (expand-file-name new-path)))
    (when (directory-name-p new-path)
      (setq new-path (concat new-path (file-name-nondirectory old-path))))
    (make-directory (file-name-directory new-path) 't)
    (rename-file old-path new-path (or force-p 1))
    (set-visited-file-name new-path t t)
    (doom-files--update-refs old-path new-path)
    (message "File moved to %S" (abbreviate-file-name new-path))
    )
  )

(defun config/current-buffer-file-delete-vc ()
  (interactive)
  (vc-delete-file (buffer-file-name))
  )

(defun config/current-buffer-file-delete-no-vc ()
  (interactive)
  (delete-file (buffer-file-name))
  )

(eval-after-load "evil"
  (progn
    (map!
     :leader
     :prefix ("f" . "files")
     :desc "File rename" "r" #'config/rename-current-buffer-file-vc
     :desc "File rename (no-vc)" "R" #'config/rename-current-buffer-file-no-vc
     :desc "File delete" "d" #'config/current-buffer-file-delete-vc
     :desc "File delete (no VC)" "D" #'config/current-buffer-file-delete-no-vc
     )
    ;; This keeps eval-after-load from calling the last thing evaluated (which
    ;; would be the function passed to `map!').
    nil
    )
  )
#+end_src
