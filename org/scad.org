#+title:     SCAD
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2021-05-09 Sun>
#+language:  en
#+file_tags:
#+tags:

* preview

** executable

My executable isn't found in =$PATH= due to how Homebrew exposes OpenSCAD. While
the Nix OpenSCAD package doesn't suffer this, the Nix package doesn't function
currently on =aarch64=.

The path must be expanded before being set.

#+name: config/openscad-command
#+begin_src emacs-lisp :results none :tangle yes
(setq-default scad-command (file-truename "~/bin/openscad"))
#+end_src

** local files in preview

No longer needed due to my PR.

#+name: config/scad-preview-current-directory
#+begin_src emacs-lisp :results none :exports code :tangle no
(defun config/scad-preview-current-directory ()
  "Add the current directory to OPENSCADPATH per
  https://github.com/openscad/emacs-scad-mode/pull/3."
  (setenv "OPENSCADPATH" default-directory)
  )
(advice-add 'scad-preview :before #'config/scad-preview-current-directory)
#+end_src

** key maps

The movement key bindings here are relative to the camera, not the model. When
the camera moves to the left (-x), the model(s) will appear to move right.

#+name:config/scad-preview-keymap
#+begin_src emacs-lisp :results none :tangle no
(map!
 :map scad-preview-mode-map
 :n "h" 'scad-preview-translate-x-
 :n "j" 'scad-preview-translate-z-
 :n "k" 'scad-preview-translate-z+
 :n "l" 'scad-preview-translate-x+
 )
#+end_src

** theme / color scheme

Light mode is the worst.

Schemes available can be found by going to OpenSCAD preferences/settings in the
"3D View" tab.

This needs to have double quotes because it is passed as-is to the shell, and
needs to be interpreted as a single argument.

Unfortunately, changing this requires a restart. I don't know why. I should file
a bug or pull request.

The bug seems to be in OpenSCAD itself with regards to "Tomorrow Night". Here's
an example command that fails, sans Emacs:

#+begin_example sh
openscad \
  -o /var/folders/g3/hj4b184s12sgynhxdddyy6rh0000gn/T/scad-preview-EtFlOx.scad.png \
  --preview \
  --projection=perspective \
  --imgsize=1000,1000 \
  --view=axes,scales \
  --camera=0,0,0,50,0,20,500 \
  --colorscheme='Tomorrow Night' \
  /var/folders/g3/hj4b184s12sgynhxdddyy6rh0000gn/T/scad-preview-EtFlOx.scad
#+end_example

Even with the quotes, this fails by printing the help message. If a bogus color
scheme is provided, OpenSCAD will print all of its schemes available and exit.
"Tomorrow Night" is listed.

"Starnight" works fine for my purposes.

#+begin_example sh
openscad \
  -o /var/folders/g3/hj4b184s12sgynhxdddyy6rh0000gn/T/scad-preview-EtFlOx.scad.png \
  --preview \
  --projection=perspective \
  --imgsize=1000,1000 \
  --view=axes,scales \
  --camera=0,0,0,50,0,20,500 \
  --colorscheme=Starnight \
  /var/folders/g3/hj4b184s12sgynhxdddyy6rh0000gn/T/scad-preview-EtFlOx.scad
#+end_example

I had edited the argument to have quotes around it in =scad-mode.el:345=

Original:
#+begin_example emacs-lisp
(format "--colorscheme=%s" scad-preview-colorscheme)
#+end_example

Modified:
#+begin_example emacs-lisp
(format "--colorscheme='%s'" scad-preview-colorscheme)
#+end_example

And that broke stuff. Probably because shell invocations are automatically
escaped or don't need escaping.

I don't recall if Tomorrow Night was attempted without quotes. But Starnight
works and flipping the variable doesn't stick without a restart. Alas.

#+name: config/scad-preview-color-scheme
#+begin_src emacs-lisp :results none
(setq-default scad-preview-colorscheme "Starnight")
#+end_src

* scad-mode

** key bindings

We need a binding to bring up the preview easily.

#+name: config/scad-keymap
#+begin_src emacs-lisp :results none :tangle no
;; Normalizing the keymaps seems to make the below actually stick. See
;; https://github.com/hlissner/doom-emacs/commit/1f5dae917677fc32ef75645c2d5225293c79d893
;; for inspiration.
(add-hook 'scad-mode-hook #'evil-normalize-keymaps)
(map!
 :map scad-mode-map
 :localleader
  :desc "Preview SCAD file" "p" #'scad-preview-mode
  )
#+end_src

** indentation
*** disable hanging indentation

See [[file:./prog-mode.org::*indent align fix]] for a description of alignment in
Emacs in a general sense.

Aligned indentation has made its way into =scad-mode=. From poking around
=scad-mode=, it looks like it uses C settings. See [[./prog-mode.org::*indentation]]
for reference.

#+name: config/scad-indentation-fix
#+begin_src emacs-lisp :results none :tangle no
(setq-default scad-indent-style "1tbs-no-align")
#+end_src

* org-babel

We can add =org-babel= support using [[https://github.com/wose/ob-scad][ob-scad]].

#+name: config/org-babel-ob-scad-add
#+begin_src emacs-lisp :results none :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '(scad . t)
 )
#+end_src


* stitch

#+begin_src emacs-lisp :results none :noweb yes
(defun list-of-stringp (xs)
  (--all-p xs #'stringp)
  )
(defun list-of-integerp (xs)
  (--all-p #'integerp xs)
  )

(use-package "scad-mode"
  :init
  ;; I'm not sure which of these work, and `safe-local-variable' isn't even
  ;; documented, but there are suggestions to use it.
  (add-to-list 'safe-local-variable-values '(scad-preview-camera . #'list-of-integerp))
  (put 'scad-preview-camera 'safe-local-variable #'list-of-integerp)
  <<config/scad-preview-keymap>>
  <<config/scad-keymap>>
  <<config/prog-mode-fix-c-indentation>>
  <<config/scad-indentation-fix>>
  ;; <<config/org-babel-ob-scad-add>>
  <<config/openscad-command>>
  <<config/scad-preview-color-scheme>>
  (add-hook 'scad-mode-hook #'config/prog-mode-c-style-set)
  ;;:config
  ;;<<config/scad-preview-current-directory>>
  )
#+end_src
