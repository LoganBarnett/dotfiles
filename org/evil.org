#+title:    evil-mode
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2019-01-02 Wed>
#+language: en
#+tags:     evil-mode emacs config

* leader

The leader key is the prefix to lots of stuff.  Populate Emacs distributions use
~SPC~ and that's what I plan on using as well.

Neither of these code blocks work - they interfere with Doom/General's
mappings.  Just use theirs since it works.

#+name: config/evil-leader-set
#+begin_src emacs-lisp :results none :tangle no
;; (evil-set-leader nil (kbd "SPC"))
#+end_src

The "localleader" is the major mode's leader.  "localleader" is purely a vim
term that's been kept in ~evil~.  While it's not very ergonimic, this is
typically ~SPC m~ and I want to keep it there until I can come up with something
better.

#+name: config/evil-localleader-set
#+begin_src emacs-lisp :results none :tangle no
;; (evil-set-leader nil (kbd "<leader> m") t)
#+end_src



* commenting

=g c= is the default comment operator. Spacemacs had =g y= for command + yank,
but Doom did not persist that. I think that's because Doom uses =evilnc= rather
than =evil-commentary=. Instead, Doom reserves =g y= for yank-unindented, which
does have its uses.

=evilnc-yank-and-comment-operator= covers this functionality.

Let's bind it to =g c=. I have tried things like =g C= and even =g Y= (although
it's taken already) but it's really weird since =evil-mode= is expecting me to
use =c= or =C= again in the case of =g C=, and I think it messes up the
operator. Instead, I don't think there's a time when I comment and I don't want
it to enter the kill ring.

The author of =evilnc= was very kind and quick to add
=evilnc-yank-and-comment-operator= for me. However it seemed to be buggy when I
tried it in =rust-mode=. The implementation below suits my needs better,
although it has a problem with doubling up on indentation, at least when
pasting. I'm not sure what to do about that. Perhaps I have to use the copy-line
equivalent function when that motion is provided. This bug only effects the
first line.

#+name: config/evil-comment-yanks
#+begin_src emacs-lisp :results none :tangle no

(evil-define-operator custom/evilnc-yank-and-comment-operator (begin end type register)
  "(Un)comment and yank the text from BEGIN to END."
  :move-point nil
  :repeat nil
  (interactive "<r><x><y>")
  (evil-yank-line begin end type register)
  (evilnc-comment-or-uncomment-region begin end)
  )

(map!
  :nv "g c" #'custom/evilnc-yank-and-comment-operator
  )
#+end_src


* evil-mode

** consistent yank

  #+name: config/evil-Y-yanks-to-eol
  #+begin_src emacs-lisp :tangle no :results none
    ;; (message "nothing to do in evil-mode config")
    (setq evil-want-Y-yank-to-eol t)
  #+end_src

** evil-collection
   =evil-collection= is a user maintained list of =evil-mode= bindings. It's not
   very compatible with the Spacemacs way of doing things, and I've had trouble
   getting some of the keybindings to work properly. For now I've opted to not
   use =evil-collection= and instead wire up my own bindings by hand. I've found
   a way to do this that seems to work consistently enough.

** fix: backslash (\)

The backslash key will trigger ~evil-execute-in-emacs-state~ which is just
driving me crazy.  I've been seeing random ~j~ and ~k~ showing up everywhere.
Part of the problem is I think my pinky is just hitting ~\~ as it tries to
accommodate the addition work I'm teaching it to do.  Stop this madness.

#+name: config/evil-backslash-fix
#+begin_src emacs-lisp :results none :exports code :tangle no
(map!
 :map evil-motion-state-map
 "\\" nil
 )
#+end_src

** fix: ESC

Emacs has an ~ESC ESC~ binding that invokes ~input-decode-map~ but we tend to
hit ~ESC~ a lot with ~evil-mode~.  Fix the behavior with ~evil-esc-mode~, which
addresses this directly.  It is included with the ~evil~ library.

It does have a weird delay wherein pressing ~ESC ESC~ fast enough can trigger
~input-decode-map~ and that kind of binding is very surprising.  Just use
another one!

#+name: config/evil-esc-fix
#+begin_src emacs-lisp :results none :exports code :tangle no
(add-hook 'evil-mode-hook #'evil-esc-mode)
(setq-default evil-esc-delay 0)
#+end_src

** undo

Must be called after ~evil~ is loaded.

#+name: config/evil-undo
#+begin_src emacs-lisp :results none :exports code :tangle no
;; This doesn't work.  Use a bespoke function to set the value instead.
;; (setq-default evil-undo-system 'undo-redo)
(evil-set-undo-system 'undo-redo)
;; In case we ever use undo-tree-mode.
;; (global-undo-tree-mode 1)
#+end_src


* evil-snipe
The =evil-snipe= package promises better/smarter searching for =f=, =F=, =t=, and
=T=.
** case sensitivity
Doom uses the smart case by default. While I enjoy this with =/= I do not enjoy
it here. The motions =evil-snipe= uses need to be precise in my mind.

#+name: config/evil-snipe-smart-case-disable
#+begin_src emacs-lisp :results none :tangle no
(setq-default evil-snipe-smart-case nil)
#+end_src
** overriding normal seek keys

=evil-snipe= will override =f/F/t/T= when sniping. I find this confusing and
counter to my vanilla vim bindings. Disable it. We can use =;= and =,= for that.

#+name: config/evil-snipe-override-disable
#+begin_src emacs-lisp :results none :tangle no
(setq-default
 evil-snipe-override-evil-repeat-keys t
 evil-snipe-repeat-keys nil
 )

;; I couldn't get map! to do what I wanted here. Left for reference.
;; `evil-global-set-key' seems to do the trick though.
;;
;; (map!
;;  :mnv :desc "evil-snipe search repeat" ";" #'evil-snipe-repeat
;;  :mnv :desc "evil-snipe search repeat reverse" "," #'evil-snipe-repeat-reverse
;;  )
;;
;; TODO: I should probably file a pull request or something here. Without this,
;; ; and , are completely broken. This is because when not in the transient map,
;; ; and , do the normal evil repeat search, which doesn't work since evil-snipe
;; tracks what has been searched. "No previous search" is displayed, or
;; something like that.
(evil-global-set-key 'motion (kbd ";") #'evil-snipe-repeat)
(evil-global-set-key 'motion (kbd ",") #'evil-snipe-repeat-reverse)
#+end_src

** fix whitespace seeking motion

=evil-snipe= has a behavior, that when switched on, won't consume or include
whitespace when seeking to whitespace. For example, use =d f SPC= or =v f SPC=
before two words. This is recorded in [[https://github.com/hlissner/evil-snipe/issues/70][evil-snipe#70]]. This can be addressed by
setting =evil-snipe-skip-leading-whitespace= to =nil=.

#+name: config/evil-snipe-fix-whitespace-seek
#+begin_src emacs-lisp :results none :tangle no
(setq-default evil-snipe-skip-leading-whitespace nil)
#+end_src


** apply

We're getting desperate.

#+begin_src emacs-lisp :results none :noweb yes :tangle yes
(use-package "evil-snipe"
  :after evil
  :init
  ;; This is required to activate the ; and , motions using evil-snipe.  We
  ;; want evil-snipe doing this because it grants us a nice colored repeat and
  ;; it can flow to new lines.
  (evil-snipe-override-mode)
  :config
  <<config/evil-snipe-smart-case-disable>>
  <<config/evil-snipe-fix-whitespace-seek>>
  <<config/evil-snipe-override-disable>>
  <<config/evil-snipe-smart-case-disable>>
  )
#+end_src

* evil-iedit-state
The [[https://github.com/syl20bnr/evil-iedit-state][evil-iedit-state]] package is something I encountered first with Spacemacs. It
brings up a [[https://github.com/abo-abo/hydra][hydra]] interface when pressing =*= or =#=. In vim these typically
select all occurrences of the word that the cursor is on, and will do a forward
or reverse search, depending on which of the two were pressed.

=evil-iedit-state= takes this a bit further, and provides a =hydra= state that
allows for interactive editing, which can include refactoring identifiers.

# Disabled for now.
#+begin_src emacs-lisp :results none :tangle no

(defhydra hydra-evil-iedit-state
  (
   ;; None of the keys in the string are actually different from
   ;; evil-iedit-state. Just pass through all key bindings to evil-iedit-state.
   :foreign-keys run
   :hint none
   )
  ;; Yanked from spacemacs-visual-editing.
  "
 _n_ next                _r_ change range         _R_ reset       _e_ iedit
 _N_ previous            _o_ open below
 _d_ next definition     _O_ open above
 _D_ previous definition _F_ restrict to function
 _C-g_/_ESC_ quit
"
  ("n" (iedit-next-occurrence))
  ("N" (iedit-prev-occurrence))
  ("F" (iedit-restrict-function))
  ("o" (evil-iedit-state/evil-open-below))
  ("O" (evil-iedit-state/evil-open-above))

  ("C-g" (evil-iedit-state/quit-iedit-mode) :exit t)
  ("ESC" (evil-iedit-state/quit-iedit-mode) :exit t)
  )

(require 'evil-iedit-state)
(defun config/begin-evil-iedit-state ()
  (interactive) ;; Necessary to satisfy commandp.
  (evil-iedit-state/iedit-mode)
  (hydra-evil-iedit-state/body)
  )
(add-hook 'hydra-evil-iedit-state-exit-hook #'hydra-disable)

(define-key evil-normal-state-map (kbd "*") #'config/begin-evil-iedit-state)
(define-key evil-normal-state-map (kbd "#") #'config/begin-evil-iedit-state)

#+end_src
* evil-command-line

The =evil-command-line= is the modal input that appears at the bottom of the
editor when typing things like =:=. So =:e foo.sh= would invoke the
=evil-command-line=.

** evil-command-line command history navigation

According to [[https://github.com/emacs-evil/evil/blob/d28206ccff74bc07ba335b8ff77805564f6928d7/evil-maps.el#L607][the code]] this should already be set, but I have not found that to
be the case. Essentially, pressing =C-p= and =C-n= should go to the next and
previous _history matches_ instead of _history elements_. So if I do =:e= and
then =C-p=, I should see myself moving backwards through my history of any
commands prefixed with =:e=.

#+name: config/evil-command-line-history-bindings
#+begin_src emacs-lisp :results none :tangle no
(define-key evil-command-line-map "\C-p" #'previous-complete-history-element)
(define-key evil-command-line-map "\C-n" #'next-complete-history-element)
#+end_src


* evil-exchange

I have ~evil-exchange~ wired up in [[stitch]] but I am not liking it a lot so far.
It uses a model where one mark text and then you mark what you want to exchange
with it.  I think maybe that makes sense but I was hoping for something like
~gx2w~ and it would transpose 2 ~word~ objects.  I suppose generally with vim
that you're working on a single thing at a time, and so motions and such don't
really make sense (like what would ~gxx~ do?).  That said, maybe it could accept
more motions or something? You'd need to start a motion, set a mark, end a
motion.  It would be more limited than what ~evil-exchange~ would but it also
wouldn't have a "mouse" like feel to it.

For now, I'm keeping ~evil-exchange~ because it seems like it could be helpful
in some circumstances.

* searching

A recent =org-mode= update has broken searching for =evil-mode=. Basically:
Searching in =evil-mode= won't unfold anything in the buffer, so =evil-mode=
thinks there's only what's visible as possible search candidates. The total
search results reported remains correct, however.
https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1219582005

Others report this works, and I have witnessed this working. However I haven't
seen if it works after a fresh restart.

I have a lot of permutations here, but I think it's in large part because it
wasn't included in the [[stitch]] section.

#+name: config/evil-fix-org-fold-search-doom-6578
#+begin_src emacs-lisp :results none :tangle no

;; Unfortunately, this uses a function instead of a variable, which has a global
;; context. We can't selectively use different search modules for different
;; modes.
;; (defun config/unfix-org-fold-search ()
;;   (if (eq major-mode 'org-mode)
;;     ;; We're leaving org-mode, so put evil-search back.
;;     (evil-select-search-module 'evil-search-module 'evil-search)
;;     nil
;;     )
;;   )
(defun config/fix-org-fold-search ()
  (evil-select-search-module 'evil-search-module 'isearch)
  )

;;(after! evil
;;  (evil-select-search-module 'evil-search-module 'isearch)
;;  )
;; (add-hook 'change-major-mode-hook #'config/unfix-org-fold-search)
(add-hook 'org-mode-hook #'config/fix-org-fold-search)
;; (after! org
;;   (evil-select-search-module 'evil-search-module 'isearch)
;;   )
;; (evil-select-search-module 'evil-search-module 'isearch)
#+end_src

* search and replace
** global search and replace

I found it quite handy to have things like =:%s= and =:s= replace globally by
default, with the option to deactivate it by adding the =g= flag at the end of
the expression. This got switched off during an upgrade, so now I set it
manually.

#+name: config/evil-global-substitute
#+begin_src emacs-lisp :results none :tangle no
(setq evil-ex-substitute-global t)
#+end_src

* stitch

It may not be apparent but =use-package= works as you'd want it to even if the
library is already loaded.

#+begin_src emacs-lisp :results none :noweb yes
;; <<config/evil-fix-org-fold-search-doom-6578>>
(use-package "evil"
  :ensure t
  :init
  ;; These must be set before evil is loaded.
  <<config/evil-Y-yanks-to-eol>>
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (message "requiring evil-mode...")
  (require 'evil)
  (require 'evil-exchange)
  (evil-exchange-install)
  <<config/evil-undo>>
  (message "required evil-mode")
  :config
  <<config/evil-backslash-fix>>
  <<config/evil-esc-fix>>
  <<config/evil-leader-set>>
  <<config/evil-localleader-set>>
  <<config/evil-global-substitute>>
  <<config/evil-command-line-history-bindings>>
  (require 'general)
  (general-evil-setup)
  ;; Provide us with `map!`.
  (load-library "doom-crutch")
  (evil-select-search-module 'evil-search-module 'isearch)
  <<config/evil-comment-yanks>>
  )

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  )
#+end_src
