#+title:    evil-mode
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2019-01-02 Wed>
#+language: en
#+tags:     evil-mode emacs config

* commenting

=g c= is the default comment operator. Spacemacs had =g y= for command + yank,
but Doom did not persist that. I think that's because Doom uses =evilnc= rather
than =evil-commentary=. Instead, Doom reserves =g y= for yank-unindented, which
does have its uses.

=evilnc-yank-and-comment-operator= covers this functionality.

Let's bind it to =g C=. Using =g C= as a modifier to =g c $= doesn't work out of
the box anyways, and we can always just use =g c $=.

#+begin_src emacs-lisp :results none
(map!
  :n "g C" #'evilnc-yank-and-comment-operator
  )
#+end_src


* evil-mode
  #+begin_src emacs-lisp
    ;; (message "nothing to do in evil-mode config")
    (setq-default evil-want-Y-yank-to-eol t)
  #+end_src
** evil-collection
   =evil-collection= is a user maintained list of =evil-mode= bindings. It's not
   very compatible with the Spacemacs way of doing things, and I've had trouble
   getting some of the keybindings to work properly. For now I've opted to not
   use =evil-collection= and instead wire up my own bindings by hand. I've found
   a way to do this that seems to work consistently enough.
* evil-snipe
The =evil-snipe= package promises better/smarter searching for =f=, =F=, =t=, and
=T=. I am giving it a shot, though I am holding out judgment so far.
** case sensitivity
Doom uses the smart case by default. While I enjoy this with =/= I do not enjoy
it here. The motions =evil-snipe= uses need to be precise in my mind.

#+name: evil-snipe-disable-smart-case
#+begin_src emacs-lisp :results none
(setq-default evil-snipe-smart-case nil)
#+end_src
** apply
#+begin_src emacs-lisp :results none :noweb yes
<<evil-snipe-disable-smart-case>>
#+end_src
* evil-iedit-state
The [[https://github.com/syl20bnr/evil-iedit-state][evil-iedit-state]] package is something I encountered first with Spacemacs. It
brings up a [[https://github.com/abo-abo/hydra][hydra]] interface when pressing =*= or =#=. In vim these typically
select all occurrences of the word that the cursor is on, and will do a forward
or reverse search, depending on which of the two were pressed.

=evil-iedit-state= takes this a bit further, and provides a =hydra= state that
allows for interactive editing, which can include refactoring identifiers.

# Disabled for now.
#+begin_src emacs-lisp :results none :tangle no

(defhydra hydra-evil-iedit-state
  (
   ;; None of the keys in the string are actually different from
   ;; evil-iedit-state. Just pass through all key bindings to evil-iedit-state.
   :foreign-keys run
   :hint none
   )
  ;; Yanked from spacemacs-visual-editing.
  "
 _n_ next                _r_ change range         _R_ reset       _e_ iedit
 _N_ previous            _o_ open below
 _d_ next definition     _O_ open above
 _D_ previous definition _F_ restrict to function
 _C-g_/_ESC_ quit
"
  ("n" (iedit-next-occurrence))
  ("N" (iedit-prev-occurrence))
  ("F" (iedit-restrict-function))
  ("o" (evil-iedit-state/evil-open-below))
  ("O" (evil-iedit-state/evil-open-above))

  ("C-g" (evil-iedit-state/quit-iedit-mode) :exit t)
  ("ESC" (evil-iedit-state/quit-iedit-mode) :exit t)
  )

(require 'evil-iedit-state)
(defun config/begin-evil-iedit-state ()
  (interactive) ;; Necessary to satisfy commandp.
  (evil-iedit-state/iedit-mode)
  (hydra-evil-iedit-state/body)
  )
(add-hook 'hydra-evil-iedit-state-exit-hook #'hydra-disable)

(define-key evil-normal-state-map (kbd "*") #'config/begin-evil-iedit-state)
(define-key evil-normal-state-map (kbd "#") #'config/begin-evil-iedit-state)

#+end_src
* search and replace
** global search and replace

I found it quite handy to have things like =:%s= and =:s= replace globally by
default, with the option to deactivate it by adding the =g= flag at the end of
the expression. This got switched off during an upgrade, so now I set it
manually.

#+begin_src emacs-lisp :results none
(setq evil-ex-substitute-global t)
#+end_src
