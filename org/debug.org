#+title:     Debug
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2020-09-29 Tue>
#+language:  en
#+file_tags:
#+tags:

* debugging
** what faces are under my cursor

=what-cursor-position= is supposed to describe this, but one must call it with
the "prefix" to get anything useful out of it. I'm of the opinion that the
prefix is sort of like a context menu - it's incredibly difficult to discover.
So instead we'll just make an interactive function that invokes
=what-cursor-position= with the prefix.

I should make a macro out of this for any prefix function.

It should be noted that =what-face= is another function with a similar purpose
which still requires face selection, making it not useful for discovering what
is causing a particular area to receive a particular combination of faces.

#+begin_src emacs-lisp :results none
(defun what-cursor-position-prefix ()
  "Call `what-face' with the prefix for optional POS.

Discoverable as an interactive function."
  (interactive)
  (setq current-prefix-arg '(4)) ; 4 = C-u...?
  (call-interactively 'what-cursor-position)
  )
#+end_src

Typically this is bound to =g a=. I don't know when I'd want to use the old form
so let's replace it.

#+begin_src emacs-lisp :results none
;; Unbind the old one first.
(map!
 :map evil-normal-state-map
 "g a"
 nil
 )
(map!
 :map evil-normal-state-map
 :desc "Describe cursor properties"
 "g a"
 #'what-cursor-position-prefix
 )
#+end_src

** who called this

Let's be real: Emacs is massive. Its packages are sprawling. Some packages are
well authored to be very self-contained. Others not so much, either because that
is the true nature of the package or because the author thought themselves to be
helpful. Either way it can be a pain. Oftentimes I find that some setting or
call I made is overridden by some other package. Finding that package requires
some clever searching, but the sure-fire way to get it is through getting the
stack trace upon call.

This needs more work. I cannot keep it from tripping up on the fact that =fn= is
a symbol. I don't know why that would harm anything here.
#+begin_src emacs-lisp :results none
(defun config/before-debug-caller (fn)
  (message "[DEBUG] %s called:" fn)
  (backtrace)
  )

(defmacro config/debug-caller (fn)
  (message "Advising %s" fn)
  (advice-add fn :before (lambda (&rest _) (config/before-debug-caller fn)))
  (message "Advised")
  )
#+end_src
