#+title:     Dungeons & Dragons
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2019-09-15 Sun>
#+language:  en
#+file_tags:
#+tags:

* load from disk
I don't quite have =dnd.org= published to =elpa= just yet. So I need to load it
from my filesystem.

#+name: config/dnd-load
#+begin_src emacs-lisp :results none :tangle yes
(org-babel-load-file
  (expand-file-name "~/dev/org-dnd/dnd.org")
  )
#+end_src

* key bindings
** prefix keys
  #+name: org-dnd-key-bindings
  #+begin_src emacs-lisp :results none
  (on-doom
    ;; (map!
    ;;   :localleader
    ;;   :desc "dnd"
    ;;   (:prefix "D"
    ;;     :map org-mode-map
    ;;     :ne "n" #'dnd/next-round
    ;;    )
    ;;  )
   )
  #+end_src
** transportation circle

Transportation Circle is the brand name I just made up for this functionality.

*** introduction to transportation circle

I wanted to use transient.el. I love magit, I love its interface. It has loads
of documentation but it's hard to take that documentation and turn it into real,
working code. It also uses objects, which especially confuse me in the world of
Emacs and Lisp. Working on this would give me a better grasp of how to control a
buffer in Emacs specifically for the purposes of some kind of interactive
interface, rather than a text file. I have other twisted plots in mind, once I
have some familiarity here.

I have tried hydra. While hydra is within the realm of this functionality, it's
designed to be relatively basic. There's value in that, but it doesn't allow the
customization I want.

*** emacs terminology

As a quick refresher:
+ Frame :: A "window" in terms of most GUIs. The frame is a UI whose direct
  parent is the OS itself. It will likely have a close, maximize, and minimize
  buttons.
+ Window :: This is a section within a frame. Generally, windows are associated
  with a buffer.

*** display the window

#+name: tc/buffer-display-body
#+begin_src emacs-lisp :results none :noweb yes
(let ((buffer (get-buffer-create "*transportation circle*"))
      )
  ;; display-buffer-in-child-frame is basically a pop-up. But maybe we want
  ;; that, if we can control some parameters of it.
  ;; Oh, I'm not supposed to call these directly.
  ;; (display-buffer-in-child-frame buffer '(
  ;;                                    inhibit-same-window
  ;;                                    inhibit-switch-frame
  ;;                                    ))
 ;; display-buffer-in-child-frame looks like a better candidate - read up on it.
  ;; (display-buffer-at-bottom buffer '(
  ;;                                    inhibit-same-window
  ;;                                    inhibit-switch-frame
  ;;                                    ))

  ;; For twisted plots later: display-buffer-at-bottom would be good for a
  ;; global mode-line.
  (display-buffer buffer '((display-buffer-below-selected)
                           (inhibit-same-window . t)
                           (inhibit-switch-frame . t)
                           (window-height . 10)))
  (tc/buffer-populate buffer)
  (other-window 1)
)
#+end_src

#+name: tc/buffer-display-fn
#+begin_src emacs-lisp :results none :noweb yes
<<tc/buffer-populate-fn>>
(defun tc/buffer-display ()
  (interactive)
  <<tc/buffer-display-body>>
  )
#+end_src

*** buffer contents

#+name: tc/buffer-populate-fn
#+begin_src emacs-lisp :results none :noweb yes
<<tc/buffer-entries-populate-fn>>

(defvar tc/actions '(
                     ((key . "i") (name . "initiative"))
                     ((key . "c") (name . "generate character"))
                     ((key . "o") (name . "generate location"))
                     ((key . "t") (name . "generate item"))
                     ))

(defun tc/buffer-populate (buffer)
  (save-window-excursion
    (switch-to-buffer buffer)
    (erase-buffer)
    (font-lock-mode)
    <<tc/buffer-heading-populate>>
    (tc/buffer-entries-populate tc/actions)
    )
  )
#+end_src

**** buffer heading

#+name: tc/buffer-heading-populate
#+begin_src emacs-lisp :results none :noweb yes
(insert "Transportation Circle for ")
(insert "D&D")
(insert "\n\n")
#+end_src

**** buffer entries

#+name: tc/buffer-entries-populate-fn
#+begin_src emacs-lisp :results none :noweb yes
(defun tc/buffer-entries-populate (actions)
  "Insert ACTIONS into the selected buffer."
  (message "%s" actions)
  (insert
   (-reduce #'concat
            (-map
             (lambda (action)
               (message "action: %s" action)
               (message "action.key:  %s" (cdr (assoc "key" action)))
               (message "action.name: %s" (cdr (assoc "name" action)))
               (concat
                "  " ;; Indent.
                (propertize (cdr (assoc "key" action))
                            'font-lock-face
                            '(:foreground "purple")
                            )
                (propertize (concat " " (cdr (assoc "name" action)))
                            'font-lock-face
                            '(:foreground "#4488DD")
                            )
                "\n"
                )
               )
             actions
             )
            )
   )
  )
#+end_src

*** key bindings

=SPC m D D=

#+begin_src emacs-lisp :results none :noweb yes
<<tc/buffer-display-fn>>

(on-doom
  (map!
    :localleader
    :desc "dnd"
    (:prefix "D"
      :map org-mode-map
      :ne "D" #'tc/buffer-display
      )
    )
 )
#+end_src


* music

  #+begin_src emacs-lisp :results none
    (defun config/dnd-row-to-track (row)
      (message "got row %s" row)
      (let ((name (org-table-get row dnd/name-column)))
        (message "name %s" name)
        (format
        ;; TODO: Parameterize this for other songs.
        "Symphony Of The Void - %s.mp3"
        (or
          (cdr (assoc
          name
          '(
            ("Dee" . "Cello")
            ("Lakal" . "Tambura")
            ("Ydrellia" . "Bansuri")
            ("Zell" . "Oud")
            ("other" . "Trumpet")
            )
          ))
          "Trumpet"
          )
        )
      )
    )

    (defun config/dnd-trigger-personalized-music (row)
      (message "Requesting track change.")
      (let ((track (config/dnd-row-to-track row)))
        (message "Track %s" track)
        (request
          "http://localhost:3704/track/switch"
          :data (json-encode track)
          :headers '(("Content-Type" . "application/json"))
          ;; :parser 'json-read
          ;; :success (cl-function (lambda () (message "Swapped music.")))
          :type "POST"
          )
        )
      )

    (defun config/dnd-hook-personalized-music ()
      (add-hook 'dnd/turn-functions #'config/dnd-trigger-personalized-music)
      )
  #+end_src
* utilities
** equipment weight
#+name: org-dnd-equipment-weight
#+begin_src emacs-lisp :results none :tangle yes
(defun dnd/total-equipment-weight (weights qtys)
  "Calculate the total weights using WEIGHTS * QTYS."
  (reduce
  '+ (-map
      (lambda (xs)
        (* (car xs) (cdr xs)))
      (-zip weights qtys)
      )
  :initial-value 0)
  )
#+end_src

* using
  #+begin_src emacs-lisp :results none :noweb yes
    (with-eval-after-load 'org
      (message "Loading D&D settings...")
      <<org-dnd-key-bindings>>
      <<org-dnd-equipment-weight>>
      (require 'request)
      <<config/dnd-load>>
      (config/dnd-hook-personalized-music)
      )
  #+end_src
