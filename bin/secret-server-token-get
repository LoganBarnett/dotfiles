#!/usr/bin/env bash

################################################################################
# Gets the oauth2 bearer token from Secret Server using the credentials.
#
# This may not work in all configurations, but it has been tested to work on at
# least one where the grant_type of password is still allowed.
#
# It does not survive redirects. I have not observed redirects doing the correct
# thing for Secret Server (the sub-URI is not preserved).
#
# $1 - The base URL.
# $2 - The "domain" for Secret Server. Not to be mistaken with a domain name on
# the network.
# $3 - The user's name.
# $4 - The organization code. This is not necessary on self-hosted Secret Server
# instances, and my testing agrees with this. Untested for hosted Secret Server.
# stdin - The password is passed in via stdin.
################################################################################
set -euo pipefail

# If you are lifting this script for your own uses, you can remove this and
# change instances of "slog" to "echo", or use your own logging which
# (preferably) goes to stderr.
source ~/.bash-logging

if ! which jq > /dev/null ; then
  slog "jq not found on PATH, which is required for $0. Exiting..."
  exit 2
fi

function usage() {
  # See https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
  # on the syntax for utilities, which is used here.
  cat <<EOF 1>&2
Usage: $0 <base_url> <secret_server_domain> <username> [organization_code]
EOF
}

if [[ "${1:-}" == "" ]]; then
  echo "Required 'base_url' parameter missing." 1>&2
  usage
  exit 1
else
  baseUrl=$1
fi

if [[ "${2:-}" == "" ]]; then
  echo "Required 'secret_server_domain' parameter missing." 1>&2
  usage
  exit 1
else
  secretServerDomain=$2
fi

if [[ "${3:-}" == "" ]]; then
  echo "Required 'username' parameter missing." 1>&2
  usage
  exit 1
else
  username=$3
fi

# Not required for self-hosted Secret Server.
organizationCode=${4:-}
function input() {
  local in
  read in
  printf "%s" "$in"
}
password="$(input)"

function soap() {
  url="$baseUrl/Authenticate?\
username=$username\
&password=$password\
&organization=$organizationCode\
&domain=$secretServerDomain\
"

  slog "$url"
  curl -L -X GET "$url"
}

function rest() {
  url="$baseUrl/oauth2/token"
  grantType="password"
  curl "$url" \
    --silent \
    -X POST \
    --data-urlencode "domain=$secretServerDomain" \
    --data-urlencode "username=$username" \
    --data-urlencode "password=$password" \
    --data-urlencode "grant_type=$grantType" \
    | jq -r '.access_token'
}

rest
