#!/usr/bin/env bash

source ~/.bash-logging

set -e
##
# When connecting to the VPN, dnsmasq is started to achieve a split-DNS
# resolution. In some cases dnsmasq comes down but we don't reassign the DNS
# properly. This sets it back.
#
# I suspect this is not the complete answer to fixing a lodged DNS setting,
# since this just seems to lodge the DNS in a new way. Connecting to new
# networks will result in a successful DHCP query, and sets the interface's IP
# address correctly, but the DNS setting from DHCP does not work. It is likely
# that this fix should instead "unset" whatever has been set before by VPN.
##

states=$(
  scutil <<< list \
    | awk '{ print $4 }' \
    | egrep '^State:.+/DNS$' \
)
hardwarePorts=$(networksetup -listallhardwareports \
  | grep 'Hardware Port:' \
  | sed -E 's/Hardware Port: (.+)$/\1/' \
  | grep -v -E 'Thunderbolt [0-9]+'
  )
IFS=$'\n'
# What we used to do:
# d.add ServerAddresses * ${dnsIps}
#
# I need to test that remove works with four scenarios:
# 1: When connecting to vpn.
# 2: When disconnecting from vpn.
# 3: When connecting to proton.
# 4: When connecting to something other than proton.
#
# So far it seems to work while connected to proton already.
# for state in $states ; do
#   slog $state
#   printf "d.init
# d.show
# d.remove ServerAddresses
# d.add ServerAddresses *
# d.add SearchDomains *
# set ${state}
# d.show
# quit
# " | tee /dev/tty | sudo scutil
# done
for port in $hardwarePorts; do
  slog "Configuring $port to use DHCP."
  # This tells macOS to use DHCP for this port. Without this, the -setdnsservers
  # and -setsearchdomains will persist across networks, and the system will
  # not query and use DHCP to get information - this breaks our presence on
  # other networks or even disconnecting from VPN.
  sudo networksetup -setdhcp "$port"
  slog "Setting $port DNS to Empty..."
  sudo networksetup -setdnsservers "$port" Empty
  slog "Setting $port search domains to Empty..."
  sudo networksetup -setsearchdomains "$port" Empty
  sudo networksetup -setwebproxystate "$port" Off
  sudo networksetup -setsecurewebproxystate "$port" Off
  sudo networksetup -setv6automatic "$port"
  sudo networksetup -setproxybypassdomains "$port" Empty
done
slog "Resetting DNS daemon..."
# dnsflush
sudo dscacheutil -flushcache
sudo killall -HUP mDNSResponder

slog "Unfortunately absolutely none of this works without a restart."
slog "Bringing the network service down. This will interrupt connections."
for port in $hardwarePorts; do
  slog "Stopping $port..."
  sudo networksetup -setnetworkserviceenabled "$port" Off
  slog "Restarting $port..."
  sudo networksetup -setnetworkserviceenabled "$port" On
done
slog "Done!"
