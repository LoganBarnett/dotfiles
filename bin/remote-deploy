#!/usr/bin/env bash

################################################################################
# This script aims at faking some of the remote build stuff Nix claims to
# support.
#
# The problem:
# I can't figure out how to get Nix to deploy to another machine.  I've tried:
# 1. Writing the image to disk: QEMU segfault with a funky, trimmed down glibc
#    that I can't get rid of.
# 2. nixos-rebuild switch --target host - same problem:  It doesn't want to
#    build on the target host.  Probably because I don't have it setup as a
#    build machine.  Further investigation is needed there.
# 3. Praying to the machine god.  Offerings made according to specifications.
#    Prayers have gone unanswered, or a long journey of discovery awaits.
# 4. Using deploy-rs.  Same cross-build issues.
# 5. Using nixos-anywhere.  It's nixos-nowhere as far as I can tell.  Same
#    cross-build issues.
# 6. Using nixos-generate.  Same cross-build issues.
#
# The common theme seems to be cross compiling from aarch64 to x86_64, which is
# apparently not a direction many folks travel in.  Usually it goes in the other
# direction (x86_64 to aarch64).  There's some deep assumptions built into the
# build process as a result, I think.
#
# I've found that the manual is basically not be trusted.  Blog posts are far
# too outdated, or claims are made under a different arrangement of platforms.
# The message has been "read the code lol", to which I have done but I am just
# not deep enough into it with 4 weeks of massive personal time put into this.
################################################################################

set -euo pipefail

bootstrap_host=''
build=false
switch=true
enter_via_host=''

while true; do
  case "${1:-}" in
    -h | --help)
      cat <<EOH
Usage: $0 [opts] <hostname>

  --bootstrap <host>   Put this on a host first, then attempt to build it.
                       Normally remote-deploy assumes the remote to deploy to
                       and the build target are the same.  This allows for a
                       different deployment.  This can be helpful when Nix
                       cannot build on macOS because it still uses a case
                       insensitive file system (see
                       https://github.com/tstat/raspberry-pi-nix/issues/2 and
                       https://github.com/NixOS/nix/issues/2415 for open issues
                       on these as of 2024-06-03).

  --build              Indicate we should do a `nix build` instead of `nixos
                       rebuild switch`. Default: false.

  --enter-via <host>   SSH to this host instead of assuming the build machine
                       and target machine are the same.  This will also involve
                       a nixos-enter and mounting the disks found in
                       fileSystems.

  --no-switch          Do not `nixos-rebuild switch` - just copy the files.
                       This can be helpful for running this session over tmux.

Copies nix files to a host via rsync over SSH, and attempts to do a
`nixos-rebuild switch`.

EOH
      exit
      ;;
    --bootstrap)
      bootstrap_host="${2:-}"
      shift 2
      ;;
    --enter-via)
      enter_via_host="${2:-}"
      shift 2
      ;;
    --no-switch)
      switch=false
      shift 1
      ;;
    --build)
      build=true
      shift 1
      ;;
    * ) break ;;
  esac
done
# I can't bash well enough to simplify this.
if [[ "${bootstrap_host:-}" != "" ]]; then
  host=$bootstrap_host
elif [[ "$enter_via_host" != '' ]]; then
  echo "Setting host to $enter_via_host"
  host="$enter_via_host"
else
  host="${1:-}.proton"
fi
target="${1:-}"
shift
echo "Deploying $target to $host..."
# rsync is ideal, but needs to be present on the remote machine.  We don't have
# that setup yet - or at least I have old installer without it.  Next time we
# look, switch.
# We exclude .git because we do a `git init && git add .` on the remote side,
# and this creates a .git directory.  This will prevent rsync from deleting the
# .git directory and then subsequently our script recreates it.  The process is
# very slow and we're going to update the staged state anyways.
rsync \
  --archive \
  --verbose \
  --human-readable \
  --delete-after \
  --exclude='result' \
  --exclude='.git' \
  ./ $host':~/proton-nix'
# This needs to be sudo because nixos-rebuild claims one or more of the .git
# files.
# ssh $host 'sudo rm -rf $HOME/proton-nix'
echo $build
if [[ "$enter_via_host" == '' ]]; then
  # No, you can't simplify this because $build is a boolean.
  nix_command=$([[ $build == true ]] && echo 'nix build' || echo 'nixos-rebuild switch')
  command="set -x; cd proton-nix ;
  sudo $nix_command --flake '.#$target' --show-trace --impure"
else
  command="set -x;
bootstrap-disk.sh
# 4. Run nixos-install.
nixos-install
"
fi
# This creates a bunch of noise, but as far as I can tell there's no problems
# had.  Some of the history is probably borked, but I just need the working tree
# to be intact, and by all observations that is the case.  I have heard about
# "git bundle" that might help here.  It packs and unpacks a git blob that more
# safely can traverse the wire, and wouldn't require rsync as badly.
# scp -r $HOME/dev/dotfiles/nix/ $host':~/proton-nix' > /dev/null
ssh $host "\
set -e; \
set -x; \
cd proton-nix && \
git init && \
git add . \
"
if $switch ; then
  ssh $host "\
  $command \
"
else
  echo "Switch skipped.  You can run manually:"
  echo "$command"
fi
